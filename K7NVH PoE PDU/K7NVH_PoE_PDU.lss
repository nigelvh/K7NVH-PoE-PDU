
K7NVH_PoE_PDU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800100  000035fa  0000368e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  0080023a  0080023a  000037c8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000037c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000007b0  00000000  00000000  000037e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000d309  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e74  00000000  00000000  00011299  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006be0  00000000  00000000  0001410d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001180  00000000  00000000  0001acf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004531  00000000  00000000  0001be70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007a07  00000000  00000000  000203a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007c8  00000000  00000000  00027da8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	20 c2       	rjmp	.+1088   	; 0x442 <__ctors_end>
       2:	00 00       	nop
       4:	3a c2       	rjmp	.+1140   	; 0x47a <__bad_interrupt>
       6:	00 00       	nop
       8:	38 c2       	rjmp	.+1136   	; 0x47a <__bad_interrupt>
       a:	00 00       	nop
       c:	36 c2       	rjmp	.+1132   	; 0x47a <__bad_interrupt>
       e:	00 00       	nop
      10:	34 c2       	rjmp	.+1128   	; 0x47a <__bad_interrupt>
      12:	00 00       	nop
      14:	32 c2       	rjmp	.+1124   	; 0x47a <__bad_interrupt>
      16:	00 00       	nop
      18:	30 c2       	rjmp	.+1120   	; 0x47a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2e c2       	rjmp	.+1116   	; 0x47a <__bad_interrupt>
      1e:	00 00       	nop
      20:	2c c2       	rjmp	.+1112   	; 0x47a <__bad_interrupt>
      22:	00 00       	nop
      24:	2a c2       	rjmp	.+1108   	; 0x47a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__vector_10>
      2c:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__vector_11>
      30:	6d c4       	rjmp	.+2266   	; 0x90c <__vector_12>
      32:	00 00       	nop
      34:	22 c2       	rjmp	.+1092   	; 0x47a <__bad_interrupt>
      36:	00 00       	nop
      38:	20 c2       	rjmp	.+1088   	; 0x47a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1e c2       	rjmp	.+1084   	; 0x47a <__bad_interrupt>
      3e:	00 00       	nop
      40:	1c c2       	rjmp	.+1080   	; 0x47a <__bad_interrupt>
      42:	00 00       	nop
      44:	1a c2       	rjmp	.+1076   	; 0x47a <__bad_interrupt>
      46:	00 00       	nop
      48:	18 c2       	rjmp	.+1072   	; 0x47a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	16 c2       	rjmp	.+1068   	; 0x47a <__bad_interrupt>
      4e:	00 00       	nop
      50:	14 c2       	rjmp	.+1064   	; 0x47a <__bad_interrupt>
      52:	00 00       	nop
      54:	12 c2       	rjmp	.+1060   	; 0x47a <__bad_interrupt>
      56:	00 00       	nop
      58:	10 c2       	rjmp	.+1056   	; 0x47a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0e c2       	rjmp	.+1052   	; 0x47a <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c c2       	rjmp	.+1048   	; 0x47a <__bad_interrupt>
      62:	00 00       	nop
      64:	0a c2       	rjmp	.+1044   	; 0x47a <__bad_interrupt>
      66:	00 00       	nop
      68:	08 c2       	rjmp	.+1040   	; 0x47a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	06 c2       	rjmp	.+1036   	; 0x47a <__bad_interrupt>
      6e:	00 00       	nop
      70:	04 c2       	rjmp	.+1032   	; 0x47a <__bad_interrupt>
      72:	00 00       	nop
      74:	02 c2       	rjmp	.+1028   	; 0x47a <__bad_interrupt>
      76:	00 00       	nop
      78:	00 c2       	rjmp	.+1024   	; 0x47a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fe c1       	rjmp	.+1020   	; 0x47a <__bad_interrupt>
      7e:	00 00       	nop
      80:	fc c1       	rjmp	.+1016   	; 0x47a <__bad_interrupt>
      82:	00 00       	nop
      84:	fa c1       	rjmp	.+1012   	; 0x47a <__bad_interrupt>
      86:	00 00       	nop
      88:	f8 c1       	rjmp	.+1008   	; 0x47a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f6 c1       	rjmp	.+1004   	; 0x47a <__bad_interrupt>
      8e:	00 00       	nop
      90:	f4 c1       	rjmp	.+1000   	; 0x47a <__bad_interrupt>
      92:	00 00       	nop
      94:	f2 c1       	rjmp	.+996    	; 0x47a <__bad_interrupt>
      96:	00 00       	nop
      98:	f0 c1       	rjmp	.+992    	; 0x47a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ee c1       	rjmp	.+988    	; 0x47a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ec c1       	rjmp	.+984    	; 0x47a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ea c1       	rjmp	.+980    	; 0x47a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e8 c1       	rjmp	.+976    	; 0x47a <__bad_interrupt>
      aa:	00 00       	nop

000000ac <__trampolines_end>:
      ac:	0d 0a       	sbc	r0, r29
      ae:	50 4e       	sbci	r21, 0xE0	; 224
      b0:	41 4d       	sbci	r20, 0xD1	; 209
      b2:	45 53       	subi	r20, 0x35	; 53
      b4:	3a 20       	and	r3, r10
      b6:	00 0d       	add	r16, r0

000000b7 <__c.4464>:
      b7:	0d 0a 4b 37 4e 56 48 20 50 6f 45 20 50 44 55 00     ..K7NVH PoE PDU.

000000c7 <__c.4453>:
      c7:	0d 0a 41 55 58 20 00                                ..AUX .

000000ce <__c.4448>:
      ce:	50 6f 77 65 72 3a 20 00                             Power: .

000000d6 <__c.4446>:
      d6:	20 43 75 72 72 65 6e 74 3a 20 00                     Current: .

000000e1 <__c.4442>:
      e1:	09 54 65 6d 70 65 72 61 74 75 72 65 3a 20 00        .Temperature: .

000000f0 <__c.4440>:
      f0:	0d 0a 56 6f 6c 74 61 67 65 3a 20 00                 ..Voltage: .

000000fc <__c.4401>:
      fc:	4f 46 46 00                                         OFF.

00000100 <__c.4399>:
     100:	4f 4e 00                                            ON.

00000103 <__c.4390>:
     103:	4f 46 46 00                                         OFF.

00000107 <__c.4388>:
     107:	4f 4e 00                                            ON.

0000010a <__c.4380>:
     10a:	4f 46 46 00                                         OFF.

0000010e <__c.4378>:
     10e:	4f 4e 00                                            ON.

00000111 <__c.4344>:
     111:	0d 0a 4b 37 4e 56 48 20 50 6f 45 20 50 44 55 00     ..K7NVH PoE PDU.

00000121 <STR_Command_SETVCTL>:
     121:	53 45 54 56 43 54 4c 00                             SETVCTL.

00000129 <STR_Command_VCTL>:
     129:	56 43 54 4c 00                                      VCTL.

0000012e <STR_Command_SETLIMIT>:
     12e:	53 45 54 4c 49 4d 49 54 00                          SETLIMIT.

00000137 <STR_Command_SETNAME>:
     137:	53 45 54 4e 41 4d 45 00                             SETNAME.

0000013f <STR_Command_SETICAL>:
     13f:	53 45 54 49 43 41 4c 00                             SETICAL.

00000147 <STR_Command_SETVCAL>:
     147:	53 45 54 56 43 41 4c 00                             SETVCAL.

0000014f <STR_Command_SETVREF>:
     14f:	53 45 54 56 52 45 46 00                             SETVREF.

00000157 <STR_Command_SETDEF>:
     157:	53 45 54 44 45 46 00                                SETDEF.

0000015e <STR_Command_SETCYCLE>:
     15e:	53 45 54 43 59 43 4c 45 00                          SETCYCLE.

00000167 <STR_Command_PCYCLE>:
     167:	50 43 59 43 4c 45 00                                PCYCLE.

0000016e <STR_Command_POFF>:
     16e:	50 4f 46 46 00                                      POFF.

00000173 <STR_Command_PON>:
     173:	50 4f 4e 00                                         PON.

00000177 <STR_Command_DEBUG>:
     177:	44 45 42 55 47 00                                   DEBUG.

0000017d <STR_Command_PSTATUS>:
     17d:	50 53 54 41 54 55 53 00                             PSTATUS.

00000185 <STR_Command_STATUS>:
     185:	53 54 41 54 55 53 00                                STATUS.

0000018c <STR_Command_HELP>:
     18c:	48 45 4c 50 00                                      HELP.

00000191 <STR_ICAL>:
     191:	0d 0a 49 43 41 4c 3a 20 00                          ..ICAL: .

0000019a <STR_VCAL>:
     19a:	0d 0a 56 43 41 4c 3a 20 00                          ..VCAL: .

000001a3 <STR_VREF>:
     1a3:	0d 0a 56 52 45 46 3a 20 00                          ..VREF: .

000001ac <STR_Port_VCTL>:
     1ac:	0d 0a 50 4f 52 54 20 56 43 54 4c 3a 20 00           ..PORT VCTL: .

000001ba <STR_Port_CutOn>:
     1ba:	0d 0a 50 4f 52 54 20 43 55 54 4f 4e 3a 20 00        ..PORT CUTON: .

000001c9 <STR_Port_CutOff>:
     1c9:	0d 0a 50 4f 52 54 20 43 55 54 4f 46 46 3a 20 00     ..PORT CUTOFF: .

000001d9 <STR_Port_Limit>:
     1d9:	0d 0a 50 4f 52 54 20 4c 49 4d 49 54 3a 20 00        ..PORT LIMIT: .

000001e8 <STR_PCYCLE_Time>:
     1e8:	0d 0a 50 43 59 43 4c 45 20 54 49 4d 45 3a 20 00     ..PCYCLE TIME: .

000001f8 <STR_Port_Default>:
     1f8:	0d 0a 50 4f 52 54 20 44 45 46 41 55 4c 54 20 00     ..PORT DEFAULT .

00000208 <STR_NR_Port>:
     208:	0d 0a 50 4f 52 54 20 00                             ..PORT .

00000210 <STR_Backspace>:
     210:	1b 5b 44 20 1b 5b 44 00                             .[D .[D.

00000218 <STR_VCTL>:
     218:	20 1b 5b 33 36 6d 56 4f 4c 54 41 47 45 20 43 54      .[36mVOLTAGE CT
     228:	4c 1b 5b 30 6d 00                                   L.[0m.

0000022e <STR_Overload>:
     22e:	20 1b 5b 33 31 6d 21 4f 56 45 52 4c 4f 41 44 21      .[31m!OVERLOAD!
     23e:	1b 5b 30 6d 00                                      .[0m.

00000243 <STR_Disabled>:
     243:	1b 5b 33 31 6d 44 49 53 41 42 4c 45 44 1b 5b 30     .[31mDISABLED.[0
     253:	6d 00                                               m.

00000255 <STR_Enabled>:
     255:	1b 5b 33 32 6d 45 4e 41 42 4c 45 44 1b 5b 30 6d     .[32mENABLED.[0m
     265:	00                                                  .

00000266 <STR_Unrecognized>:
     266:	0d 0a 1b 5b 33 31 6d 49 4e 56 41 4c 49 44 20 43     ...[31mINVALID C
     276:	4f 4d 4d 41 4e 44 1b 5b 30 6d 00                    OMMAND.[0m.

00000281 <STR_Help_Info>:
     281:	0d 0a 56 69 73 69 74 20 68 74 74 70 73 3a 2f 2f     ..Visit https://
     291:	67 69 74 68 75 62 2e 63 6f 6d 2f 6e 69 67 65 6c     github.com/nigel
     2a1:	76 68 2f 4b 37 4e 56 48 2d 50 6f 45 2d 50 44 55     vh/K7NVH-PoE-PDU
     2b1:	20 66 6f 72 20 66 75 6c 6c 20 64 6f 63 73 2e 00      for full docs..

000002c1 <ProductString>:
     2c1:	1a 03 50 00 6f 00 45 00 20 00 50 00 44 00 55 00     ..P.o.E. .P.D.U.
     2d1:	20 00 56 00 31 00 2e 00 30 00 00 00                  .V.1...0...

000002dd <ManufacturerString>:
     2dd:	0c 03 4b 00 37 00 4e 00 56 00 48 00 00 00           ..K.7.N.V.H...

000002eb <LanguageString>:
     2eb:	04 03 09 04                                         ....

000002ef <ConfigurationDescriptor>:
     2ef:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     2ff:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     30f:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     31f:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

0000032d <DeviceDescriptor>:
     32d:	12 01 10 01 02 00 00 08 eb 03 44 20 02 00 01 02     ..........D ....
     33d:	dc 01                                               ..

0000033f <__c.2130>:
     33f:	6e 61 6e 00                                         nan.

00000343 <__c.2128>:
     343:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     353:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     363:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     373:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     383:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     393:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     3a3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     3b3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     3c3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     3d3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     3e3:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     3f3:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     403:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     413:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     423:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     433:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000442 <__ctors_end>:
     442:	11 24       	eor	r1, r1
     444:	1f be       	out	0x3f, r1	; 63
     446:	cf ef       	ldi	r28, 0xFF	; 255
     448:	da e0       	ldi	r29, 0x0A	; 10
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	cd bf       	out	0x3d, r28	; 61

0000044e <__do_copy_data>:
     44e:	12 e0       	ldi	r17, 0x02	; 2
     450:	a0 e0       	ldi	r26, 0x00	; 0
     452:	b1 e0       	ldi	r27, 0x01	; 1
     454:	ea ef       	ldi	r30, 0xFA	; 250
     456:	f5 e3       	ldi	r31, 0x35	; 53
     458:	02 c0       	rjmp	.+4      	; 0x45e <__do_copy_data+0x10>
     45a:	05 90       	lpm	r0, Z+
     45c:	0d 92       	st	X+, r0
     45e:	aa 33       	cpi	r26, 0x3A	; 58
     460:	b1 07       	cpc	r27, r17
     462:	d9 f7       	brne	.-10     	; 0x45a <__do_copy_data+0xc>

00000464 <__do_clear_bss>:
     464:	22 e0       	ldi	r18, 0x02	; 2
     466:	aa e3       	ldi	r26, 0x3A	; 58
     468:	b2 e0       	ldi	r27, 0x02	; 2
     46a:	01 c0       	rjmp	.+2      	; 0x46e <.do_clear_bss_start>

0000046c <.do_clear_bss_loop>:
     46c:	1d 92       	st	X+, r1

0000046e <.do_clear_bss_start>:
     46e:	a4 39       	cpi	r26, 0x94	; 148
     470:	b2 07       	cpc	r27, r18
     472:	e1 f7       	brne	.-8      	; 0x46c <.do_clear_bss_loop>
     474:	a0 d2       	rcall	.+1344   	; 0x9b6 <main>
     476:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <_exit>

0000047a <__bad_interrupt>:
     47a:	c2 cd       	rjmp	.-1148   	; 0x0 <__vectors>

0000047c <INPUT_Parse_args>:
#endif
}

// Parse command arguments and return pd_set bitmap with relevant port
// bits set.
static inline void INPUT_Parse_args(pd_set *pd, char *str) {
     47c:	fc 01       	movw	r30, r24
	*pd = 0;
     47e:	11 82       	std	Z+1, r1	; 0x01
     480:	10 82       	st	Z, r1

	while (*str != 0 && str < (DATA_IN + DATA_BUFF_LEN)) {
		if (*str >= '1' && *str <= '12') {
			*pd = *pd | (1 << (*str - '1'));
     482:	21 e0       	ldi	r18, 0x01	; 1
     484:	30 e0       	ldi	r19, 0x00	; 0
// Parse command arguments and return pd_set bitmap with relevant port
// bits set.
static inline void INPUT_Parse_args(pd_set *pd, char *str) {
	*pd = 0;

	while (*str != 0 && str < (DATA_IN + DATA_BUFF_LEN)) {
     486:	db 01       	movw	r26, r22
     488:	4c 91       	ld	r20, X
     48a:	44 23       	and	r20, r20
     48c:	b9 f0       	breq	.+46     	; 0x4bc <INPUT_Parse_args+0x40>
     48e:	b2 e0       	ldi	r27, 0x02	; 2
     490:	67 38       	cpi	r22, 0x87	; 135
     492:	7b 07       	cpc	r23, r27
     494:	98 f4       	brcc	.+38     	; 0x4bc <INPUT_Parse_args+0x40>
		if (*str >= '1' && *str <= '12') {
     496:	41 33       	cpi	r20, 0x31	; 49
     498:	70 f0       	brcs	.+28     	; 0x4b6 <INPUT_Parse_args+0x3a>
			*pd = *pd | (1 << (*str - '1'));
     49a:	41 53       	subi	r20, 0x31	; 49
     49c:	c9 01       	movw	r24, r18
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <INPUT_Parse_args+0x28>
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	4a 95       	dec	r20
     4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <INPUT_Parse_args+0x24>
     4a8:	ac 01       	movw	r20, r24
     4aa:	80 81       	ld	r24, Z
     4ac:	91 81       	ldd	r25, Z+1	; 0x01
     4ae:	84 2b       	or	r24, r20
     4b0:	95 2b       	or	r25, r21
     4b2:	91 83       	std	Z+1, r25	; 0x01
     4b4:	80 83       	st	Z, r24
		} else if (*str == 'A' || *str == 'a') {
			*pd = 0b1111111111111111;
		}
		str++;
     4b6:	6f 5f       	subi	r22, 0xFF	; 255
     4b8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ba:	e5 cf       	rjmp	.-54     	; 0x486 <INPUT_Parse_args+0xa>
     4bc:	08 95       	ret

000004be <printPGMStr>:
static inline void PRINT_Help(void) {
	printPGMStr(STR_Help_Info);
}

// Print a PGM stored string
static inline void printPGMStr(PGM_P s) {
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
	char c;
	while((c = pgm_read_byte(s++)) != 0) fputc(c, &USBSerialStream);
     4c2:	fc 01       	movw	r30, r24
     4c4:	24 91       	lpm	r18, Z
     4c6:	ec 01       	movw	r28, r24
     4c8:	21 96       	adiw	r28, 0x01	; 1
     4ca:	22 23       	and	r18, r18
     4cc:	41 f0       	breq	.+16     	; 0x4de <printPGMStr+0x20>
     4ce:	61 e4       	ldi	r22, 0x41	; 65
     4d0:	72 e0       	ldi	r23, 0x02	; 2
     4d2:	82 2f       	mov	r24, r18
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 03 1a 	call	0x3406	; 0x3406 <fputc>
     4da:	ce 01       	movw	r24, r28
     4dc:	f2 cf       	rjmp	.-28     	; 0x4c2 <printPGMStr+0x4>
}
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	08 95       	ret

000004e4 <PORT_Set_Ctl>:
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~ Port/LED Control Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Set all ports in a port descriptor set to a state
static inline void PORT_Set_Ctl(pd_set *pd, uint8_t state) {
     4e4:	3f 92       	push	r3
     4e6:	4f 92       	push	r4
     4e8:	5f 92       	push	r5
     4ea:	6f 92       	push	r6
     4ec:	7f 92       	push	r7
     4ee:	8f 92       	push	r8
     4f0:	9f 92       	push	r9
     4f2:	af 92       	push	r10
     4f4:	bf 92       	push	r11
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	4c 01       	movw	r8, r24
     508:	36 2e       	mov	r3, r22
     50a:	0b e5       	ldi	r16, 0x5B	; 91
     50c:	12 e0       	ldi	r17, 0x02	; 2
     50e:	c5 e3       	ldi	r28, 0x35	; 53
     510:	d1 e0       	ldi	r29, 0x01	; 1
     512:	41 2c       	mov	r4, r1
     514:	51 2c       	mov	r5, r1
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		if (*pd & (1 << i)) {
     516:	66 24       	eor	r6, r6
     518:	63 94       	inc	r6
     51a:	71 2c       	mov	r7, r1
}

// Turn a port ON (state == 1) or OFF (state == 0)
static inline void PORT_CTL(uint8_t port, uint8_t state) {
	printPGMStr(STR_NR_Port);
	fprintf(&USBSerialStream, "%i ", port+1);
     51c:	9d e1       	ldi	r25, 0x1D	; 29
     51e:	c9 2e       	mov	r12, r25
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	d9 2e       	mov	r13, r25
     524:	21 e4       	ldi	r18, 0x41	; 65
     526:	a2 2e       	mov	r10, r18
     528:	22 e0       	ldi	r18, 0x02	; 2
     52a:	b2 2e       	mov	r11, r18
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Set all ports in a port descriptor set to a state
static inline void PORT_Set_Ctl(pd_set *pd, uint8_t state) {
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		if (*pd & (1 << i)) {
     52c:	c3 01       	movw	r24, r6
     52e:	04 2c       	mov	r0, r4
     530:	02 c0       	rjmp	.+4      	; 0x536 <PORT_Set_Ctl+0x52>
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	0a 94       	dec	r0
     538:	e2 f7       	brpl	.-8      	; 0x532 <PORT_Set_Ctl+0x4e>
     53a:	f4 01       	movw	r30, r8
     53c:	20 81       	ld	r18, Z
     53e:	31 81       	ldd	r19, Z+1	; 0x01
     540:	82 23       	and	r24, r18
     542:	93 23       	and	r25, r19
     544:	92 01       	movw	r18, r4
     546:	2f 5f       	subi	r18, 0xFF	; 255
     548:	3f 4f       	sbci	r19, 0xFF	; 255
     54a:	79 01       	movw	r14, r18
     54c:	89 2b       	or	r24, r25
     54e:	09 f4       	brne	.+2      	; 0x552 <PORT_Set_Ctl+0x6e>
     550:	72 c0       	rjmp	.+228    	; 0x636 <PORT_Set_Ctl+0x152>
	}
}

// Turn a port ON (state == 1) or OFF (state == 0)
static inline void PORT_CTL(uint8_t port, uint8_t state) {
	printPGMStr(STR_NR_Port);
     552:	88 e0       	ldi	r24, 0x08	; 8
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	b3 df       	rcall	.-154    	; 0x4be <printPGMStr>
	fprintf(&USBSerialStream, "%i ", port+1);
     558:	ff 92       	push	r15
     55a:	ef 92       	push	r14
     55c:	df 92       	push	r13
     55e:	cf 92       	push	r12
     560:	bf 92       	push	r11
     562:	af 92       	push	r10
     564:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>

	if (state == 1) {
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	31 e0       	ldi	r19, 0x01	; 1
     576:	84 2d       	mov	r24, r4
     578:	33 12       	cpse	r3, r19
     57a:	2b c0       	rjmp	.+86     	; 0x5d2 <PORT_Set_Ctl+0xee>
		if (port <= 7) {
     57c:	88 30       	cpi	r24, 0x08	; 8
     57e:	58 f4       	brcc	.+22     	; 0x596 <PORT_Set_Ctl+0xb2>
			PORTD |= (1 << Ports_Pins[port]);
     580:	2b b1       	in	r18, 0x0b	; 11
     582:	c3 01       	movw	r24, r6
     584:	08 80       	ld	r0, Y
     586:	02 c0       	rjmp	.+4      	; 0x58c <PORT_Set_Ctl+0xa8>
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	0a 94       	dec	r0
     58e:	e2 f7       	brpl	.-8      	; 0x588 <PORT_Set_Ctl+0xa4>
     590:	28 2b       	or	r18, r24
     592:	2b b9       	out	0x0b, r18	; 11
     594:	17 c0       	rjmp	.+46     	; 0x5c4 <PORT_Set_Ctl+0xe0>
		} else if (port <= 10) {
     596:	8b 30       	cpi	r24, 0x0B	; 11
     598:	59 f0       	breq	.+22     	; 0x5b0 <PORT_Set_Ctl+0xcc>
			PORTB |= (1 << Ports_Pins[port]);
     59a:	25 b1       	in	r18, 0x05	; 5
     59c:	c3 01       	movw	r24, r6
     59e:	08 80       	ld	r0, Y
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <PORT_Set_Ctl+0xc2>
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	0a 94       	dec	r0
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <PORT_Set_Ctl+0xbe>
     5aa:	28 2b       	or	r18, r24
     5ac:	25 b9       	out	0x05, r18	; 5
     5ae:	0a c0       	rjmp	.+20     	; 0x5c4 <PORT_Set_Ctl+0xe0>
		} else if (port <= 11) {
			PORTC |= (1 << Ports_Pins[port]);
     5b0:	28 b1       	in	r18, 0x08	; 8
     5b2:	c3 01       	movw	r24, r6
     5b4:	08 80       	ld	r0, Y
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <PORT_Set_Ctl+0xd8>
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	0a 94       	dec	r0
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <PORT_Set_Ctl+0xd4>
     5c0:	28 2b       	or	r18, r24
     5c2:	28 b9       	out	0x08, r18	; 8
		}
		printPGMStr(STR_Enabled);
     5c4:	85 e5       	ldi	r24, 0x55	; 85
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	7a df       	rcall	.-268    	; 0x4be <printPGMStr>
		PORT_STATE[port] |= 0b00000001;
     5ca:	f8 01       	movw	r30, r16
     5cc:	80 81       	ld	r24, Z
     5ce:	81 60       	ori	r24, 0x01	; 1
     5d0:	2d c0       	rjmp	.+90     	; 0x62c <PORT_Set_Ctl+0x148>
	} else {
		if (port <= 7) {
     5d2:	88 30       	cpi	r24, 0x08	; 8
     5d4:	60 f4       	brcc	.+24     	; 0x5ee <PORT_Set_Ctl+0x10a>
			PORTD &= ~(1 << Ports_Pins[port]);
     5d6:	2b b1       	in	r18, 0x0b	; 11
     5d8:	c3 01       	movw	r24, r6
     5da:	08 80       	ld	r0, Y
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <PORT_Set_Ctl+0xfe>
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	0a 94       	dec	r0
     5e4:	e2 f7       	brpl	.-8      	; 0x5de <PORT_Set_Ctl+0xfa>
     5e6:	80 95       	com	r24
     5e8:	82 23       	and	r24, r18
     5ea:	8b b9       	out	0x0b, r24	; 11
     5ec:	19 c0       	rjmp	.+50     	; 0x620 <PORT_Set_Ctl+0x13c>
		} else if (port <= 10) {
     5ee:	8b 30       	cpi	r24, 0x0B	; 11
     5f0:	61 f0       	breq	.+24     	; 0x60a <PORT_Set_Ctl+0x126>
			PORTB &= ~(1 << Ports_Pins[port]);
     5f2:	25 b1       	in	r18, 0x05	; 5
     5f4:	c3 01       	movw	r24, r6
     5f6:	08 80       	ld	r0, Y
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <PORT_Set_Ctl+0x11a>
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	0a 94       	dec	r0
     600:	e2 f7       	brpl	.-8      	; 0x5fa <PORT_Set_Ctl+0x116>
     602:	80 95       	com	r24
     604:	82 23       	and	r24, r18
     606:	85 b9       	out	0x05, r24	; 5
     608:	0b c0       	rjmp	.+22     	; 0x620 <PORT_Set_Ctl+0x13c>
		} else if (port <= 11) {
			PORTC &= ~(1 << Ports_Pins[port]);
     60a:	28 b1       	in	r18, 0x08	; 8
     60c:	c3 01       	movw	r24, r6
     60e:	08 80       	ld	r0, Y
     610:	02 c0       	rjmp	.+4      	; 0x616 <PORT_Set_Ctl+0x132>
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	0a 94       	dec	r0
     618:	e2 f7       	brpl	.-8      	; 0x612 <PORT_Set_Ctl+0x12e>
     61a:	80 95       	com	r24
     61c:	82 23       	and	r24, r18
     61e:	88 b9       	out	0x08, r24	; 8
		}
		printPGMStr(STR_Disabled);
     620:	83 e4       	ldi	r24, 0x43	; 67
     622:	92 e0       	ldi	r25, 0x02	; 2
     624:	4c df       	rcall	.-360    	; 0x4be <printPGMStr>
		PORT_STATE[port] &= 0b11111110;
     626:	f8 01       	movw	r30, r16
     628:	80 81       	ld	r24, Z
     62a:	8e 7f       	andi	r24, 0xFE	; 254
     62c:	80 83       	st	Z, r24
		if (*pd & (1 << i)) {
			PORT_CTL(i, state);
			
			// If a port is controlled manually, make sure that voltage control gets disabled
			// Does not disable voltage control settings stored in EEPROM
			PORT_STATE[i] &= 0b11111011;
     62e:	f8 01       	movw	r30, r16
     630:	80 81       	ld	r24, Z
     632:	89 7f       	andi	r24, 0xF9	; 249
     634:	80 83       	st	Z, r24
     636:	27 01       	movw	r4, r14
     638:	0f 5f       	subi	r16, 0xFF	; 255
     63a:	1f 4f       	sbci	r17, 0xFF	; 255
     63c:	21 96       	adiw	r28, 0x01	; 1
// ~~ Port/LED Control Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Set all ports in a port descriptor set to a state
static inline void PORT_Set_Ctl(pd_set *pd, uint8_t state) {
	for (uint8_t i = 0; i < PORT_CNT; i++) {
     63e:	fc e0       	ldi	r31, 0x0C	; 12
     640:	ef 16       	cp	r14, r31
     642:	f1 04       	cpc	r15, r1
     644:	09 f0       	breq	.+2      	; 0x648 <PORT_Set_Ctl+0x164>
     646:	72 cf       	rjmp	.-284    	; 0x52c <PORT_Set_Ctl+0x48>
			// If a port is controlled manually, make sure that voltage control gets disabled
			// Does not disable voltage control settings stored in EEPROM
			PORT_STATE[i] &= 0b11111011;
		}
	}
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	df 90       	pop	r13
     656:	cf 90       	pop	r12
     658:	bf 90       	pop	r11
     65a:	af 90       	pop	r10
     65c:	9f 90       	pop	r9
     65e:	8f 90       	pop	r8
     660:	7f 90       	pop	r7
     662:	6f 90       	pop	r6
     664:	5f 90       	pop	r5
     666:	4f 90       	pop	r4
     668:	3f 90       	pop	r3
     66a:	08 95       	ret

0000066c <EEPROM_Read_V_CAL>:
	eeprom_update_float((float*)(EEPROM_OFFSET_REF_V), reference);
}

// Read the stored reference voltage from EEPROM
static inline float EEPROM_Read_V_CAL(void) {
	uint8_t V_CAL = eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_V_CAL));
     66c:	80 e1       	ldi	r24, 0x10	; 16
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__eerd_byte_m32u4>
     674:	68 2f       	mov	r22, r24
	// If the value seems out of range (uninitialized), default it to 11
	if (V_CAL < VCAL_MIN || V_CAL > VCAL_MAX) V_CAL = 110;
     676:	8a eb       	ldi	r24, 0xBA	; 186
     678:	86 0f       	add	r24, r22
     67a:	81 35       	cpi	r24, 0x51	; 81
     67c:	08 f0       	brcs	.+2      	; 0x680 <EEPROM_Read_V_CAL+0x14>
     67e:	6e e6       	ldi	r22, 0x6E	; 110
	return (float)(V_CAL / 10.0);
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__floatsisf>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e2       	ldi	r20, 0x20	; 32
     690:	51 e4       	ldi	r21, 0x41	; 65
     692:	0c 94 37 13 	jmp	0x266e	; 0x266e <__divsf3>

00000696 <EEPROM_Read_Port_Name>:
static inline void EEPROM_Write_PCycle_Time(uint8_t time) {
	eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_CYCLE_TIME), time);
}

// Read the stored port name
static inline void EEPROM_Read_Port_Name(int8_t port, char *str) {
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	1f 92       	push	r1
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
	char working = 0;
	uint8_t count = 0;
	
	while (1) {
		// Read a byte from the EEPROM
		working = eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_P0NAME+(port*16)+count));
     6a8:	08 2f       	mov	r16, r24
     6aa:	11 27       	eor	r17, r17
     6ac:	07 fd       	sbrc	r16, 7
     6ae:	10 95       	com	r17
     6b0:	0c 5f       	subi	r16, 0xFC	; 252
     6b2:	1f 4f       	sbci	r17, 0xFF	; 255
     6b4:	34 e0       	ldi	r19, 0x04	; 4
     6b6:	00 0f       	add	r16, r16
     6b8:	11 1f       	adc	r17, r17
     6ba:	3a 95       	dec	r19
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <EEPROM_Read_Port_Name+0x20>
     6be:	7b 01       	movw	r14, r22
     6c0:	8e 2d       	mov	r24, r14
     6c2:	86 1b       	sub	r24, r22
     6c4:	98 01       	movw	r18, r16
     6c6:	28 0f       	add	r18, r24
     6c8:	31 1d       	adc	r19, r1
     6ca:	c9 01       	movw	r24, r18
     6cc:	69 83       	std	Y+1, r22	; 0x01
     6ce:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__eerd_byte_m32u4>
		
		// If we've reached the end of the string, terminate the string, and break.
		if (working  == 255 || working == 0) {
     6d2:	9f ef       	ldi	r25, 0xFF	; 255
     6d4:	98 0f       	add	r25, r24
     6d6:	69 81       	ldd	r22, Y+1	; 0x01
			*str = 0;
     6d8:	f7 01       	movw	r30, r14
	while (1) {
		// Read a byte from the EEPROM
		working = eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_P0NAME+(port*16)+count));
		
		// If we've reached the end of the string, terminate the string, and break.
		if (working  == 255 || working == 0) {
     6da:	9e 3f       	cpi	r25, 0xFE	; 254
     6dc:	48 f0       	brcs	.+18     	; 0x6f0 <EEPROM_Read_Port_Name+0x5a>
			*str = 0;
     6de:	10 82       	st	Z, r1
		// Take the byte we've read, and attach it to the string
		*str = working;
		str++;
		count++;
	}
}
     6e0:	0f 90       	pop	r0
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	08 95       	ret
			*str = 0;
			break;
		}
		
		// Take the byte we've read, and attach it to the string
		*str = working;
     6f0:	81 93       	st	Z+, r24
     6f2:	7f 01       	movw	r14, r30
		str++;
		count++;
	}
     6f4:	e5 cf       	rjmp	.-54     	; 0x6c0 <EEPROM_Read_Port_Name+0x2a>

000006f6 <EEPROM_Read_REF_V>:
static inline void EEPROM_Write_Port_Boot_State(uint8_t port, uint8_t state) {
	eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_PORT_DEFAULTS + port), state);
}

// Read the stored reference voltage from EEPROM
static inline float EEPROM_Read_REF_V(void) {
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
	float REF_V = eeprom_read_float((float*)(EEPROM_OFFSET_REF_V));
     6fe:	8c e0       	ldi	r24, 0x0C	; 12
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__eerd_dword_m32u4>
     706:	6b 01       	movw	r12, r22
     708:	7c 01       	movw	r14, r24
	// If the value seems out of range (uninitialized), default it to 4.5
	if (REF_V < 4.1 || REF_V > 4.3 || isnan(REF_V)) REF_V = 4.2;
     70a:	23 e3       	ldi	r18, 0x33	; 51
     70c:	33 e3       	ldi	r19, 0x33	; 51
     70e:	43 e8       	ldi	r20, 0x83	; 131
     710:	50 e4       	ldi	r21, 0x40	; 64
     712:	0e 94 33 13 	call	0x2666	; 0x2666 <__cmpsf2>
     716:	87 fd       	sbrc	r24, 7
     718:	12 c0       	rjmp	.+36     	; 0x73e <EEPROM_Read_REF_V+0x48>
     71a:	2a e9       	ldi	r18, 0x9A	; 154
     71c:	39 e9       	ldi	r19, 0x99	; 153
     71e:	49 e8       	ldi	r20, 0x89	; 137
     720:	50 e4       	ldi	r21, 0x40	; 64
     722:	c7 01       	movw	r24, r14
     724:	b6 01       	movw	r22, r12
     726:	0e 94 82 14 	call	0x2904	; 0x2904 <__gesf2>
     72a:	18 16       	cp	r1, r24
     72c:	44 f0       	brlt	.+16     	; 0x73e <EEPROM_Read_REF_V+0x48>
     72e:	a7 01       	movw	r20, r14
     730:	96 01       	movw	r18, r12
     732:	c7 01       	movw	r24, r14
     734:	b6 01       	movw	r22, r12
     736:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__unordsf2>
     73a:	88 23       	and	r24, r24
     73c:	39 f0       	breq	.+14     	; 0x74c <EEPROM_Read_REF_V+0x56>
     73e:	46 e6       	ldi	r20, 0x66	; 102
     740:	c4 2e       	mov	r12, r20
     742:	dc 2c       	mov	r13, r12
     744:	46 e8       	ldi	r20, 0x86	; 134
     746:	e4 2e       	mov	r14, r20
     748:	40 e4       	ldi	r20, 0x40	; 64
     74a:	f4 2e       	mov	r15, r20
	return REF_V;
}
     74c:	c7 01       	movw	r24, r14
     74e:	b6 01       	movw	r22, r12
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	df 90       	pop	r13
     756:	cf 90       	pop	r12
     758:	08 95       	ret

0000075a <EEPROM_Write_Port_Name>:
		str++;
		count++;
	}
}
// Write the port name to EEPROM
static inline void EEPROM_Write_Port_Name(int8_t port, char *str) {
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
	// While we haven't reached the end of the string, or reached the end of the buffer
	// Write the name bytes to EEPROM
	for (uint8_t i = 0; i < 15; i++) {
		//if (*str == 0) { break; }
		eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_P0NAME+(port*16)+i), *str);
     76a:	c8 2f       	mov	r28, r24
     76c:	dd 27       	eor	r29, r29
     76e:	c7 fd       	sbrc	r28, 7
     770:	d0 95       	com	r29
     772:	24 96       	adiw	r28, 0x04	; 4
     774:	54 e0       	ldi	r21, 0x04	; 4
     776:	cc 0f       	add	r28, r28
     778:	dd 1f       	adc	r29, r29
     77a:	5a 95       	dec	r21
     77c:	e1 f7       	brne	.-8      	; 0x776 <EEPROM_Write_Port_Name+0x1c>
     77e:	7b 01       	movw	r14, r22
     780:	8f e0       	ldi	r24, 0x0F	; 15
     782:	e8 0e       	add	r14, r24
     784:	f1 1c       	adc	r15, r1
     786:	8b 01       	movw	r16, r22
     788:	6e 01       	movw	r12, r28
     78a:	c6 1a       	sub	r12, r22
     78c:	d7 0a       	sbc	r13, r23
     78e:	c8 01       	movw	r24, r16
     790:	8c 0d       	add	r24, r12
     792:	9d 1d       	adc	r25, r13
     794:	f8 01       	movw	r30, r16
     796:	61 91       	ld	r22, Z+
     798:	8f 01       	movw	r16, r30
     79a:	0e 94 cd 1a 	call	0x359a	; 0x359a <__eeupd_byte_m32u4>
}
// Write the port name to EEPROM
static inline void EEPROM_Write_Port_Name(int8_t port, char *str) {
	// While we haven't reached the end of the string, or reached the end of the buffer
	// Write the name bytes to EEPROM
	for (uint8_t i = 0; i < 15; i++) {
     79e:	0e 15       	cp	r16, r14
     7a0:	1f 05       	cpc	r17, r15
     7a2:	a9 f7       	brne	.-22     	; 0x78e <EEPROM_Write_Port_Name+0x34>
		//if (*str == 0) { break; }
		eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_P0NAME+(port*16)+i), *str);
		str++;
	}
	eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_P0NAME+(port*16)+15), 0);
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	ce 01       	movw	r24, r28
     7a8:	0f 96       	adiw	r24, 0x0f	; 15
}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	cf 90       	pop	r12
	for (uint8_t i = 0; i < 15; i++) {
		//if (*str == 0) { break; }
		eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_P0NAME+(port*16)+i), *str);
		str++;
	}
	eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_P0NAME+(port*16)+15), 0);
     7ba:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__eeupd_byte_m32u4>

000007be <INPUT_Clear>:
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~ Command Parsing Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Flush out our data input buffer, reset our position variable, and print a new prompt.
static inline void INPUT_Clear(void) {
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	60 97       	sbiw	r28, 0x10	; 16
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61
	memset(&DATA_IN[0], 0, sizeof(DATA_IN));
     7d6:	80 e2       	ldi	r24, 0x20	; 32
     7d8:	e7 e6       	ldi	r30, 0x67	; 103
     7da:	f2 e0       	ldi	r31, 0x02	; 2
     7dc:	df 01       	movw	r26, r30
     7de:	1d 92       	st	X+, r1
     7e0:	8a 95       	dec	r24
     7e2:	e9 f7       	brne	.-6      	; 0x7de <INPUT_Clear+0x20>
	DATA_IN_POS = 0;
     7e4:	10 92 3a 02 	sts	0x023A, r1
	
	// Read PDU name
	char temp_name[16];
	EEPROM_Read_Port_Name(-1, temp_name);
     7e8:	8e 01       	movw	r16, r28
     7ea:	0f 5f       	subi	r16, 0xFF	; 255
     7ec:	1f 4f       	sbci	r17, 0xFF	; 255
     7ee:	b8 01       	movw	r22, r16
     7f0:	8f ef       	ldi	r24, 0xFF	; 255
     7f2:	51 df       	rcall	.-350    	; 0x696 <EEPROM_Read_Port_Name>
	
#ifdef ENABLECOLORS
	fprintf(&USBSerialStream, "\r\n\r\n#\x1b[32m%s \x1b[36m>\x1b[0m ", temp_name);
     7f4:	1f 93       	push	r17
     7f6:	0f 93       	push	r16
     7f8:	81 e4       	ldi	r24, 0x41	; 65
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	9f 93       	push	r25
     7fe:	8f 93       	push	r24
     800:	81 e4       	ldi	r24, 0x41	; 65
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
#else
	fprintf(&USBSerialStream, "\r\n\r\n#%s > ", temp_name);
#endif
}
     818:	60 96       	adiw	r28, 0x10	; 16
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	08 95       	ret

0000082e <run_lufa>:
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Run the LUFA USB tasks (except reading)
static inline void run_lufa(void) {
	//CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     82e:	82 e0       	ldi	r24, 0x02	; 2
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	0e 94 b6 11 	call	0x236c	; 0x236c <CDC_Device_USBTask>
	USB_USBTask();
     836:	0c 94 10 11 	jmp	0x2220	; 0x2220 <USB_USBTask>

0000083a <ADC_Read_Raw_Voltage.isra.2>:
static inline float ADC_Read_Temperature(void) {
	return ((ADC_Read_Raw_Voltage(7, 1) - 0.4) / 0.0195);
}

// Return the adc reading as a voltage referenced to REF_V
static inline float ADC_Read_Raw_Voltage(uint8_t port, uint8_t adc) {
     83a:	8f 92       	push	r8
     83c:	9f 92       	push	r9
     83e:	af 92       	push	r10
     840:	bf 92       	push	r11
     842:	cf 92       	push	r12
     844:	df 92       	push	r13
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
	return (ADC_Read_Raw(port, adc) * (EEPROM_Read_REF_V() / 1024));
     84a:	55 df       	rcall	.-342    	; 0x6f6 <EEPROM_Read_REF_V>
     84c:	4b 01       	movw	r8, r22
     84e:	5c 01       	movw	r10, r24
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	cb 01       	movw	r24, r22
     856:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__floatunsisf>
     85a:	6b 01       	movw	r12, r22
     85c:	7c 01       	movw	r14, r24
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	40 e8       	ldi	r20, 0x80	; 128
     864:	5a e3       	ldi	r21, 0x3A	; 58
     866:	c5 01       	movw	r24, r10
     868:	b4 01       	movw	r22, r8
     86a:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     86e:	9b 01       	movw	r18, r22
     870:	ac 01       	movw	r20, r24
     872:	c7 01       	movw	r24, r14
     874:	b6 01       	movw	r22, r12
     876:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
}
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	df 90       	pop	r13
     880:	cf 90       	pop	r12
     882:	bf 90       	pop	r11
     884:	af 90       	pop	r10
     886:	9f 90       	pop	r9
     888:	8f 90       	pop	r8
     88a:	08 95       	ret

0000088c <ADC_Read_Port_Current>:
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~ ADC Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Read current flow on a given port
static inline float ADC_Read_Port_Current(uint8_t port) {
     88c:	cf 92       	push	r12
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	cf 93       	push	r28
     896:	c8 2f       	mov	r28, r24
	float voltage = ADC_Read_Raw_Voltage(port, 0) / EEPROM_Read_I_CAL(port);
     898:	d0 df       	rcall	.-96     	; 0x83a <ADC_Read_Raw_Voltage.isra.2>
     89a:	6b 01       	movw	r12, r22
     89c:	7c 01       	movw	r14, r24
	eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_V_CAL), (int)(div * 10.0));
}

// Read the stored port current calibration
static inline float EEPROM_Read_I_CAL(uint8_t port) {
	uint8_t I_CAL = eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_I_CAL + port));
     89e:	8c 2f       	mov	r24, r28
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	80 96       	adiw	r24, 0x20	; 32
     8a4:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__eerd_byte_m32u4>
     8a8:	68 2f       	mov	r22, r24
	if(I_CAL < ICAL_MIN || I_CAL > ICAL_MAX) I_CAL = 110;
     8aa:	84 ec       	ldi	r24, 0xC4	; 196
     8ac:	86 0f       	add	r24, r22
     8ae:	85 36       	cpi	r24, 0x65	; 101
     8b0:	08 f0       	brcs	.+2      	; 0x8b4 <ADC_Read_Port_Current+0x28>
     8b2:	6e e6       	ldi	r22, 0x6E	; 110
	return (float)(I_CAL / 10.0);
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__floatsisf>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	40 e2       	ldi	r20, 0x20	; 32
     8c4:	51 e4       	ldi	r21, 0x41	; 65
     8c6:	0e 94 37 13 	call	0x266e	; 0x266e <__divsf3>
     8ca:	9b 01       	movw	r18, r22
     8cc:	ac 01       	movw	r20, r24
// ~~ ADC Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Read current flow on a given port
static inline float ADC_Read_Port_Current(uint8_t port) {
	float voltage = ADC_Read_Raw_Voltage(port, 0) / EEPROM_Read_I_CAL(port);
     8ce:	c7 01       	movw	r24, r14
     8d0:	b6 01       	movw	r22, r12
     8d2:	0e 94 37 13 	call	0x266e	; 0x266e <__divsf3>
     8d6:	6b 01       	movw	r12, r22
     8d8:	7c 01       	movw	r14, r24
	if (voltage < 0.001) voltage = 0.0; // Ignore the lowest voltages so we don't falsely say there's current where there isn't.
     8da:	2f e6       	ldi	r18, 0x6F	; 111
     8dc:	32 e1       	ldi	r19, 0x12	; 18
     8de:	43 e8       	ldi	r20, 0x83	; 131
     8e0:	5a e3       	ldi	r21, 0x3A	; 58
     8e2:	0e 94 33 13 	call	0x2666	; 0x2666 <__cmpsf2>
     8e6:	87 ff       	sbrs	r24, 7
     8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <ADC_Read_Port_Current+0x64>
     8ea:	c1 2c       	mov	r12, r1
     8ec:	d1 2c       	mov	r13, r1
     8ee:	76 01       	movw	r14, r12
	return (voltage / 0.05);
     8f0:	2d ec       	ldi	r18, 0xCD	; 205
     8f2:	3c ec       	ldi	r19, 0xCC	; 204
     8f4:	4c e4       	ldi	r20, 0x4C	; 76
     8f6:	5d e3       	ldi	r21, 0x3D	; 61
     8f8:	c7 01       	movw	r24, r14
     8fa:	b6 01       	movw	r22, r12
     8fc:	0e 94 37 13 	call	0x266e	; 0x266e <__divsf3>
}
     900:	cf 91       	pop	r28
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	08 95       	ret

0000090c <__vector_12>:
// Fix current/voltage limit checking


#include "K7NVH_PoE_PDU.h"

ISR(WDT_vect){
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	2f 93       	push	r18
     918:	3f 93       	push	r19
     91a:	4f 93       	push	r20
     91c:	5f 93       	push	r21
     91e:	6f 93       	push	r22
     920:	7f 93       	push	r23
     922:	8f 93       	push	r24
     924:	9f 93       	push	r25
     926:	af 93       	push	r26
     928:	bf 93       	push	r27
     92a:	ef 93       	push	r30
     92c:	ff 93       	push	r31
	timer++;
     92e:	80 91 3d 02 	lds	r24, 0x023D
     932:	90 91 3e 02 	lds	r25, 0x023E
     936:	a0 91 3f 02 	lds	r26, 0x023F
     93a:	b0 91 40 02 	lds	r27, 0x0240
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	a1 1d       	adc	r26, r1
     942:	b1 1d       	adc	r27, r1
     944:	80 93 3d 02 	sts	0x023D, r24
     948:	90 93 3e 02 	sts	0x023E, r25
     94c:	a0 93 3f 02 	sts	0x023F, r26
     950:	b0 93 40 02 	sts	0x0240, r27
	
	if ((timer) % VCTL_DELAY == 0){ check_voltage = 1; }
     954:	60 91 3d 02 	lds	r22, 0x023D
     958:	70 91 3e 02 	lds	r23, 0x023E
     95c:	80 91 3f 02 	lds	r24, 0x023F
     960:	90 91 40 02 	lds	r25, 0x0240
     964:	24 e1       	ldi	r18, 0x14	; 20
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	0e 94 70 18 	call	0x30e0	; 0x30e0 <__udivmodsi4>
     970:	67 2b       	or	r22, r23
     972:	68 2b       	or	r22, r24
     974:	69 2b       	or	r22, r25
     976:	19 f4       	brne	.+6      	; 0x97e <__vector_12+0x72>
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 3c 02 	sts	0x023C, r24
	if ((timer) % ICTL_DELAY == 0){ check_current = 1; }
     97e:	80 91 3d 02 	lds	r24, 0x023D
     982:	90 91 3e 02 	lds	r25, 0x023E
     986:	a0 91 3f 02 	lds	r26, 0x023F
     98a:	b0 91 40 02 	lds	r27, 0x0240
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	80 93 3b 02 	sts	0x023B, r24
}
     994:	ff 91       	pop	r31
     996:	ef 91       	pop	r30
     998:	bf 91       	pop	r27
     99a:	af 91       	pop	r26
     99c:	9f 91       	pop	r25
     99e:	8f 91       	pop	r24
     9a0:	7f 91       	pop	r23
     9a2:	6f 91       	pop	r22
     9a4:	5f 91       	pop	r21
     9a6:	4f 91       	pop	r20
     9a8:	3f 91       	pop	r19
     9aa:	2f 91       	pop	r18
     9ac:	0f 90       	pop	r0
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	0f 90       	pop	r0
     9b2:	1f 90       	pop	r1
     9b4:	18 95       	reti

000009b6 <main>:

// Main program entry point.
int main(void) {
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	64 97       	sbiw	r28, 0x14	; 20
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	cd bf       	out	0x3d, r28	; 61
	// Initialize some variables
	int16_t BYTE_IN = -1;
	
	// Set the watchdog timer to interrupt for timekeeping
	MCUSR &= ~(1 << WDRF);
     9ca:	84 b7       	in	r24, 0x34	; 52
     9cc:	87 7f       	andi	r24, 0xF7	; 247
     9ce:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= 0b00011000; // Set WDCE and WDE to enable WDT changes
     9d0:	80 91 60 00 	lds	r24, 0x0060
     9d4:	88 61       	ori	r24, 0x18	; 24
     9d6:	80 93 60 00 	sts	0x0060, r24
	WDTCSR = 0b01000011; // Enable watchdog interrupt and Interrupt at 0.25s
     9da:	83 e4       	ldi	r24, 0x43	; 67
     9dc:	80 93 60 00 	sts	0x0060, r24

	// Save some power by disabling peripherals.
	PRR0 &= 0b11010111;
     9e0:	80 91 64 00 	lds	r24, 0x0064
     9e4:	87 7d       	andi	r24, 0xD7	; 215
     9e6:	80 93 64 00 	sts	0x0064, r24
	PRR1 &= 0b11111110;
     9ea:	80 91 65 00 	lds	r24, 0x0065
     9ee:	8e 7f       	andi	r24, 0xFE	; 254
     9f0:	80 93 65 00 	sts	0x0065, r24
	ACSR &= 0b10111111;
     9f4:	80 b7       	in	r24, 0x30	; 48
     9f6:	8f 7b       	andi	r24, 0xBF	; 191
     9f8:	80 bf       	out	0x30, r24	; 48
	ACSR |= 0b10001000;
     9fa:	80 b7       	in	r24, 0x30	; 48
     9fc:	88 68       	ori	r24, 0x88	; 136
     9fe:	80 bf       	out	0x30, r24	; 48
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     a00:	94 e0       	ldi	r25, 0x04	; 4
     a02:	80 e8       	ldi	r24, 0x80	; 128
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	80 93 61 00 	sts	0x0061, r24
     a0c:	90 93 61 00 	sts	0x0061, r25
     a10:	0f be       	out	0x3f, r0	; 63
	// Divide 16MHz crystal down to 1MHz for CPU clock.
	clock_prescale_set(clock_div_16);

	// Init USB hardware and create a regular character stream for the
	// USB interface so that it can be used with the stdio.h functions
	USB_Init();
     a12:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <USB_Init>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     a16:	61 e4       	ldi	r22, 0x41	; 65
     a18:	72 e0       	ldi	r23, 0x02	; 2
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 0a 12 	call	0x2414	; 0x2414 <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a22:	78 94       	sei

	// Enable interrupts
	GlobalInterruptEnable();

	run_lufa();
     a24:	04 df       	rcall	.-504    	; 0x82e <run_lufa>
     a26:	84 ef       	ldi	r24, 0xF4	; 244
     a28:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a2a:	a3 ec       	ldi	r26, 0xC3	; 195
     a2c:	b9 e0       	ldi	r27, 0x09	; 9
     a2e:	11 97       	sbiw	r26, 0x01	; 1
     a30:	f1 f7       	brne	.-4      	; 0xa2e <main+0x78>
     a32:	00 c0       	rjmp	.+0      	; 0xa34 <main+0x7e>
     a34:	00 00       	nop
     a36:	01 97       	sbiw	r24, 0x01	; 1

	// Wait 5 seconds so that we can open a console to catch startup messages
	for (uint16_t i = 0; i < 500; i++) {
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	b9 f7       	brne	.-18     	; 0xa2a <main+0x74>
		_delay_ms(10);
	}

	// Print startup message
	printPGMStr(PSTR(SOFTWARE_STR));
     a3c:	81 e1       	ldi	r24, 0x11	; 17
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	3e dd       	rcall	.-1412   	; 0x4be <printPGMStr>
	fprintf(&USBSerialStream, " V%s,%s", HARDWARE_VERS, SOFTWARE_VERS);
     a42:	8a e5       	ldi	r24, 0x5A	; 90
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	9f 93       	push	r25
     a4c:	8f 93       	push	r24
     a4e:	8e e5       	ldi	r24, 0x5E	; 94
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	9f 93       	push	r25
     a54:	8f 93       	push	r24
     a56:	81 e4       	ldi	r24, 0x41	; 65
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	9f 93       	push	r25
     a5c:	8f 93       	push	r24
     a5e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
	run_lufa();
     a62:	e5 de       	rcall	.-566    	; 0x82e <run_lufa>

	// Set up control pins
	DDRD |= (1 << P1EN)|(1 << P2EN)|(1 << P3EN)|(1 << P4EN)|(1 << P5EN)|(1 << P6EN)|(1 << P7EN)|(1 << P8EN);
     a64:	8a b1       	in	r24, 0x0a	; 10
     a66:	8f ef       	ldi	r24, 0xFF	; 255
     a68:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << P9EN)|(1 << P10EN)|(1 << P11EN);
     a6a:	84 b1       	in	r24, 0x04	; 4
     a6c:	80 67       	ori	r24, 0x70	; 112
     a6e:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << P12EN);
     a70:	3e 9a       	sbi	0x07, 6	; 7
	
	// Set up LED pins
	DDRB |= (1 << LED1)|(1 << LED2);
     a72:	84 b1       	in	r24, 0x04	; 4
     a74:	88 68       	ori	r24, 0x88	; 136
     a76:	84 b9       	out	0x04, r24	; 4
//	for (uint8_t i = 0; i < PORT_CNT; i++) {
//		PORT_BOOT_STATE[i] = EEPROM_Read_Port_Boot_State(i);
//		if (PORT_BOOT_STATE[i] & 0b00000001) { PORT_CTL(i, 1); } else { PORT_CTL(i, 0); } // Enable port if set
//		if (PORT_BOOT_STATE[i] & 0b00000010) { PORT_STATE[i] |= 0b00000100; } // Enable VCTL if set
//	}
	run_lufa();
     a78:	da de       	rcall	.-588    	; 0x82e <run_lufa>

	INPUT_Clear();
     a7a:	a1 de       	rcall	.-702    	; 0x7be <INPUT_Clear>
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
			while (*str == ' ' || *str == '\t') str++;

			EEPROM_Write_Port_Name(portid, str);
			
			printPGMStr(STR_NR_Port);
			EEPROM_Read_Port_Name(portid, temp_name);
     a86:	8e 01       	movw	r16, r28
     a88:	0f 5f       	subi	r16, 0xFF	; 255
     a8a:	1f 4f       	sbci	r17, 0xFF	; 255
// ~~ Main system loop
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	for (;;) {
		// Read a byte from the USB serial stream
		BYTE_IN = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	0e 94 cc 11 	call	0x2398	; 0x2398 <CDC_Device_ReceiveByte>
     a94:	7c 01       	movw	r14, r24

		// USB Serial stream will return <0 if no bytes are available.
		if (BYTE_IN >= 0) {
     a96:	97 fd       	sbrc	r25, 7
     a98:	4a c7       	rjmp	.+3732   	; 0x192e <__stack+0xe2f>

// Turn a LED ON (state == 1) or OFF (state == 0)
// LED 0 == Green, LED 1 == Red
static inline void LED_CTL(uint8_t led, uint8_t state) {
	if (state == 1) {
		PORTB |= (1 << (LED1 + led));
     a9a:	2b 9a       	sbi	0x05, 3	; 5
			// during a PCYCLE.
			LED_CTL(0, 1);
			
			// Echo the char we just received back out the serial stream so the user's 
			// console will display it.
			fputc(BYTE_IN, &USBSerialStream);
     a9c:	61 e4       	ldi	r22, 0x41	; 65
     a9e:	72 e0       	ldi	r23, 0x02	; 2
     aa0:	0e 94 03 1a 	call	0x3406	; 0x3406 <fputc>

			// Switch on the input byte to determine what is is and what to do.
			switch (BYTE_IN) {
     aa4:	fd e0       	ldi	r31, 0x0D	; 13
     aa6:	ef 16       	cp	r14, r31
     aa8:	f1 04       	cpc	r15, r1
     aaa:	81 f1       	breq	.+96     	; 0xb0c <__stack+0xd>
     aac:	74 f4       	brge	.+28     	; 0xaca <main+0x114>
     aae:	38 e0       	ldi	r19, 0x08	; 8
     ab0:	e3 16       	cp	r14, r19
     ab2:	f1 04       	cpc	r15, r1
     ab4:	d9 f0       	breq	.+54     	; 0xaec <main+0x136>
     ab6:	4a e0       	ldi	r20, 0x0A	; 10
     ab8:	e4 16       	cp	r14, r20
     aba:	f1 04       	cpc	r15, r1
     abc:	39 f1       	breq	.+78     	; 0xb0c <__stack+0xd>
     abe:	53 e0       	ldi	r21, 0x03	; 3
     ac0:	e5 16       	cp	r14, r21
     ac2:	f1 04       	cpc	r15, r1
     ac4:	09 f4       	brne	.+2      	; 0xac8 <main+0x112>
     ac6:	31 c7       	rjmp	.+3682   	; 0x192a <__stack+0xe2b>
     ac8:	1b c7       	rjmp	.+3638   	; 0x1900 <__stack+0xe01>
     aca:	8e e1       	ldi	r24, 0x1E	; 30
     acc:	e8 16       	cp	r14, r24
     ace:	f1 04       	cpc	r15, r1
     ad0:	09 f4       	brne	.+2      	; 0xad4 <main+0x11e>
     ad2:	0e c7       	rjmp	.+3612   	; 0x18f0 <__stack+0xdf1>
     ad4:	9f e7       	ldi	r25, 0x7F	; 127
     ad6:	e9 16       	cp	r14, r25
     ad8:	f1 04       	cpc	r15, r1
     ada:	41 f0       	breq	.+16     	; 0xaec <main+0x136>
     adc:	ad e1       	ldi	r26, 0x1D	; 29
     ade:	ea 16       	cp	r14, r26
     ae0:	f1 04       	cpc	r15, r1
     ae2:	09 f0       	breq	.+2      	; 0xae6 <main+0x130>
     ae4:	0d c7       	rjmp	.+3610   	; 0x1900 <__stack+0xe01>
     ae6:	e1 2c       	mov	r14, r1
     ae8:	f1 2c       	mov	r15, r1
     aea:	f6 c6       	rjmp	.+3564   	; 0x18d8 <__stack+0xdd9>
				case 8:
				case 127:
					// Handle Backspace chars.
					if (DATA_IN_POS > 0){
     aec:	e0 91 3a 02 	lds	r30, 0x023A
     af0:	ee 23       	and	r30, r30
     af2:	09 f4       	brne	.+2      	; 0xaf6 <main+0x140>
     af4:	1c c7       	rjmp	.+3640   	; 0x192e <__stack+0xe2f>
						DATA_IN_POS--;
     af6:	e1 50       	subi	r30, 0x01	; 1
     af8:	e0 93 3a 02 	sts	0x023A, r30
						DATA_IN[DATA_IN_POS] = 0;
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	e9 59       	subi	r30, 0x99	; 153
     b00:	fd 4f       	sbci	r31, 0xFD	; 253
     b02:	10 82       	st	Z, r1
						printPGMStr(STR_Backspace);
     b04:	80 e1       	ldi	r24, 0x10	; 16
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	da dc       	rcall	.-1612   	; 0x4be <printPGMStr>
     b0a:	11 c7       	rjmp	.+3618   	; 0x192e <__stack+0xe2f>
// We've gotten a new command, parse out what they want.
static inline void INPUT_Parse(void) {
	pd_set pd; // Port descriptor bitmap

	// HELP - Print a basic help menu
	if (strncasecmp_P(DATA_IN, STR_Command_HELP, 4) == 0) {
     b0c:	44 e0       	ldi	r20, 0x04	; 4
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	6c e8       	ldi	r22, 0x8C	; 140
     b12:	71 e0       	ldi	r23, 0x01	; 1
     b14:	87 e6       	ldi	r24, 0x67	; 103
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
     b1c:	89 2b       	or	r24, r25
     b1e:	19 f4       	brne	.+6      	; 0xb26 <__stack+0x27>
	}
}

// Print a quick help command
static inline void PRINT_Help(void) {
	printPGMStr(STR_Help_Info);
     b20:	81 e8       	ldi	r24, 0x81	; 129
     b22:	92 e0       	ldi	r25, 0x02	; 2
     b24:	00 c7       	rjmp	.+3584   	; 0x1926 <__stack+0xe27>
	if (strncasecmp_P(DATA_IN, STR_Command_HELP, 4) == 0) {
		PRINT_Help();
		return;
	}
	// STATUS - Print a port status summary for all ports
	if (strncasecmp_P(DATA_IN, STR_Command_STATUS, 6) == 0) {
     b26:	46 e0       	ldi	r20, 0x06	; 6
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	65 e8       	ldi	r22, 0x85	; 133
     b2c:	71 e0       	ldi	r23, 0x01	; 1
     b2e:	87 e6       	ldi	r24, 0x67	; 103
     b30:	92 e0       	ldi	r25, 0x02	; 2
     b32:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
     b36:	89 2b       	or	r24, r25
     b38:	09 f0       	breq	.+2      	; 0xb3c <__stack+0x3d>
     b3a:	f7 c0       	rjmp	.+494    	; 0xd2a <__stack+0x22b>
	return (voltage / 0.05);
}

// Read input voltage
static inline float ADC_Read_Input_Voltage(void) {
	return (ADC_Read_Raw_Voltage(6, 1) * EEPROM_Read_V_CAL());
     b3c:	7e de       	rcall	.-772    	; 0x83a <ADC_Read_Raw_Voltage.isra.2>
     b3e:	6b 01       	movw	r12, r22
     b40:	7c 01       	movw	r14, r24
     b42:	94 dd       	rcall	.-1240   	; 0x66c <EEPROM_Read_V_CAL>
     b44:	9b 01       	movw	r18, r22
     b46:	ac 01       	movw	r20, r24
     b48:	c7 01       	movw	r24, r14
     b4a:	b6 01       	movw	r22, r12
     b4c:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     b50:	f8 2e       	mov	r15, r24
     b52:	e9 2e       	mov	r14, r25
     b54:	96 2e       	mov	r9, r22
     b56:	87 2e       	mov	r8, r23
     b58:	37 01       	movw	r6, r14
static inline void PRINT_Status(void) {
	float voltage, current;
	
	// Voltage
	voltage = ADC_Read_Input_Voltage();
	printPGMStr(PSTR("\r\nVoltage: "));
     b5a:	80 ef       	ldi	r24, 0xF0	; 240
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	6c 8b       	std	Y+20, r22	; 0x14
     b60:	7b 8b       	std	Y+19, r23	; 0x13
     b62:	ad dc       	rcall	.-1702   	; 0x4be <printPGMStr>
	fprintf(&USBSerialStream, "%.2fV", voltage);
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
     b68:	7b 89       	ldd	r23, Y+19	; 0x13
     b6a:	7f 93       	push	r23
     b6c:	6c 89       	ldd	r22, Y+20	; 0x14
     b6e:	6f 93       	push	r22
     b70:	86 e6       	ldi	r24, 0x66	; 102
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	9f 93       	push	r25
     b76:	8f 93       	push	r24
     b78:	41 e4       	ldi	r20, 0x41	; 65
     b7a:	e4 2e       	mov	r14, r20
     b7c:	42 e0       	ldi	r20, 0x02	; 2
     b7e:	f4 2e       	mov	r15, r20
     b80:	ff 92       	push	r15
     b82:	ef 92       	push	r14
     b84:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
	
	// Temperature
	printPGMStr(PSTR("\tTemperature: "));
     b88:	81 ee       	ldi	r24, 0xE1	; 225
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	98 dc       	rcall	.-1744   	; 0x4be <printPGMStr>
	return (ADC_Read_Raw_Voltage(6, 1) * EEPROM_Read_V_CAL());
}

// Read temperature
static inline float ADC_Read_Temperature(void) {
	return ((ADC_Read_Raw_Voltage(7, 1) - 0.4) / 0.0195);
     b8e:	55 de       	rcall	.-854    	; 0x83a <ADC_Read_Raw_Voltage.isra.2>
     b90:	2d ec       	ldi	r18, 0xCD	; 205
     b92:	3c ec       	ldi	r19, 0xCC	; 204
     b94:	4c ec       	ldi	r20, 0xCC	; 204
     b96:	5e e3       	ldi	r21, 0x3E	; 62
     b98:	0e 94 ce 12 	call	0x259c	; 0x259c <__subsf3>
     b9c:	27 e7       	ldi	r18, 0x77	; 119
     b9e:	3e eb       	ldi	r19, 0xBE	; 190
     ba0:	4f e9       	ldi	r20, 0x9F	; 159
     ba2:	5c e3       	ldi	r21, 0x3C	; 60
     ba4:	0e 94 37 13 	call	0x266e	; 0x266e <__divsf3>
	printPGMStr(PSTR("\r\nVoltage: "));
	fprintf(&USBSerialStream, "%.2fV", voltage);
	
	// Temperature
	printPGMStr(PSTR("\tTemperature: "));
	fprintf(&USBSerialStream, "%.0fC", ADC_Read_Temperature());
     ba8:	9f 93       	push	r25
     baa:	8f 93       	push	r24
     bac:	7f 93       	push	r23
     bae:	6f 93       	push	r22
     bb0:	8c e6       	ldi	r24, 0x6C	; 108
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	9f 93       	push	r25
     bb6:	8f 93       	push	r24
     bb8:	ff 92       	push	r15
     bba:	ef 92       	push	r14
     bbc:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	5b e5       	ldi	r21, 0x5B	; 91
     bcc:	e5 2e       	mov	r14, r21
     bce:	52 e0       	ldi	r21, 0x02	; 2
     bd0:	f5 2e       	mov	r15, r21
     bd2:	aa 24       	eor	r10, r10
     bd4:	a3 94       	inc	r10
     bd6:	b1 2c       	mov	r11, r1
		printPGMStr(STR_NR_Port);
		
		// Number and Name
		char temp_name[16];
		EEPROM_Read_Port_Name(i, temp_name);
		fprintf(&USBSerialStream, "%i \"%s\": ", i+1, temp_name);
     bd8:	71 e4       	ldi	r23, 0x41	; 65
     bda:	c7 2e       	mov	r12, r23
     bdc:	72 e0       	ldi	r23, 0x02	; 2
     bde:	d7 2e       	mov	r13, r23
		current = ADC_Read_Port_Current(i);
		printPGMStr(PSTR(" Current: "));
		fprintf(&USBSerialStream, "%.2fA ", current);
		// Power reading
		printPGMStr(PSTR("Power: "));
		fprintf(&USBSerialStream, "%.1fW", (voltage * current));
     be0:	e3 e8       	ldi	r30, 0x83	; 131
     be2:	2e 2e       	mov	r2, r30
     be4:	e1 e0       	ldi	r30, 0x01	; 1
     be6:	3e 2e       	mov	r3, r30
     be8:	5e 2c       	mov	r5, r14
     bea:	2b e5       	ldi	r18, 0x5B	; 91
     bec:	32 e0       	ldi	r19, 0x02	; 2
     bee:	52 1a       	sub	r5, r18
	fprintf(&USBSerialStream, "%.0fC", ADC_Read_Temperature());
	
	// Ports
	for(uint8_t i = 0; i < PORT_CNT; i++) {
		// PORT
		printPGMStr(STR_NR_Port);
     bf0:	88 e0       	ldi	r24, 0x08	; 8
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	64 dc       	rcall	.-1848   	; 0x4be <printPGMStr>
		
		// Number and Name
		char temp_name[16];
		EEPROM_Read_Port_Name(i, temp_name);
     bf6:	b8 01       	movw	r22, r16
     bf8:	85 2d       	mov	r24, r5
     bfa:	4d dd       	rcall	.-1382   	; 0x696 <EEPROM_Read_Port_Name>
		fprintf(&USBSerialStream, "%i \"%s\": ", i+1, temp_name);
     bfc:	1f 93       	push	r17
     bfe:	0f 93       	push	r16
     c00:	bf 92       	push	r11
     c02:	af 92       	push	r10
     c04:	a2 e7       	ldi	r26, 0x72	; 114
     c06:	b1 e0       	ldi	r27, 0x01	; 1
     c08:	bf 93       	push	r27
     c0a:	af 93       	push	r26
     c0c:	df 92       	push	r13
     c0e:	cf 92       	push	r12
     c10:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
     c14:	fa 8a       	std	Y+18, r15	; 0x12
     c16:	e9 8a       	std	Y+17, r14	; 0x11
		
		// Enabled/Disabled
		if (PORT_STATE[i] & 0b00000001) { printPGMStr(STR_Enabled); } else { printPGMStr(STR_Disabled); }
     c18:	d7 01       	movw	r26, r14
     c1a:	8c 91       	ld	r24, X
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	80 ff       	sbrs	r24, 0
     c28:	03 c0       	rjmp	.+6      	; 0xc30 <__stack+0x131>
     c2a:	85 e5       	ldi	r24, 0x55	; 85
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <__stack+0x135>
     c30:	83 e4       	ldi	r24, 0x43	; 67
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	44 dc       	rcall	.-1912   	; 0x4be <printPGMStr>
		
		// Current reading
		current = ADC_Read_Port_Current(i);
     c36:	85 2d       	mov	r24, r5
     c38:	29 de       	rcall	.-942    	; 0x88c <ADC_Read_Port_Current>
     c3a:	2c 01       	movw	r4, r24
		printPGMStr(PSTR(" Current: "));
     c3c:	86 ed       	ldi	r24, 0xD6	; 214
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	6c 8b       	std	Y+20, r22	; 0x14
     c42:	7b 8b       	std	Y+19, r23	; 0x13
     c44:	3c dc       	rcall	.-1928   	; 0x4be <printPGMStr>
		fprintf(&USBSerialStream, "%.2fA ", current);
     c46:	5f 92       	push	r5
     c48:	4f 92       	push	r4
     c4a:	7b 89       	ldd	r23, Y+19	; 0x13
     c4c:	7f 93       	push	r23
     c4e:	6c 89       	ldd	r22, Y+20	; 0x14
     c50:	6f 93       	push	r22
     c52:	ac e7       	ldi	r26, 0x7C	; 124
     c54:	b1 e0       	ldi	r27, 0x01	; 1
     c56:	bf 93       	push	r27
     c58:	af 93       	push	r26
     c5a:	df 92       	push	r13
     c5c:	cf 92       	push	r12
     c5e:	6c 8b       	std	Y+20, r22	; 0x14
     c60:	7b 8b       	std	Y+19, r23	; 0x13
     c62:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
		// Power reading
		printPGMStr(PSTR("Power: "));
     c66:	8e ec       	ldi	r24, 0xCE	; 206
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	29 dc       	rcall	.-1966   	; 0x4be <printPGMStr>
		fprintf(&USBSerialStream, "%.1fW", (voltage * current));
     c6c:	6c 89       	ldd	r22, Y+20	; 0x14
     c6e:	7b 89       	ldd	r23, Y+19	; 0x13
     c70:	26 2f       	mov	r18, r22
     c72:	37 2f       	mov	r19, r23
     c74:	44 2d       	mov	r20, r4
     c76:	55 2d       	mov	r21, r5
     c78:	d4 01       	movw	r26, r8
     c7a:	f3 01       	movw	r30, r6
     c7c:	6b 2f       	mov	r22, r27
     c7e:	78 2d       	mov	r23, r8
     c80:	8f 2f       	mov	r24, r31
     c82:	96 2d       	mov	r25, r6
     c84:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     c88:	9f 93       	push	r25
     c8a:	8f 93       	push	r24
     c8c:	7f 93       	push	r23
     c8e:	6f 93       	push	r22
     c90:	3f 92       	push	r3
     c92:	2f 92       	push	r2
     c94:	df 92       	push	r13
     c96:	cf 92       	push	r12
     c98:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
		
		// Overload?
		if (PORT_STATE[i] & 0b00000010) { printPGMStr(STR_Overload); }
     c9c:	d7 01       	movw	r26, r14
     c9e:	8c 91       	ld	r24, X
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	81 ff       	sbrs	r24, 1
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <__stack+0x1b5>
     cae:	8e e2       	ldi	r24, 0x2E	; 46
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	05 dc       	rcall	.-2038   	; 0x4be <printPGMStr>
     cb4:	ff ef       	ldi	r31, 0xFF	; 255
     cb6:	ef 1a       	sub	r14, r31
     cb8:	ff 0a       	sbc	r15, r31
		
		// Voltage Control?
		if (PORT_STATE[i] & 0b00000100) { printPGMStr(STR_VCTL); }
     cba:	a9 89       	ldd	r26, Y+17	; 0x11
     cbc:	ba 89       	ldd	r27, Y+18	; 0x12
     cbe:	8c 91       	ld	r24, X
     cc0:	82 ff       	sbrs	r24, 2
     cc2:	03 c0       	rjmp	.+6      	; 0xcca <__stack+0x1cb>
     cc4:	88 e1       	ldi	r24, 0x18	; 24
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	fa db       	rcall	.-2060   	; 0x4be <printPGMStr>
     cca:	bf ef       	ldi	r27, 0xFF	; 255
     ccc:	ab 1a       	sub	r10, r27
     cce:	bb 0a       	sbc	r11, r27
	// Temperature
	printPGMStr(PSTR("\tTemperature: "));
	fprintf(&USBSerialStream, "%.0fC", ADC_Read_Temperature());
	
	// Ports
	for(uint8_t i = 0; i < PORT_CNT; i++) {
     cd0:	ed e0       	ldi	r30, 0x0D	; 13
     cd2:	ae 16       	cp	r10, r30
     cd4:	b1 04       	cpc	r11, r1
     cd6:	09 f0       	breq	.+2      	; 0xcda <__stack+0x1db>
     cd8:	87 cf       	rjmp	.-242    	; 0xbe8 <__stack+0xe9>
		// Voltage Control?
		if (PORT_STATE[i] & 0b00000100) { printPGMStr(STR_VCTL); }
	}
	
	// Aux Inputs
	printPGMStr(PSTR("\r\nAUX "));
     cda:	87 ec       	ldi	r24, 0xC7	; 199
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	ef db       	rcall	.-2082   	; 0x4be <printPGMStr>
     ce0:	aa 24       	eor	r10, r10
     ce2:	a3 94       	inc	r10
     ce4:	b1 2c       	mov	r11, r1
	for (uint8_t j = 0; j < 6; j++) {
		fprintf(&USBSerialStream, "%i:%.2fV ", j+1, ADC_Read_Raw_Voltage(j, 1));
     ce6:	29 e8       	ldi	r18, 0x89	; 137
     ce8:	c2 2e       	mov	r12, r18
     cea:	21 e0       	ldi	r18, 0x01	; 1
     cec:	d2 2e       	mov	r13, r18
     cee:	31 e4       	ldi	r19, 0x41	; 65
     cf0:	e3 2e       	mov	r14, r19
     cf2:	32 e0       	ldi	r19, 0x02	; 2
     cf4:	f3 2e       	mov	r15, r19
     cf6:	a1 dd       	rcall	.-1214   	; 0x83a <ADC_Read_Raw_Voltage.isra.2>
     cf8:	9f 93       	push	r25
     cfa:	8f 93       	push	r24
     cfc:	7f 93       	push	r23
     cfe:	6f 93       	push	r22
     d00:	bf 92       	push	r11
     d02:	af 92       	push	r10
     d04:	df 92       	push	r13
     d06:	cf 92       	push	r12
     d08:	ff 92       	push	r15
     d0a:	ef 92       	push	r14
     d0c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
     d10:	ff ef       	ldi	r31, 0xFF	; 255
     d12:	af 1a       	sub	r10, r31
     d14:	bf 0a       	sbc	r11, r31
		if (PORT_STATE[i] & 0b00000100) { printPGMStr(STR_VCTL); }
	}
	
	// Aux Inputs
	printPGMStr(PSTR("\r\nAUX "));
	for (uint8_t j = 0; j < 6; j++) {
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	37 e0       	ldi	r19, 0x07	; 7
     d22:	a3 16       	cp	r10, r19
     d24:	b1 04       	cpc	r11, r1
     d26:	39 f7       	brne	.-50     	; 0xcf6 <__stack+0x1f7>
     d28:	00 c6       	rjmp	.+3072   	; 0x192a <__stack+0xe2b>
	if (strncasecmp_P(DATA_IN, STR_Command_STATUS, 6) == 0) {
		PRINT_Status();
		return;
	}
	// PSTATUS - Print a status summary in a parser friendly output
	if (strncasecmp_P(DATA_IN, STR_Command_PSTATUS, 7) == 0) {
     d2a:	47 e0       	ldi	r20, 0x07	; 7
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	6d e7       	ldi	r22, 0x7D	; 125
     d30:	71 e0       	ldi	r23, 0x01	; 1
     d32:	87 e6       	ldi	r24, 0x67	; 103
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
     d3a:	89 2b       	or	r24, r25
     d3c:	09 f0       	breq	.+2      	; 0xd40 <__stack+0x241>
     d3e:	bf c0       	rjmp	.+382    	; 0xebe <__stack+0x3bf>
	return (voltage / 0.05);
}

// Read input voltage
static inline float ADC_Read_Input_Voltage(void) {
	return (ADC_Read_Raw_Voltage(6, 1) * EEPROM_Read_V_CAL());
     d40:	7c dd       	rcall	.-1288   	; 0x83a <ADC_Read_Raw_Voltage.isra.2>
     d42:	6b 01       	movw	r12, r22
     d44:	7c 01       	movw	r14, r24
     d46:	92 dc       	rcall	.-1756   	; 0x66c <EEPROM_Read_V_CAL>
     d48:	9b 01       	movw	r18, r22
     d4a:	ac 01       	movw	r20, r24
     d4c:	c7 01       	movw	r24, r14
     d4e:	b6 01       	movw	r22, r12
     d50:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     d54:	d6 2e       	mov	r13, r22
     d56:	c7 2e       	mov	r12, r23
     d58:	b8 2e       	mov	r11, r24
     d5a:	a9 2e       	mov	r10, r25
     d5c:	69 8b       	std	Y+17, r22	; 0x11
     d5e:	47 2e       	mov	r4, r23
     d60:	58 2e       	mov	r5, r24
     d62:	69 2e       	mov	r6, r25
static inline void PRINT_Status_Prog(void){
	char temp_name[16];
	float voltage = ADC_Read_Input_Voltage();
	
	// Device Description,Software version,Unit Name
	EEPROM_Read_Port_Name(-1, temp_name); //PDU Name
     d64:	b8 01       	movw	r22, r16
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	96 dc       	rcall	.-1748   	; 0x696 <EEPROM_Read_Port_Name>
	printPGMStr(PSTR(SOFTWARE_STR));
     d6a:	87 eb       	ldi	r24, 0xB7	; 183
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	a7 db       	rcall	.-2226   	; 0x4be <printPGMStr>
	fprintf(&USBSerialStream, ",%s,%s", SOFTWARE_VERS, temp_name);
     d70:	1f 93       	push	r17
     d72:	0f 93       	push	r16
     d74:	8a e5       	ldi	r24, 0x5A	; 90
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	9f 93       	push	r25
     d7a:	8f 93       	push	r24
     d7c:	83 e9       	ldi	r24, 0x93	; 147
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	9f 93       	push	r25
     d82:	8f 93       	push	r24
     d84:	a1 e4       	ldi	r26, 0x41	; 65
     d86:	ea 2e       	mov	r14, r26
     d88:	a2 e0       	ldi	r26, 0x02	; 2
     d8a:	fa 2e       	mov	r15, r26
     d8c:	ff 92       	push	r15
     d8e:	ef 92       	push	r14
     d90:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
	return (ADC_Read_Raw_Voltage(6, 1) * EEPROM_Read_V_CAL());
}

// Read temperature
static inline float ADC_Read_Temperature(void) {
	return ((ADC_Read_Raw_Voltage(7, 1) - 0.4) / 0.0195);
     d94:	52 dd       	rcall	.-1372   	; 0x83a <ADC_Read_Raw_Voltage.isra.2>
     d96:	2d ec       	ldi	r18, 0xCD	; 205
     d98:	3c ec       	ldi	r19, 0xCC	; 204
     d9a:	4c ec       	ldi	r20, 0xCC	; 204
     d9c:	5e e3       	ldi	r21, 0x3E	; 62
     d9e:	0e 94 ce 12 	call	0x259c	; 0x259c <__subsf3>
     da2:	27 e7       	ldi	r18, 0x77	; 119
     da4:	3e eb       	ldi	r19, 0xBE	; 190
     da6:	4f e9       	ldi	r20, 0x9F	; 159
     da8:	5c e3       	ldi	r21, 0x3C	; 60
     daa:	0e 94 37 13 	call	0x266e	; 0x266e <__divsf3>
	EEPROM_Read_Port_Name(-1, temp_name); //PDU Name
	printPGMStr(PSTR(SOFTWARE_STR));
	fprintf(&USBSerialStream, ",%s,%s", SOFTWARE_VERS, temp_name);
	
	// Input Voltage,Temperature
	fprintf(&USBSerialStream, "\r\n%.2f,%.0f", voltage, ADC_Read_Temperature());
     dae:	9f 93       	push	r25
     db0:	8f 93       	push	r24
     db2:	7f 93       	push	r23
     db4:	6f 93       	push	r22
     db6:	af 92       	push	r10
     db8:	bf 92       	push	r11
     dba:	cf 92       	push	r12
     dbc:	df 92       	push	r13
     dbe:	8a e9       	ldi	r24, 0x9A	; 154
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	9f 93       	push	r25
     dc4:	8f 93       	push	r24
     dc6:	ff 92       	push	r15
     dc8:	ef 92       	push	r14
     dca:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
	
	// AIN1,AIN2,AIN3,AIN4,AIN5,AIN6
	fprintf(&USBSerialStream, "\r\n%.2f,%.2f,%.2f,%.2f,%.2f,%.2f", ADC_Read_Raw_Voltage(0, 1), \
		ADC_Read_Raw_Voltage(1, 1), ADC_Read_Raw_Voltage(2, 1), ADC_Read_Raw_Voltage(3, 1), \
		ADC_Read_Raw_Voltage(4, 1), ADC_Read_Raw_Voltage(5, 1));
     dce:	35 dd       	rcall	.-1430   	; 0x83a <ADC_Read_Raw_Voltage.isra.2>
	
	// Input Voltage,Temperature
	fprintf(&USBSerialStream, "\r\n%.2f,%.0f", voltage, ADC_Read_Temperature());
	
	// AIN1,AIN2,AIN3,AIN4,AIN5,AIN6
	fprintf(&USBSerialStream, "\r\n%.2f,%.2f,%.2f,%.2f,%.2f,%.2f", ADC_Read_Raw_Voltage(0, 1), \
     dd0:	9f 93       	push	r25
     dd2:	8f 93       	push	r24
     dd4:	7f 93       	push	r23
     dd6:	6f 93       	push	r22
     dd8:	9f 93       	push	r25
     dda:	8f 93       	push	r24
     ddc:	7f 93       	push	r23
     dde:	6f 93       	push	r22
     de0:	9f 93       	push	r25
     de2:	8f 93       	push	r24
     de4:	7f 93       	push	r23
     de6:	6f 93       	push	r22
     de8:	9f 93       	push	r25
     dea:	8f 93       	push	r24
     dec:	7f 93       	push	r23
     dee:	6f 93       	push	r22
     df0:	9f 93       	push	r25
     df2:	8f 93       	push	r24
     df4:	7f 93       	push	r23
     df6:	6f 93       	push	r22
     df8:	9f 93       	push	r25
     dfa:	8f 93       	push	r24
     dfc:	7f 93       	push	r23
     dfe:	6f 93       	push	r22
     e00:	86 ea       	ldi	r24, 0xA6	; 166
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	9f 93       	push	r25
     e06:	8f 93       	push	r24
     e08:	ff 92       	push	r15
     e0a:	ef 92       	push	r14
     e0c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
     e10:	bb e5       	ldi	r27, 0x5B	; 91
     e12:	cb 2e       	mov	r12, r27
     e14:	b2 e0       	ldi	r27, 0x02	; 2
     e16:	db 2e       	mov	r13, r27
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	e1 2c       	mov	r14, r1
     e24:	f1 2c       	mov	r15, r1
		uint8_t port_vctl = (PORT_STATE[i] & 0b00000100) >> 2;
		
		float current = ADC_Read_Port_Current(i);
		float power = current * voltage;
		
		fprintf(&USBSerialStream, "\r\n%i,%s,%i,%.2f,%.1f,%i,%i", i+1, temp_name, port_state, \
     e26:	81 e4       	ldi	r24, 0x41	; 65
     e28:	28 2e       	mov	r2, r24
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	38 2e       	mov	r3, r24
     e2e:	ae 2c       	mov	r10, r14
		ADC_Read_Raw_Voltage(1, 1), ADC_Read_Raw_Voltage(2, 1), ADC_Read_Raw_Voltage(3, 1), \
		ADC_Read_Raw_Voltage(4, 1), ADC_Read_Raw_Voltage(5, 1));
	
	// Port Number,Port Name,Enabled?,Current,Power,Overload
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		EEPROM_Read_Port_Name(i, temp_name);
     e30:	b8 01       	movw	r22, r16
     e32:	8e 2d       	mov	r24, r14
     e34:	30 dc       	rcall	.-1952   	; 0x696 <EEPROM_Read_Port_Name>
		
		uint8_t port_state = (PORT_STATE[i] & 0b00000001);
     e36:	d6 01       	movw	r26, r12
     e38:	bd 90       	ld	r11, X+
     e3a:	6d 01       	movw	r12, r26
     e3c:	bf ef       	ldi	r27, 0xFF	; 255
     e3e:	eb 1a       	sub	r14, r27
     e40:	fb 0a       	sbc	r15, r27
		uint8_t port_overload = (PORT_STATE[i] & 0b00000010) >> 1;
		uint8_t port_vctl = (PORT_STATE[i] & 0b00000100) >> 2;
		
		float current = ADC_Read_Port_Current(i);
     e42:	8a 2d       	mov	r24, r10
     e44:	23 dd       	rcall	.-1466   	; 0x88c <ADC_Read_Port_Current>
     e46:	a6 2e       	mov	r10, r22
     e48:	97 2e       	mov	r9, r23
     e4a:	88 2e       	mov	r8, r24
     e4c:	79 2e       	mov	r7, r25
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		EEPROM_Read_Port_Name(i, temp_name);
		
		uint8_t port_state = (PORT_STATE[i] & 0b00000001);
		uint8_t port_overload = (PORT_STATE[i] & 0b00000010) >> 1;
		uint8_t port_vctl = (PORT_STATE[i] & 0b00000100) >> 2;
     e4e:	b2 fa       	bst	r11, 2
     e50:	88 27       	eor	r24, r24
     e52:	80 f9       	bld	r24, 0
		
		float current = ADC_Read_Port_Current(i);
		float power = current * voltage;
		
		fprintf(&USBSerialStream, "\r\n%i,%s,%i,%.2f,%.1f,%i,%i", i+1, temp_name, port_state, \
     e54:	1f 92       	push	r1
     e56:	8f 93       	push	r24
	// Port Number,Port Name,Enabled?,Current,Power,Overload
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		EEPROM_Read_Port_Name(i, temp_name);
		
		uint8_t port_state = (PORT_STATE[i] & 0b00000001);
		uint8_t port_overload = (PORT_STATE[i] & 0b00000010) >> 1;
     e58:	b1 fa       	bst	r11, 1
     e5a:	88 27       	eor	r24, r24
     e5c:	80 f9       	bld	r24, 0
		uint8_t port_vctl = (PORT_STATE[i] & 0b00000100) >> 2;
		
		float current = ADC_Read_Port_Current(i);
		float power = current * voltage;
		
		fprintf(&USBSerialStream, "\r\n%i,%s,%i,%.2f,%.1f,%i,%i", i+1, temp_name, port_state, \
     e5e:	1f 92       	push	r1
     e60:	8f 93       	push	r24
		uint8_t port_state = (PORT_STATE[i] & 0b00000001);
		uint8_t port_overload = (PORT_STATE[i] & 0b00000010) >> 1;
		uint8_t port_vctl = (PORT_STATE[i] & 0b00000100) >> 2;
		
		float current = ADC_Read_Port_Current(i);
		float power = current * voltage;
     e62:	79 89       	ldd	r23, Y+17	; 0x11
     e64:	27 2f       	mov	r18, r23
     e66:	34 2d       	mov	r19, r4
     e68:	45 2d       	mov	r20, r5
     e6a:	56 2d       	mov	r21, r6
     e6c:	6a 2d       	mov	r22, r10
     e6e:	79 2d       	mov	r23, r9
     e70:	88 2d       	mov	r24, r8
     e72:	97 2d       	mov	r25, r7
     e74:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
		
		fprintf(&USBSerialStream, "\r\n%i,%s,%i,%.2f,%.1f,%i,%i", i+1, temp_name, port_state, \
     e78:	9f 93       	push	r25
     e7a:	8f 93       	push	r24
     e7c:	7f 93       	push	r23
     e7e:	6f 93       	push	r22
     e80:	7f 92       	push	r7
     e82:	8f 92       	push	r8
     e84:	9f 92       	push	r9
     e86:	af 92       	push	r10
	
	// Port Number,Port Name,Enabled?,Current,Power,Overload
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		EEPROM_Read_Port_Name(i, temp_name);
		
		uint8_t port_state = (PORT_STATE[i] & 0b00000001);
     e88:	8b 2d       	mov	r24, r11
     e8a:	81 70       	andi	r24, 0x01	; 1
		uint8_t port_vctl = (PORT_STATE[i] & 0b00000100) >> 2;
		
		float current = ADC_Read_Port_Current(i);
		float power = current * voltage;
		
		fprintf(&USBSerialStream, "\r\n%i,%s,%i,%.2f,%.1f,%i,%i", i+1, temp_name, port_state, \
     e8c:	1f 92       	push	r1
     e8e:	8f 93       	push	r24
     e90:	1f 93       	push	r17
     e92:	0f 93       	push	r16
     e94:	ff 92       	push	r15
     e96:	ef 92       	push	r14
     e98:	a6 ec       	ldi	r26, 0xC6	; 198
     e9a:	b1 e0       	ldi	r27, 0x01	; 1
     e9c:	bf 93       	push	r27
     e9e:	af 93       	push	r26
     ea0:	3f 92       	push	r3
     ea2:	2f 92       	push	r2
     ea4:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
	fprintf(&USBSerialStream, "\r\n%.2f,%.2f,%.2f,%.2f,%.2f,%.2f", ADC_Read_Raw_Voltage(0, 1), \
		ADC_Read_Raw_Voltage(1, 1), ADC_Read_Raw_Voltage(2, 1), ADC_Read_Raw_Voltage(3, 1), \
		ADC_Read_Raw_Voltage(4, 1), ADC_Read_Raw_Voltage(5, 1));
	
	// Port Number,Port Name,Enabled?,Current,Power,Overload
	for (uint8_t i = 0; i < PORT_CNT; i++) {
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	3c e0       	ldi	r19, 0x0C	; 12
     eb4:	e3 16       	cp	r14, r19
     eb6:	f1 04       	cpc	r15, r1
     eb8:	09 f0       	breq	.+2      	; 0xebc <__stack+0x3bd>
     eba:	b9 cf       	rjmp	.-142    	; 0xe2e <__stack+0x32f>
     ebc:	36 c5       	rjmp	.+2668   	; 0x192a <__stack+0xe2b>
	if (strncasecmp_P(DATA_IN, STR_Command_PSTATUS, 7) == 0) {
		PRINT_Status_Prog();
		return;
	}
	// DEBUG - Print a report of debugging information, including EEPROM variables
	if (strncasecmp_P(DATA_IN, STR_Command_DEBUG, 10) == 0) {
     ebe:	4a e0       	ldi	r20, 0x0A	; 10
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	67 e7       	ldi	r22, 0x77	; 119
     ec4:	71 e0       	ldi	r23, 0x01	; 1
     ec6:	87 e6       	ldi	r24, 0x67	; 103
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
     ece:	89 2b       	or	r24, r25
     ed0:	09 f0       	breq	.+2      	; 0xed4 <__stack+0x3d5>
     ed2:	af c1       	rjmp	.+862    	; 0x1232 <__stack+0x733>
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Dump debugging data
static inline void DEBUG_Dump(void) {
	// Print hardware and software versions
	fprintf(&USBSerialStream, "\r\nV%s,%s", HARDWARE_VERS, SOFTWARE_VERS);
     ed4:	8a e5       	ldi	r24, 0x5A	; 90
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	9f 93       	push	r25
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	8f 93       	push	r24
     ee0:	81 ee       	ldi	r24, 0xE1	; 225
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	9f 93       	push	r25
     ee6:	8f 93       	push	r24
     ee8:	81 e4       	ldi	r24, 0x41	; 65
     eea:	92 e0       	ldi	r25, 0x02	; 2
     eec:	9f 93       	push	r25
     eee:	8f 93       	push	r24
     ef0:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>

	// Read port defaults
	printPGMStr(STR_Port_Default);
     ef4:	88 ef       	ldi	r24, 0xF8	; 248
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	e2 da       	rcall	.-2620   	; 0x4be <printPGMStr>
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	a1 2c       	mov	r10, r1
     f06:	b1 2c       	mov	r11, r1
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		fprintf(&USBSerialStream, "%i ", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_PORT_DEFAULTS + i)));
     f08:	f1 e4       	ldi	r31, 0x41	; 65
     f0a:	cf 2e       	mov	r12, r31
     f0c:	f2 e0       	ldi	r31, 0x02	; 2
     f0e:	df 2e       	mov	r13, r31
     f10:	c5 01       	movw	r24, r10
     f12:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__eerd_byte_m32u4>
     f16:	1f 92       	push	r1
     f18:	8f 93       	push	r24
     f1a:	ad e1       	ldi	r26, 0x1D	; 29
     f1c:	b2 e0       	ldi	r27, 0x02	; 2
     f1e:	bf 93       	push	r27
     f20:	af 93       	push	r26
     f22:	e1 e4       	ldi	r30, 0x41	; 65
     f24:	ee 2e       	mov	r14, r30
     f26:	e2 e0       	ldi	r30, 0x02	; 2
     f28:	fe 2e       	mov	r15, r30
     f2a:	df 92       	push	r13
     f2c:	cf 92       	push	r12
     f2e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
     f32:	ff ef       	ldi	r31, 0xFF	; 255
     f34:	af 1a       	sub	r10, r31
     f36:	bf 0a       	sbc	r11, r31
	// Print hardware and software versions
	fprintf(&USBSerialStream, "\r\nV%s,%s", HARDWARE_VERS, SOFTWARE_VERS);

	// Read port defaults
	printPGMStr(STR_Port_Default);
	for (uint8_t i = 0; i < PORT_CNT; i++) {
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	2c e0       	ldi	r18, 0x0C	; 12
     f46:	a2 16       	cp	r10, r18
     f48:	b1 04       	cpc	r11, r1
     f4a:	11 f7       	brne	.-60     	; 0xf10 <__stack+0x411>
		fprintf(&USBSerialStream, "%i ", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_PORT_DEFAULTS + i)));
	}
	
	// Read REF_V
	printPGMStr(STR_VREF);
     f4c:	83 ea       	ldi	r24, 0xA3	; 163
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	b6 da       	rcall	.-2708   	; 0x4be <printPGMStr>
	fprintf(&USBSerialStream, "%.2f:%.2f", eeprom_read_float((float*)(EEPROM_OFFSET_REF_V)), EEPROM_Read_REF_V());
     f52:	d1 db       	rcall	.-2142   	; 0x6f6 <EEPROM_Read_REF_V>
     f54:	d6 2e       	mov	r13, r22
     f56:	c7 2e       	mov	r12, r23
     f58:	b8 2e       	mov	r11, r24
     f5a:	a9 2e       	mov	r10, r25
     f5c:	8c e0       	ldi	r24, 0x0C	; 12
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__eerd_dword_m32u4>
     f64:	af 92       	push	r10
     f66:	bf 92       	push	r11
     f68:	cf 92       	push	r12
     f6a:	df 92       	push	r13
     f6c:	9f 93       	push	r25
     f6e:	8f 93       	push	r24
     f70:	7f 93       	push	r23
     f72:	6f 93       	push	r22
     f74:	8a ee       	ldi	r24, 0xEA	; 234
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	9f 93       	push	r25
     f7a:	8f 93       	push	r24
     f7c:	ff 92       	push	r15
     f7e:	ef 92       	push	r14
     f80:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
	// Read V_CAL
	printPGMStr(STR_VCAL);
     f84:	8a e9       	ldi	r24, 0x9A	; 154
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	9a da       	rcall	.-2764   	; 0x4be <printPGMStr>
	fprintf(&USBSerialStream, "%i:%.1f", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_V_CAL)), EEPROM_Read_V_CAL());
     f8a:	70 db       	rcall	.-2336   	; 0x66c <EEPROM_Read_V_CAL>
     f8c:	d8 2e       	mov	r13, r24
     f8e:	c9 2e       	mov	r12, r25
     f90:	80 e1       	ldi	r24, 0x10	; 16
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	6c 8b       	std	Y+20, r22	; 0x14
     f96:	7b 8b       	std	Y+19, r23	; 0x13
     f98:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__eerd_byte_m32u4>
     f9c:	cf 92       	push	r12
     f9e:	df 92       	push	r13
     fa0:	7b 89       	ldd	r23, Y+19	; 0x13
     fa2:	7f 93       	push	r23
     fa4:	6c 89       	ldd	r22, Y+20	; 0x14
     fa6:	6f 93       	push	r22
     fa8:	1f 92       	push	r1
     faa:	8f 93       	push	r24
     fac:	84 ef       	ldi	r24, 0xF4	; 244
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	9f 93       	push	r25
     fb2:	8f 93       	push	r24
     fb4:	ff 92       	push	r15
     fb6:	ef 92       	push	r14
     fb8:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
	// Read I_CAL
	printPGMStr(STR_ICAL);
     fbc:	81 e9       	ldi	r24, 0x91	; 145
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	7e da       	rcall	.-2820   	; 0x4be <printPGMStr>
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	60 e2       	ldi	r22, 0x20	; 32
     fce:	e6 2e       	mov	r14, r22
     fd0:	f1 2c       	mov	r15, r1
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		fprintf(&USBSerialStream, "%i:%.1f ", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_I_CAL + i)), EEPROM_Read_I_CAL(i));
     fd2:	71 e4       	ldi	r23, 0x41	; 65
     fd4:	a7 2e       	mov	r10, r23
     fd6:	72 e0       	ldi	r23, 0x02	; 2
     fd8:	b7 2e       	mov	r11, r23
	eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_V_CAL), (int)(div * 10.0));
}

// Read the stored port current calibration
static inline float EEPROM_Read_I_CAL(uint8_t port) {
	uint8_t I_CAL = eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_I_CAL + port));
     fda:	c7 01       	movw	r24, r14
     fdc:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__eerd_byte_m32u4>
     fe0:	d8 2e       	mov	r13, r24
	if(I_CAL < ICAL_MIN || I_CAL > ICAL_MAX) I_CAL = 110;
     fe2:	84 ec       	ldi	r24, 0xC4	; 196
     fe4:	8d 0d       	add	r24, r13
     fe6:	85 36       	cpi	r24, 0x65	; 101
     fe8:	10 f4       	brcc	.+4      	; 0xfee <__stack+0x4ef>
     fea:	6d 2d       	mov	r22, r13
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <__stack+0x4f1>
     fee:	6e e6       	ldi	r22, 0x6E	; 110
	return (float)(I_CAL / 10.0);
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__floatsisf>
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e2       	ldi	r20, 0x20	; 32
    1000:	51 e4       	ldi	r21, 0x41	; 65
    1002:	0e 94 37 13 	call	0x266e	; 0x266e <__divsf3>
	printPGMStr(STR_VCAL);
	fprintf(&USBSerialStream, "%i:%.1f", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_V_CAL)), EEPROM_Read_V_CAL());
	// Read I_CAL
	printPGMStr(STR_ICAL);
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		fprintf(&USBSerialStream, "%i:%.1f ", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_I_CAL + i)), EEPROM_Read_I_CAL(i));
    1006:	9f 93       	push	r25
    1008:	8f 93       	push	r24
    100a:	7f 93       	push	r23
    100c:	6f 93       	push	r22
    100e:	1f 92       	push	r1
    1010:	df 92       	push	r13
    1012:	ac ef       	ldi	r26, 0xFC	; 252
    1014:	b1 e0       	ldi	r27, 0x01	; 1
    1016:	bf 93       	push	r27
    1018:	af 93       	push	r26
    101a:	51 e4       	ldi	r21, 0x41	; 65
    101c:	c5 2e       	mov	r12, r21
    101e:	52 e0       	ldi	r21, 0x02	; 2
    1020:	d5 2e       	mov	r13, r21
    1022:	bf 92       	push	r11
    1024:	af 92       	push	r10
    1026:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
    102a:	ff ef       	ldi	r31, 0xFF	; 255
    102c:	ef 1a       	sub	r14, r31
    102e:	ff 0a       	sbc	r15, r31
	// Read V_CAL
	printPGMStr(STR_VCAL);
	fprintf(&USBSerialStream, "%i:%.1f", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_V_CAL)), EEPROM_Read_V_CAL());
	// Read I_CAL
	printPGMStr(STR_ICAL);
	for (uint8_t i = 0; i < PORT_CNT; i++) {
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	3c e2       	ldi	r19, 0x2C	; 44
    103c:	e3 16       	cp	r14, r19
    103e:	f1 04       	cpc	r15, r1
    1040:	61 f6       	brne	.-104    	; 0xfda <__stack+0x4db>
		fprintf(&USBSerialStream, "%i:%.1f ", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_I_CAL + i)), EEPROM_Read_I_CAL(i));
	}
	
	// Read Port Cycle Time
	printPGMStr(STR_PCYCLE_Time);
    1042:	88 ee       	ldi	r24, 0xE8	; 232
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	3b da       	rcall	.-2954   	; 0x4be <printPGMStr>
	fprintf(&USBSerialStream, "%iS", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_CYCLE_TIME)));
    1048:	81 e1       	ldi	r24, 0x11	; 17
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__eerd_byte_m32u4>
    1050:	1f 92       	push	r1
    1052:	8f 93       	push	r24
    1054:	85 e0       	ldi	r24, 0x05	; 5
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	9f 93       	push	r25
    105a:	8f 93       	push	r24
    105c:	df 92       	push	r13
    105e:	cf 92       	push	r12
    1060:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
	
	// Read Port Limits
	printPGMStr(STR_Port_Limit);
    1064:	89 ed       	ldi	r24, 0xD9	; 217
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	2a da       	rcall	.-2988   	; 0x4be <printPGMStr>
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	28 e1       	ldi	r18, 0x18	; 24
    1078:	a2 2e       	mov	r10, r18
    107a:	b1 2c       	mov	r11, r1
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		fprintf(&USBSerialStream, "%i:%i ", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_LIMIT + i)), EEPROM_Read_Port_Limit(i));
    107c:	39 e0       	ldi	r19, 0x09	; 9
    107e:	c3 2e       	mov	r12, r19
    1080:	32 e0       	ldi	r19, 0x02	; 2
    1082:	d3 2e       	mov	r13, r19
    1084:	41 e4       	ldi	r20, 0x41	; 65
    1086:	e4 2e       	mov	r14, r20
    1088:	42 e0       	ldi	r20, 0x02	; 2
    108a:	f4 2e       	mov	r15, r20
	eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_P0NAME+(port*16)+15), 0);
}

// Stored as amps*10 so 50==5.0A
static inline uint8_t EEPROM_Read_Port_Limit(uint8_t port) {
	uint8_t limit = eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_LIMIT+(port)));
    108c:	c5 01       	movw	r24, r10
    108e:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__eerd_byte_m32u4>
    1092:	98 2f       	mov	r25, r24
    1094:	85 36       	cpi	r24, 0x65	; 101
    1096:	08 f0       	brcs	.+2      	; 0x109a <__stack+0x59b>
    1098:	94 e6       	ldi	r25, 0x64	; 100
	fprintf(&USBSerialStream, "%iS", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_CYCLE_TIME)));
	
	// Read Port Limits
	printPGMStr(STR_Port_Limit);
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		fprintf(&USBSerialStream, "%i:%i ", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_LIMIT + i)), EEPROM_Read_Port_Limit(i));
    109a:	1f 92       	push	r1
    109c:	9f 93       	push	r25
    109e:	1f 92       	push	r1
    10a0:	8f 93       	push	r24
    10a2:	df 92       	push	r13
    10a4:	cf 92       	push	r12
    10a6:	ff 92       	push	r15
    10a8:	ef 92       	push	r14
    10aa:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
    10ae:	4f ef       	ldi	r20, 0xFF	; 255
    10b0:	a4 1a       	sub	r10, r20
    10b2:	b4 0a       	sbc	r11, r20
	printPGMStr(STR_PCYCLE_Time);
	fprintf(&USBSerialStream, "%iS", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_CYCLE_TIME)));
	
	// Read Port Limits
	printPGMStr(STR_Port_Limit);
	for (uint8_t i = 0; i < PORT_CNT; i++) {
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	94 e2       	ldi	r25, 0x24	; 36
    10c0:	a9 16       	cp	r10, r25
    10c2:	b1 04       	cpc	r11, r1
    10c4:	19 f7       	brne	.-58     	; 0x108c <__stack+0x58d>
		fprintf(&USBSerialStream, "%i:%i ", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_LIMIT + i)), EEPROM_Read_Port_Limit(i));
	}
	
	// Read Port Cutoffs
	printPGMStr(STR_Port_CutOff);
    10c6:	89 ec       	ldi	r24, 0xC9	; 201
    10c8:	91 e0       	ldi	r25, 0x01	; 1
    10ca:	f9 d9       	rcall	.-3086   	; 0x4be <printPGMStr>
    10cc:	e1 2c       	mov	r14, r1
    10ce:	ff 24       	eor	r15, r15
    10d0:	f3 94       	inc	r15
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		fprintf(&USBSerialStream, "%u:%.1f ", eeprom_read_word((uint16_t*)(EEPROM_OFFSET_V_CUTOFF + i*2)), EEPROM_Read_Port_CutOff(i));
    10d2:	80 e1       	ldi	r24, 0x10	; 16
    10d4:	88 2e       	mov	r8, r24
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	98 2e       	mov	r9, r24
    10da:	91 e4       	ldi	r25, 0x41	; 65
    10dc:	a9 2e       	mov	r10, r25
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	b9 2e       	mov	r11, r25
	eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_LIMIT+(port)), limit);
}

// Reads the cutoff voltage from EEPROM. Voltage = value/100
static inline float EEPROM_Read_Port_CutOff(uint8_t port) {
	float cutoff = eeprom_read_word((uint16_t*)(EEPROM_OFFSET_V_CUTOFF+(port*2))) / 100.0;
    10e2:	c7 01       	movw	r24, r14
    10e4:	0e 94 c8 1a 	call	0x3590	; 0x3590 <__eerd_word_m32u4>
    10e8:	6c 01       	movw	r12, r24
    10ea:	bc 01       	movw	r22, r24
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__floatunsisf>
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	48 ec       	ldi	r20, 0xC8	; 200
    10fa:	52 e4       	ldi	r21, 0x42	; 66
    10fc:	0e 94 37 13 	call	0x266e	; 0x266e <__divsf3>
    1100:	76 2e       	mov	r7, r22
    1102:	67 2e       	mov	r6, r23
    1104:	58 2e       	mov	r5, r24
    1106:	49 2e       	mov	r4, r25
	if (cutoff > VMAX) { cutoff = 0; }
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e2       	ldi	r20, 0x20	; 32
    110e:	52 e4       	ldi	r21, 0x42	; 66
    1110:	0e 94 82 14 	call	0x2904	; 0x2904 <__gesf2>
    1114:	18 16       	cp	r1, r24
    1116:	24 f4       	brge	.+8      	; 0x1120 <__stack+0x621>
    1118:	71 2c       	mov	r7, r1
    111a:	61 2c       	mov	r6, r1
    111c:	51 2c       	mov	r5, r1
    111e:	41 2c       	mov	r4, r1
	}
	
	// Read Port Cutoffs
	printPGMStr(STR_Port_CutOff);
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		fprintf(&USBSerialStream, "%u:%.1f ", eeprom_read_word((uint16_t*)(EEPROM_OFFSET_V_CUTOFF + i*2)), EEPROM_Read_Port_CutOff(i));
    1120:	4f 92       	push	r4
    1122:	5f 92       	push	r5
    1124:	6f 92       	push	r6
    1126:	7f 92       	push	r7
    1128:	df 92       	push	r13
    112a:	cf 92       	push	r12
    112c:	9f 92       	push	r9
    112e:	8f 92       	push	r8
    1130:	bf 92       	push	r11
    1132:	af 92       	push	r10
    1134:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
    1138:	a2 e0       	ldi	r26, 0x02	; 2
    113a:	ea 0e       	add	r14, r26
    113c:	f1 1c       	adc	r15, r1
		fprintf(&USBSerialStream, "%i:%i ", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_LIMIT + i)), EEPROM_Read_Port_Limit(i));
	}
	
	// Read Port Cutoffs
	printPGMStr(STR_Port_CutOff);
	for (uint8_t i = 0; i < PORT_CNT; i++) {
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	f8 e1       	ldi	r31, 0x18	; 24
    114a:	ef 16       	cp	r14, r31
    114c:	f1 e0       	ldi	r31, 0x01	; 1
    114e:	ff 06       	cpc	r15, r31
    1150:	41 f6       	brne	.-112    	; 0x10e2 <__stack+0x5e3>
		fprintf(&USBSerialStream, "%u:%.1f ", eeprom_read_word((uint16_t*)(EEPROM_OFFSET_V_CUTOFF + i*2)), EEPROM_Read_Port_CutOff(i));
	}
	// Read Port Cutons
	printPGMStr(STR_Port_CutOn);
    1152:	8a eb       	ldi	r24, 0xBA	; 186
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	b3 d9       	rcall	.-3226   	; 0x4be <printPGMStr>
    1158:	e0 e1       	ldi	r30, 0x10	; 16
    115a:	ee 2e       	mov	r14, r30
    115c:	ff 24       	eor	r15, r15
    115e:	f3 94       	inc	r15
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		fprintf(&USBSerialStream, "%u:%.1f ", eeprom_read_word((uint16_t*)(EEPROM_OFFSET_V_CUTON + i*2)), EEPROM_Read_Port_CutOn(i));
    1160:	f0 e1       	ldi	r31, 0x10	; 16
    1162:	8f 2e       	mov	r8, r31
    1164:	f2 e0       	ldi	r31, 0x02	; 2
    1166:	9f 2e       	mov	r9, r31
    1168:	a1 e4       	ldi	r26, 0x41	; 65
    116a:	aa 2e       	mov	r10, r26
    116c:	a2 e0       	ldi	r26, 0x02	; 2
    116e:	ba 2e       	mov	r11, r26
	eeprom_update_word((uint16_t*)(EEPROM_OFFSET_V_CUTOFF+(port*2)), cutoff);
}

// Reads the cuton voltage from EEPROM. Voltage = value/100
static inline float EEPROM_Read_Port_CutOn(uint8_t port) {
	float cuton = eeprom_read_word((uint16_t*)(EEPROM_OFFSET_V_CUTON+(port*2))) / 100.0;
    1170:	c7 01       	movw	r24, r14
    1172:	0e 94 c8 1a 	call	0x3590	; 0x3590 <__eerd_word_m32u4>
    1176:	6c 01       	movw	r12, r24
    1178:	bc 01       	movw	r22, r24
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__floatunsisf>
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	48 ec       	ldi	r20, 0xC8	; 200
    1188:	52 e4       	ldi	r21, 0x42	; 66
    118a:	0e 94 37 13 	call	0x266e	; 0x266e <__divsf3>
    118e:	76 2e       	mov	r7, r22
    1190:	67 2e       	mov	r6, r23
    1192:	58 2e       	mov	r5, r24
    1194:	49 2e       	mov	r4, r25
	if (cuton > VMAX) { cuton = VMAX; }
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e2       	ldi	r20, 0x20	; 32
    119c:	52 e4       	ldi	r21, 0x42	; 66
    119e:	0e 94 82 14 	call	0x2904	; 0x2904 <__gesf2>
    11a2:	18 16       	cp	r1, r24
    11a4:	34 f4       	brge	.+12     	; 0x11b2 <__stack+0x6b3>
    11a6:	71 2c       	mov	r7, r1
    11a8:	61 2c       	mov	r6, r1
    11aa:	60 e2       	ldi	r22, 0x20	; 32
    11ac:	56 2e       	mov	r5, r22
    11ae:	72 e4       	ldi	r23, 0x42	; 66
    11b0:	47 2e       	mov	r4, r23
		fprintf(&USBSerialStream, "%u:%.1f ", eeprom_read_word((uint16_t*)(EEPROM_OFFSET_V_CUTOFF + i*2)), EEPROM_Read_Port_CutOff(i));
	}
	// Read Port Cutons
	printPGMStr(STR_Port_CutOn);
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		fprintf(&USBSerialStream, "%u:%.1f ", eeprom_read_word((uint16_t*)(EEPROM_OFFSET_V_CUTON + i*2)), EEPROM_Read_Port_CutOn(i));
    11b2:	4f 92       	push	r4
    11b4:	5f 92       	push	r5
    11b6:	6f 92       	push	r6
    11b8:	7f 92       	push	r7
    11ba:	df 92       	push	r13
    11bc:	cf 92       	push	r12
    11be:	9f 92       	push	r9
    11c0:	8f 92       	push	r8
    11c2:	bf 92       	push	r11
    11c4:	af 92       	push	r10
    11c6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
    11ca:	22 e0       	ldi	r18, 0x02	; 2
    11cc:	e2 0e       	add	r14, r18
    11ce:	f1 1c       	adc	r15, r1
	for (uint8_t i = 0; i < PORT_CNT; i++) {
		fprintf(&USBSerialStream, "%u:%.1f ", eeprom_read_word((uint16_t*)(EEPROM_OFFSET_V_CUTOFF + i*2)), EEPROM_Read_Port_CutOff(i));
	}
	// Read Port Cutons
	printPGMStr(STR_Port_CutOn);
	for (uint8_t i = 0; i < PORT_CNT; i++) {
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	58 e2       	ldi	r21, 0x28	; 40
    11dc:	e5 16       	cp	r14, r21
    11de:	51 e0       	ldi	r21, 0x01	; 1
    11e0:	f5 06       	cpc	r15, r21
    11e2:	31 f6       	brne	.-116    	; 0x1170 <__stack+0x671>
		fprintf(&USBSerialStream, "%u:%.1f ", eeprom_read_word((uint16_t*)(EEPROM_OFFSET_V_CUTON + i*2)), EEPROM_Read_Port_CutOn(i));
	}
	
	// Read Port Names
	printPGMStr(PSTR("\r\nPNAMES: "));
    11e4:	8c ea       	ldi	r24, 0xAC	; 172
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	6a d9       	rcall	.-3372   	; 0x4be <printPGMStr>
    11ea:	50 e3       	ldi	r21, 0x30	; 48
    11ec:	e5 2e       	mov	r14, r21
    11ee:	f1 2c       	mov	r15, r1
}

// Reads the cuton voltage from EEPROM. Voltage = value/100
static inline float EEPROM_Read_Port_CutOn(uint8_t port) {
	float cuton = eeprom_read_word((uint16_t*)(EEPROM_OFFSET_V_CUTON+(port*2))) / 100.0;
	if (cuton > VMAX) { cuton = VMAX; }
    11f0:	c1 2c       	mov	r12, r1
    11f2:	d1 2c       	mov	r13, r1
	
	// Read Port Names
	printPGMStr(PSTR("\r\nPNAMES: "));
	for (int8_t i = -1; i < PORT_CNT; i++) {
		for (int8_t j = 0; j < 16; j++) {
			fputc(eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_P0NAME+(i*16)+j)), &USBSerialStream);
    11f4:	c6 01       	movw	r24, r12
    11f6:	8e 0d       	add	r24, r14
    11f8:	9f 1d       	adc	r25, r15
    11fa:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__eerd_byte_m32u4>
    11fe:	61 e4       	ldi	r22, 0x41	; 65
    1200:	72 e0       	ldi	r23, 0x02	; 2
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 03 1a 	call	0x3406	; 0x3406 <fputc>
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	c8 1a       	sub	r12, r24
    120c:	d8 0a       	sbc	r13, r24
	}
	
	// Read Port Names
	printPGMStr(PSTR("\r\nPNAMES: "));
	for (int8_t i = -1; i < PORT_CNT; i++) {
		for (int8_t j = 0; j < 16; j++) {
    120e:	90 e1       	ldi	r25, 0x10	; 16
    1210:	c9 16       	cp	r12, r25
    1212:	d1 04       	cpc	r13, r1
    1214:	79 f7       	brne	.-34     	; 0x11f4 <__stack+0x6f5>
			fputc(eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_P0NAME+(i*16)+j)), &USBSerialStream);
		}
		fputc(' ', &USBSerialStream);
    1216:	61 e4       	ldi	r22, 0x41	; 65
    1218:	72 e0       	ldi	r23, 0x02	; 2
    121a:	80 e2       	ldi	r24, 0x20	; 32
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 03 1a 	call	0x3406	; 0x3406 <fputc>
    1222:	a0 e1       	ldi	r26, 0x10	; 16
    1224:	ea 0e       	add	r14, r26
    1226:	f1 1c       	adc	r15, r1
		fprintf(&USBSerialStream, "%u:%.1f ", eeprom_read_word((uint16_t*)(EEPROM_OFFSET_V_CUTON + i*2)), EEPROM_Read_Port_CutOn(i));
	}
	
	// Read Port Names
	printPGMStr(PSTR("\r\nPNAMES: "));
	for (int8_t i = -1; i < PORT_CNT; i++) {
    1228:	e1 14       	cp	r14, r1
    122a:	b1 e0       	ldi	r27, 0x01	; 1
    122c:	fb 06       	cpc	r15, r27
    122e:	01 f7       	brne	.-64     	; 0x11f0 <__stack+0x6f1>
    1230:	7c c3       	rjmp	.+1784   	; 0x192a <__stack+0xe2b>
	if (strncasecmp_P(DATA_IN, STR_Command_DEBUG, 10) == 0) {
		DEBUG_Dump();
		return;
	}
	// PON - Turn on a port or list of ports
	if (strncasecmp_P(DATA_IN, STR_Command_PON, 3) == 0) {
    1232:	43 e0       	ldi	r20, 0x03	; 3
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	63 e7       	ldi	r22, 0x73	; 115
    1238:	71 e0       	ldi	r23, 0x01	; 1
    123a:	87 e6       	ldi	r24, 0x67	; 103
    123c:	92 e0       	ldi	r25, 0x02	; 2
    123e:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    1242:	89 2b       	or	r24, r25
    1244:	29 f4       	brne	.+10     	; 0x1250 <__stack+0x751>
		INPUT_Parse_args(&pd, DATA_IN + 3);
    1246:	6a e6       	ldi	r22, 0x6A	; 106
    1248:	72 e0       	ldi	r23, 0x02	; 2
    124a:	c8 01       	movw	r24, r16
    124c:	17 d9       	rcall	.-3538   	; 0x47c <INPUT_Parse_args>
    124e:	4b c0       	rjmp	.+150    	; 0x12e6 <__stack+0x7e7>
		PORT_Set_Ctl(&pd, 1);
		return;
	}
	// POFF - Turn off a port or a list of ports
	if (strncasecmp_P(DATA_IN, STR_Command_POFF, 4) == 0) {
    1250:	44 e0       	ldi	r20, 0x04	; 4
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	6e e6       	ldi	r22, 0x6E	; 110
    1256:	71 e0       	ldi	r23, 0x01	; 1
    1258:	87 e6       	ldi	r24, 0x67	; 103
    125a:	92 e0       	ldi	r25, 0x02	; 2
    125c:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    1260:	89 2b       	or	r24, r25
    1262:	41 f4       	brne	.+16     	; 0x1274 <__stack+0x775>
		INPUT_Parse_args(&pd, DATA_IN + 4);
    1264:	6b e6       	ldi	r22, 0x6B	; 107
    1266:	72 e0       	ldi	r23, 0x02	; 2
    1268:	c8 01       	movw	r24, r16
    126a:	08 d9       	rcall	.-3568   	; 0x47c <INPUT_Parse_args>
		PORT_Set_Ctl(&pd, 0);
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	c8 01       	movw	r24, r16
    1270:	39 d9       	rcall	.-3470   	; 0x4e4 <PORT_Set_Ctl>
    1272:	5b c3       	rjmp	.+1718   	; 0x192a <__stack+0xe2b>
		return;
	}
	// PCYCLE - Power cycle a port or list of ports. Time is defined by EEPROM_Read_PCycle_Time().
	if (strncasecmp_P(DATA_IN, STR_Command_PCYCLE, 6) == 0) {
    1274:	46 e0       	ldi	r20, 0x06	; 6
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	67 e6       	ldi	r22, 0x67	; 103
    127a:	71 e0       	ldi	r23, 0x01	; 1
    127c:	87 e6       	ldi	r24, 0x67	; 103
    127e:	92 e0       	ldi	r25, 0x02	; 2
    1280:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    1284:	89 2b       	or	r24, r25
    1286:	89 f5       	brne	.+98     	; 0x12ea <__stack+0x7eb>
		INPUT_Parse_args(&pd, DATA_IN + 6);
    1288:	6d e6       	ldi	r22, 0x6D	; 109
    128a:	72 e0       	ldi	r23, 0x02	; 2
    128c:	c8 01       	movw	r24, r16
    128e:	f6 d8       	rcall	.-3604   	; 0x47c <INPUT_Parse_args>
		
		PORT_Set_Ctl(&pd, 0);
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	c8 01       	movw	r24, r16
    1294:	27 d9       	rcall	.-3506   	; 0x4e4 <PORT_Set_Ctl>

		fprintf(&USBSerialStream, "\r\n");
    1296:	61 e4       	ldi	r22, 0x41	; 65
    1298:	72 e0       	ldi	r23, 0x02	; 2
    129a:	89 e1       	ldi	r24, 0x19	; 25
    129c:	92 e0       	ldi	r25, 0x02	; 2
    129e:	0e 94 35 1a 	call	0x346a	; 0x346a <fputs>
		run_lufa();
    12a2:	c5 da       	rcall	.-2678   	; 0x82e <run_lufa>
		for (uint16_t i = 0; i < (EEPROM_Read_PCycle_Time()); i++) {
    12a4:	e1 2c       	mov	r14, r1
    12a6:	f1 2c       	mov	r15, r1
}

// Read PCYCLE_TIME from EEPROM
// Stored as Seconds
static inline uint8_t EEPROM_Read_PCycle_Time(void) {
	uint8_t PCYCLE_TIME = eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_CYCLE_TIME));
    12a8:	81 e1       	ldi	r24, 0x11	; 17
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__eerd_byte_m32u4>
	if (PCYCLE_TIME > PCYCLE_MAX_TIME) PCYCLE_TIME = 1;
    12b0:	8f 31       	cpi	r24, 0x1F	; 31
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <__stack+0x7b7>
    12b4:	81 e0       	ldi	r24, 0x01	; 1
		
		PORT_Set_Ctl(&pd, 0);

		fprintf(&USBSerialStream, "\r\n");
		run_lufa();
		for (uint16_t i = 0; i < (EEPROM_Read_PCycle_Time()); i++) {
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	e8 16       	cp	r14, r24
    12ba:	f9 06       	cpc	r15, r25
    12bc:	a0 f4       	brcc	.+40     	; 0x12e6 <__stack+0x7e7>
    12be:	ef e3       	ldi	r30, 0x3F	; 63
    12c0:	fd e0       	ldi	r31, 0x0D	; 13
    12c2:	23 e0       	ldi	r18, 0x03	; 3
    12c4:	e1 50       	subi	r30, 0x01	; 1
    12c6:	f0 40       	sbci	r31, 0x00	; 0
    12c8:	20 40       	sbci	r18, 0x00	; 0
    12ca:	e1 f7       	brne	.-8      	; 0x12c4 <__stack+0x7c5>
    12cc:	00 c0       	rjmp	.+0      	; 0x12ce <__stack+0x7cf>
    12ce:	00 00       	nop
			_delay_ms(1000);
			fputc('.', &USBSerialStream);
    12d0:	61 e4       	ldi	r22, 0x41	; 65
    12d2:	72 e0       	ldi	r23, 0x02	; 2
    12d4:	8e e2       	ldi	r24, 0x2E	; 46
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 03 1a 	call	0x3406	; 0x3406 <fputc>
			run_lufa();
    12dc:	a8 da       	rcall	.-2736   	; 0x82e <run_lufa>
		
		PORT_Set_Ctl(&pd, 0);

		fprintf(&USBSerialStream, "\r\n");
		run_lufa();
		for (uint16_t i = 0; i < (EEPROM_Read_PCycle_Time()); i++) {
    12de:	3f ef       	ldi	r19, 0xFF	; 255
    12e0:	e3 1a       	sub	r14, r19
    12e2:	f3 0a       	sbc	r15, r19
    12e4:	e1 cf       	rjmp	.-62     	; 0x12a8 <__stack+0x7a9>
			_delay_ms(1000);
			fputc('.', &USBSerialStream);
			run_lufa();
		}

		PORT_Set_Ctl(&pd, 1);
    12e6:	61 e0       	ldi	r22, 0x01	; 1
    12e8:	c2 cf       	rjmp	.-124    	; 0x126e <__stack+0x76f>
		
		return;
	}
	// SETCYCLE - Set PCYCLE_TIME and store in EEPROM
	if (strncasecmp_P(DATA_IN, STR_Command_SETCYCLE, 8) == 0) {
    12ea:	48 e0       	ldi	r20, 0x08	; 8
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	6e e5       	ldi	r22, 0x5E	; 94
    12f0:	71 e0       	ldi	r23, 0x01	; 1
    12f2:	87 e6       	ldi	r24, 0x67	; 103
    12f4:	92 e0       	ldi	r25, 0x02	; 2
    12f6:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    12fa:	89 2b       	or	r24, r25
    12fc:	41 f5       	brne	.+80     	; 0x134e <__stack+0x84f>
		uint16_t temp_set_time = atoi(DATA_IN + 8);
    12fe:	8f e6       	ldi	r24, 0x6F	; 111
    1300:	92 e0       	ldi	r25, 0x02	; 2
    1302:	0e 94 c9 18 	call	0x3192	; 0x3192 <atoi>
    1306:	68 2f       	mov	r22, r24
    1308:	d9 2e       	mov	r13, r25
    130a:	e8 2e       	mov	r14, r24
    130c:	f9 2e       	mov	r15, r25
		if (temp_set_time <= PCYCLE_MAX_TIME) {
    130e:	4f e1       	ldi	r20, 0x1F	; 31
    1310:	e4 16       	cp	r14, r20
    1312:	f1 04       	cpc	r15, r1
    1314:	e0 f4       	brcc	.+56     	; 0x134e <__stack+0x84f>
			printPGMStr(STR_PCYCLE_Time);
    1316:	88 ee       	ldi	r24, 0xE8	; 232
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	6c 8b       	std	Y+20, r22	; 0x14
    131c:	d0 d8       	rcall	.-3680   	; 0x4be <printPGMStr>
			fprintf(&USBSerialStream, "%i", temp_set_time);
    131e:	df 92       	push	r13
    1320:	ef 92       	push	r14
    1322:	2e ed       	ldi	r18, 0xDE	; 222
    1324:	31 e0       	ldi	r19, 0x01	; 1
    1326:	3f 93       	push	r19
    1328:	2f 93       	push	r18
    132a:	21 e4       	ldi	r18, 0x41	; 65
    132c:	32 e0       	ldi	r19, 0x02	; 2
    132e:	3f 93       	push	r19
    1330:	2f 93       	push	r18
    1332:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
	if (PCYCLE_TIME > PCYCLE_MAX_TIME) PCYCLE_TIME = 1;
	return PCYCLE_TIME;
}
// Write the PCYCLE_TIME to EEPROM
static inline void EEPROM_Write_PCycle_Time(uint8_t time) {
	eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_CYCLE_TIME), time);
    1336:	6c 89       	ldd	r22, Y+20	; 0x14
    1338:	81 e1       	ldi	r24, 0x11	; 17
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 cd 1a 	call	0x359a	; 0x359a <__eeupd_byte_m32u4>
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	ee c2       	rjmp	.+1500   	; 0x192a <__stack+0xe2b>
			EEPROM_Write_PCycle_Time((uint8_t)temp_set_time);
			return;
		}
	}
	// SETDEF - Set the port default state
	if (strncasecmp_P(DATA_IN, STR_Command_SETDEF, 6) == 0) {
    134e:	46 e0       	ldi	r20, 0x06	; 6
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	67 e5       	ldi	r22, 0x57	; 87
    1354:	71 e0       	ldi	r23, 0x01	; 1
    1356:	87 e6       	ldi	r24, 0x67	; 103
    1358:	92 e0       	ldi	r25, 0x02	; 2
    135a:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    135e:	89 2b       	or	r24, r25
    1360:	09 f0       	breq	.+2      	; 0x1364 <__stack+0x865>
    1362:	73 c0       	rjmp	.+230    	; 0x144a <__stack+0x94b>
		char *str = DATA_IN + 6;
		uint8_t state = 255;
		if (strncasecmp_P(str, PSTR("ON"), 2) == 0) {
    1364:	42 e0       	ldi	r20, 0x02	; 2
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	6e e0       	ldi	r22, 0x0E	; 14
    136a:	71 e0       	ldi	r23, 0x01	; 1
    136c:	8d e6       	ldi	r24, 0x6D	; 109
    136e:	92 e0       	ldi	r25, 0x02	; 2
    1370:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    1374:	89 2b       	or	r24, r25
    1376:	19 f0       	breq	.+6      	; 0x137e <__stack+0x87f>
		}
	}
	// SETDEF - Set the port default state
	if (strncasecmp_P(DATA_IN, STR_Command_SETDEF, 6) == 0) {
		char *str = DATA_IN + 6;
		uint8_t state = 255;
    1378:	99 24       	eor	r9, r9
    137a:	9a 94       	dec	r9
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <__stack+0x883>
		if (strncasecmp_P(str, PSTR("ON"), 2) == 0) {
			state = 1;
    137e:	99 24       	eor	r9, r9
    1380:	93 94       	inc	r9
		}
		if (strncasecmp_P(str, PSTR("OFF"), 3) == 0) {
    1382:	43 e0       	ldi	r20, 0x03	; 3
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	6a e0       	ldi	r22, 0x0A	; 10
    1388:	71 e0       	ldi	r23, 0x01	; 1
    138a:	8d e6       	ldi	r24, 0x6D	; 109
    138c:	92 e0       	ldi	r25, 0x02	; 2
    138e:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    1392:	89 2b       	or	r24, r25
    1394:	31 f0       	breq	.+12     	; 0x13a2 <__stack+0x8a3>
			state = 0;
		}
		if (state <= 1) {
    1396:	51 e0       	ldi	r21, 0x01	; 1
    1398:	95 12       	cpse	r9, r21
    139a:	57 c0       	rjmp	.+174    	; 0x144a <__stack+0x94b>
			INPUT_Parse_args(&pd, (state ? DATA_IN+8 : DATA_IN+9));
    139c:	6f e6       	ldi	r22, 0x6F	; 111
    139e:	72 e0       	ldi	r23, 0x02	; 2
    13a0:	03 c0       	rjmp	.+6      	; 0x13a8 <__stack+0x8a9>
		uint8_t state = 255;
		if (strncasecmp_P(str, PSTR("ON"), 2) == 0) {
			state = 1;
		}
		if (strncasecmp_P(str, PSTR("OFF"), 3) == 0) {
			state = 0;
    13a2:	91 2c       	mov	r9, r1
		}
		if (state <= 1) {
			INPUT_Parse_args(&pd, (state ? DATA_IN+8 : DATA_IN+9));
    13a4:	60 e7       	ldi	r22, 0x70	; 112
    13a6:	72 e0       	ldi	r23, 0x02	; 2
    13a8:	c8 01       	movw	r24, r16
    13aa:	68 d8       	rcall	.-3888   	; 0x47c <INPUT_Parse_args>
    13ac:	3f e4       	ldi	r19, 0x4F	; 79
    13ae:	e3 2e       	mov	r14, r19
    13b0:	32 e0       	ldi	r19, 0x02	; 2
    13b2:	f3 2e       	mov	r15, r19
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
						PORT_BOOT_STATE[i] &= 0b11111110;
					}
					EEPROM_Write_Port_Boot_State(i, PORT_BOOT_STATE[i]);
				
					printPGMStr(STR_Port_Default);
					fprintf(&USBSerialStream, "%i ", i+1);
    13b8:	41 e4       	ldi	r20, 0x41	; 65
    13ba:	a4 2e       	mov	r10, r20
    13bc:	42 e0       	ldi	r20, 0x02	; 2
    13be:	b4 2e       	mov	r11, r20
			state = 0;
		}
		if (state <= 1) {
			INPUT_Parse_args(&pd, (state ? DATA_IN+8 : DATA_IN+9));
			for (uint8_t i = 0; i < PORT_CNT; i++) {
				if (pd & (1 << i)) {
    13c0:	21 e0       	ldi	r18, 0x01	; 1
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	08 2e       	mov	r0, r24
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <__stack+0x8cd>
    13c8:	22 0f       	add	r18, r18
    13ca:	33 1f       	adc	r19, r19
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <__stack+0x8c9>
    13d0:	49 81       	ldd	r20, Y+1	; 0x01
    13d2:	5a 81       	ldd	r21, Y+2	; 0x02
    13d4:	24 23       	and	r18, r20
    13d6:	35 23       	and	r19, r21
    13d8:	dc 01       	movw	r26, r24
    13da:	11 96       	adiw	r26, 0x01	; 1
    13dc:	6d 01       	movw	r12, r26
    13de:	23 2b       	or	r18, r19
    13e0:	59 f1       	breq	.+86     	; 0x1438 <__stack+0x939>
					if (state == 1) {
    13e2:	b1 e0       	ldi	r27, 0x01	; 1
    13e4:	9b 12       	cpse	r9, r27
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <__stack+0x8f3>
						PORT_BOOT_STATE[i] |= 0b00000001;
    13e8:	f7 01       	movw	r30, r14
    13ea:	20 81       	ld	r18, Z
    13ec:	21 60       	ori	r18, 0x01	; 1
    13ee:	20 83       	st	Z, r18
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <__stack+0x8fb>
					}else{
						PORT_BOOT_STATE[i] &= 0b11111110;
    13f2:	d7 01       	movw	r26, r14
    13f4:	2c 91       	ld	r18, X
    13f6:	2e 7f       	andi	r18, 0xFE	; 254
    13f8:	2c 93       	st	X, r18
	if (state == 255) state = 1;
	return state;
}
// Write the default port state setting
static inline void EEPROM_Write_Port_Boot_State(uint8_t port, uint8_t state) {
	eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_PORT_DEFAULTS + port), state);
    13fa:	f7 01       	movw	r30, r14
    13fc:	60 81       	ld	r22, Z
    13fe:	0e 94 cd 1a 	call	0x359a	; 0x359a <__eeupd_byte_m32u4>
					}else{
						PORT_BOOT_STATE[i] &= 0b11111110;
					}
					EEPROM_Write_Port_Boot_State(i, PORT_BOOT_STATE[i]);
				
					printPGMStr(STR_Port_Default);
    1402:	88 ef       	ldi	r24, 0xF8	; 248
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	5b d8       	rcall	.-3914   	; 0x4be <printPGMStr>
					fprintf(&USBSerialStream, "%i ", i+1);
    1408:	df 92       	push	r13
    140a:	cf 92       	push	r12
    140c:	ad e1       	ldi	r26, 0x1D	; 29
    140e:	b2 e0       	ldi	r27, 0x02	; 2
    1410:	bf 93       	push	r27
    1412:	af 93       	push	r26
    1414:	bf 92       	push	r11
    1416:	af 92       	push	r10
    1418:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
					printPGMStr(state ? STR_Enabled : STR_Disabled);
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	99 20       	and	r9, r9
    142a:	19 f0       	breq	.+6      	; 0x1432 <__stack+0x933>
    142c:	85 e5       	ldi	r24, 0x55	; 85
    142e:	92 e0       	ldi	r25, 0x02	; 2
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <__stack+0x937>
    1432:	83 e4       	ldi	r24, 0x43	; 67
    1434:	92 e0       	ldi	r25, 0x02	; 2
    1436:	43 d8       	rcall	.-3962   	; 0x4be <printPGMStr>
    1438:	c6 01       	movw	r24, r12
    143a:	ff ef       	ldi	r31, 0xFF	; 255
    143c:	ef 1a       	sub	r14, r31
    143e:	ff 0a       	sbc	r15, r31
		if (strncasecmp_P(str, PSTR("OFF"), 3) == 0) {
			state = 0;
		}
		if (state <= 1) {
			INPUT_Parse_args(&pd, (state ? DATA_IN+8 : DATA_IN+9));
			for (uint8_t i = 0; i < PORT_CNT; i++) {
    1440:	8c 30       	cpi	r24, 0x0C	; 12
    1442:	91 05       	cpc	r25, r1
    1444:	09 f0       	breq	.+2      	; 0x1448 <__stack+0x949>
    1446:	bc cf       	rjmp	.-136    	; 0x13c0 <__stack+0x8c1>
    1448:	70 c2       	rjmp	.+1248   	; 0x192a <__stack+0xe2b>
			}
			return;
		}
	}
	// VCTL - Enable/Disable Voltage Control
	if (strncasecmp_P(DATA_IN, STR_Command_VCTL, 4) == 0) {
    144a:	44 e0       	ldi	r20, 0x04	; 4
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	69 e2       	ldi	r22, 0x29	; 41
    1450:	71 e0       	ldi	r23, 0x01	; 1
    1452:	87 e6       	ldi	r24, 0x67	; 103
    1454:	92 e0       	ldi	r25, 0x02	; 2
    1456:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    145a:	89 2b       	or	r24, r25
    145c:	09 f0       	breq	.+2      	; 0x1460 <__stack+0x961>
    145e:	87 c0       	rjmp	.+270    	; 0x156e <__stack+0xa6f>
		char *str = DATA_IN + 4;
		uint8_t setting = 255;
		if (strncasecmp_P(str, PSTR("ON"), 2) == 0) {
    1460:	42 e0       	ldi	r20, 0x02	; 2
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	67 e0       	ldi	r22, 0x07	; 7
    1466:	71 e0       	ldi	r23, 0x01	; 1
    1468:	8b e6       	ldi	r24, 0x6B	; 107
    146a:	92 e0       	ldi	r25, 0x02	; 2
    146c:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    1470:	89 2b       	or	r24, r25
    1472:	19 f0       	breq	.+6      	; 0x147a <__stack+0x97b>
		}
	}
	// VCTL - Enable/Disable Voltage Control
	if (strncasecmp_P(DATA_IN, STR_Command_VCTL, 4) == 0) {
		char *str = DATA_IN + 4;
		uint8_t setting = 255;
    1474:	99 24       	eor	r9, r9
    1476:	9a 94       	dec	r9
    1478:	02 c0       	rjmp	.+4      	; 0x147e <__stack+0x97f>
		if (strncasecmp_P(str, PSTR("ON"), 2) == 0) {
			setting = 1;
    147a:	99 24       	eor	r9, r9
    147c:	93 94       	inc	r9
		}
		if (strncasecmp_P(str, PSTR("OFF"), 3) == 0) {
    147e:	43 e0       	ldi	r20, 0x03	; 3
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	63 e0       	ldi	r22, 0x03	; 3
    1484:	71 e0       	ldi	r23, 0x01	; 1
    1486:	8b e6       	ldi	r24, 0x6B	; 107
    1488:	92 e0       	ldi	r25, 0x02	; 2
    148a:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    148e:	89 2b       	or	r24, r25
    1490:	31 f0       	breq	.+12     	; 0x149e <__stack+0x99f>
			setting = 0;
		}
		if (setting <= 1) {
    1492:	21 e0       	ldi	r18, 0x01	; 1
    1494:	92 12       	cpse	r9, r18
    1496:	6b c0       	rjmp	.+214    	; 0x156e <__stack+0xa6f>
			INPUT_Parse_args(&pd, (setting ? DATA_IN+6 : DATA_IN+7));
    1498:	6d e6       	ldi	r22, 0x6D	; 109
    149a:	72 e0       	ldi	r23, 0x02	; 2
    149c:	03 c0       	rjmp	.+6      	; 0x14a4 <__stack+0x9a5>
		uint8_t setting = 255;
		if (strncasecmp_P(str, PSTR("ON"), 2) == 0) {
			setting = 1;
		}
		if (strncasecmp_P(str, PSTR("OFF"), 3) == 0) {
			setting = 0;
    149e:	91 2c       	mov	r9, r1
		}
		if (setting <= 1) {
			INPUT_Parse_args(&pd, (setting ? DATA_IN+6 : DATA_IN+7));
    14a0:	6e e6       	ldi	r22, 0x6E	; 110
    14a2:	72 e0       	ldi	r23, 0x02	; 2
    14a4:	c8 01       	movw	r24, r16
    14a6:	0e 94 3e 02 	call	0x47c	; 0x47c <INPUT_Parse_args>
    14aa:	9f e4       	ldi	r25, 0x4F	; 79
    14ac:	e9 2e       	mov	r14, r25
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	f9 2e       	mov	r15, r25
    14b2:	2b e5       	ldi	r18, 0x5B	; 91
    14b4:	a2 2e       	mov	r10, r18
    14b6:	22 e0       	ldi	r18, 0x02	; 2
    14b8:	b2 2e       	mov	r11, r18
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
			for (uint8_t i = 0; i < PORT_CNT; i++) {
				if (pd & (1 << i)) {
    14be:	21 e0       	ldi	r18, 0x01	; 1
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	08 2e       	mov	r0, r24
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <__stack+0x9cb>
    14c6:	22 0f       	add	r18, r18
    14c8:	33 1f       	adc	r19, r19
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <__stack+0x9c7>
    14ce:	49 81       	ldd	r20, Y+1	; 0x01
    14d0:	5a 81       	ldd	r21, Y+2	; 0x02
    14d2:	24 23       	and	r18, r20
    14d4:	35 23       	and	r19, r21
    14d6:	ac 01       	movw	r20, r24
    14d8:	4f 5f       	subi	r20, 0xFF	; 255
    14da:	5f 4f       	sbci	r21, 0xFF	; 255
    14dc:	6a 01       	movw	r12, r20
    14de:	23 2b       	or	r18, r19
    14e0:	d1 f1       	breq	.+116    	; 0x1556 <__stack+0xa57>
					if (setting == 1) {
    14e2:	51 e0       	ldi	r21, 0x01	; 1
						PORT_BOOT_STATE[i] |= 0b00000010;
    14e4:	d7 01       	movw	r26, r14
    14e6:	2c 91       	ld	r18, X
		}
		if (setting <= 1) {
			INPUT_Parse_args(&pd, (setting ? DATA_IN+6 : DATA_IN+7));
			for (uint8_t i = 0; i < PORT_CNT; i++) {
				if (pd & (1 << i)) {
					if (setting == 1) {
    14e8:	95 12       	cpse	r9, r21
    14ea:	06 c0       	rjmp	.+12     	; 0x14f8 <__stack+0x9f9>
						PORT_BOOT_STATE[i] |= 0b00000010;
    14ec:	22 60       	ori	r18, 0x02	; 2
    14ee:	2c 93       	st	X, r18
						PORT_STATE[i] |= 0b00000100;
    14f0:	f5 01       	movw	r30, r10
    14f2:	20 81       	ld	r18, Z
    14f4:	24 60       	ori	r18, 0x04	; 4
    14f6:	05 c0       	rjmp	.+10     	; 0x1502 <__stack+0xa03>
					}else{
						PORT_BOOT_STATE[i] &= 0b11111101;
    14f8:	2d 7f       	andi	r18, 0xFD	; 253
    14fa:	2c 93       	st	X, r18
						PORT_STATE[i] &= 0b11111011;
    14fc:	f5 01       	movw	r30, r10
    14fe:	20 81       	ld	r18, Z
    1500:	2b 7f       	andi	r18, 0xFB	; 251
    1502:	20 83       	st	Z, r18
	if (state == 255) state = 1;
	return state;
}
// Write the default port state setting
static inline void EEPROM_Write_Port_Boot_State(uint8_t port, uint8_t state) {
	eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_PORT_DEFAULTS + port), state);
    1504:	d7 01       	movw	r26, r14
    1506:	6c 91       	ld	r22, X
    1508:	0e 94 cd 1a 	call	0x359a	; 0x359a <__eeupd_byte_m32u4>
						PORT_BOOT_STATE[i] &= 0b11111101;
						PORT_STATE[i] &= 0b11111011;
					}
					EEPROM_Write_Port_Boot_State(i, PORT_BOOT_STATE[i]);
					
					fprintf(&USBSerialStream, "\r\n");
    150c:	61 e4       	ldi	r22, 0x41	; 65
    150e:	72 e0       	ldi	r23, 0x02	; 2
    1510:	89 e1       	ldi	r24, 0x19	; 25
    1512:	92 e0       	ldi	r25, 0x02	; 2
    1514:	0e 94 35 1a 	call	0x346a	; 0x346a <fputs>
					printPGMStr(STR_Command_VCTL);
    1518:	89 e2       	ldi	r24, 0x29	; 41
    151a:	91 e0       	ldi	r25, 0x01	; 1
    151c:	0e 94 5f 02 	call	0x4be	; 0x4be <printPGMStr>
					fprintf(&USBSerialStream, " %i ", i+1);
    1520:	df 92       	push	r13
    1522:	cf 92       	push	r12
    1524:	ac e1       	ldi	r26, 0x1C	; 28
    1526:	b2 e0       	ldi	r27, 0x02	; 2
    1528:	bf 93       	push	r27
    152a:	af 93       	push	r26
    152c:	81 e4       	ldi	r24, 0x41	; 65
    152e:	92 e0       	ldi	r25, 0x02	; 2
    1530:	9f 93       	push	r25
    1532:	8f 93       	push	r24
    1534:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
					printPGMStr(setting ? STR_Enabled : STR_Disabled);
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	99 20       	and	r9, r9
    1546:	19 f0       	breq	.+6      	; 0x154e <__stack+0xa4f>
    1548:	85 e5       	ldi	r24, 0x55	; 85
    154a:	92 e0       	ldi	r25, 0x02	; 2
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <__stack+0xa53>
    154e:	83 e4       	ldi	r24, 0x43	; 67
    1550:	92 e0       	ldi	r25, 0x02	; 2
    1552:	0e 94 5f 02 	call	0x4be	; 0x4be <printPGMStr>
    1556:	c6 01       	movw	r24, r12
    1558:	ff ef       	ldi	r31, 0xFF	; 255
    155a:	ef 1a       	sub	r14, r31
    155c:	ff 0a       	sbc	r15, r31
    155e:	2f ef       	ldi	r18, 0xFF	; 255
    1560:	a2 1a       	sub	r10, r18
    1562:	b2 0a       	sbc	r11, r18
		if (strncasecmp_P(str, PSTR("OFF"), 3) == 0) {
			setting = 0;
		}
		if (setting <= 1) {
			INPUT_Parse_args(&pd, (setting ? DATA_IN+6 : DATA_IN+7));
			for (uint8_t i = 0; i < PORT_CNT; i++) {
    1564:	8c 30       	cpi	r24, 0x0C	; 12
    1566:	91 05       	cpc	r25, r1
    1568:	09 f0       	breq	.+2      	; 0x156c <__stack+0xa6d>
    156a:	a9 cf       	rjmp	.-174    	; 0x14be <__stack+0x9bf>
    156c:	de c1       	rjmp	.+956    	; 0x192a <__stack+0xe2b>
			}
			return;
		}
	}
	// SETVCTL - Set ON/OFF Voltages for Voltage Control
	if (strncasecmp_P(DATA_IN, STR_Command_SETVCTL, 7) == 0) {
    156e:	47 e0       	ldi	r20, 0x07	; 7
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	61 e2       	ldi	r22, 0x21	; 33
    1574:	71 e0       	ldi	r23, 0x01	; 1
    1576:	87 e6       	ldi	r24, 0x67	; 103
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    157e:	89 2b       	or	r24, r25
    1580:	09 f0       	breq	.+2      	; 0x1584 <__stack+0xa85>
    1582:	6d c0       	rjmp	.+218    	; 0x165e <__stack+0xb5f>
		char *str = DATA_IN + 7;
		int8_t portid;
		uint8_t setting = 255;
		if (strncasecmp_P(str, PSTR("ON"), 2) == 0) {
    1584:	42 e0       	ldi	r20, 0x02	; 2
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	71 e0       	ldi	r23, 0x01	; 1
    158c:	8e e6       	ldi	r24, 0x6E	; 110
    158e:	92 e0       	ldi	r25, 0x02	; 2
    1590:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    1594:	89 2b       	or	r24, r25
    1596:	39 f0       	breq	.+14     	; 0x15a6 <__stack+0xaa7>
	}
	// SETVCTL - Set ON/OFF Voltages for Voltage Control
	if (strncasecmp_P(DATA_IN, STR_Command_SETVCTL, 7) == 0) {
		char *str = DATA_IN + 7;
		int8_t portid;
		uint8_t setting = 255;
    1598:	dd 24       	eor	r13, r13
    159a:	da 94       	dec	r13
			return;
		}
	}
	// SETVCTL - Set ON/OFF Voltages for Voltage Control
	if (strncasecmp_P(DATA_IN, STR_Command_SETVCTL, 7) == 0) {
		char *str = DATA_IN + 7;
    159c:	8e e6       	ldi	r24, 0x6E	; 110
    159e:	e8 2e       	mov	r14, r24
    15a0:	82 e0       	ldi	r24, 0x02	; 2
    15a2:	f8 2e       	mov	r15, r24
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <__stack+0xab3>
		int8_t portid;
		uint8_t setting = 255;
		if (strncasecmp_P(str, PSTR("ON"), 2) == 0) {
			setting = 1;
    15a6:	dd 24       	eor	r13, r13
    15a8:	d3 94       	inc	r13
			str += 2;
    15aa:	b0 e7       	ldi	r27, 0x70	; 112
    15ac:	eb 2e       	mov	r14, r27
    15ae:	b2 e0       	ldi	r27, 0x02	; 2
    15b0:	fb 2e       	mov	r15, r27
		}
		if (strncasecmp_P(str, PSTR("OFF"), 3) == 0) {
    15b2:	43 e0       	ldi	r20, 0x03	; 3
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	6c ef       	ldi	r22, 0xFC	; 252
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	c7 01       	movw	r24, r14
    15bc:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    15c0:	89 2b       	or	r24, r25
    15c2:	29 f4       	brne	.+10     	; 0x15ce <__stack+0xacf>
			setting = 0;
			str += 3;
    15c4:	33 e0       	ldi	r19, 0x03	; 3
    15c6:	e3 0e       	add	r14, r19
    15c8:	f1 1c       	adc	r15, r1
		if (strncasecmp_P(str, PSTR("ON"), 2) == 0) {
			setting = 1;
			str += 2;
		}
		if (strncasecmp_P(str, PSTR("OFF"), 3) == 0) {
			setting = 0;
    15ca:	d1 2c       	mov	r13, r1
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <__stack+0xad5>
			str += 3;
		}
		if (setting <= 1) {
    15ce:	41 e0       	ldi	r20, 0x01	; 1
    15d0:	d4 12       	cpse	r13, r20
    15d2:	45 c0       	rjmp	.+138    	; 0x165e <__stack+0xb5f>
    15d4:	f7 01       	movw	r30, r14
			while (*str == ' ' || *str == '\t') str++;
    15d6:	21 91       	ld	r18, Z+
    15d8:	20 32       	cpi	r18, 0x20	; 32
    15da:	e9 f3       	breq	.-6      	; 0x15d6 <__stack+0xad7>
    15dc:	29 30       	cpi	r18, 0x09	; 9
    15de:	d9 f3       	breq	.-10     	; 0x15d6 <__stack+0xad7>
			if (*str >= '1' && *str <= '8') {
    15e0:	af ec       	ldi	r26, 0xCF	; 207
    15e2:	ca 2e       	mov	r12, r26
    15e4:	c2 0e       	add	r12, r18
    15e6:	57 e0       	ldi	r21, 0x07	; 7
    15e8:	5c 15       	cp	r21, r12
    15ea:	c8 f1       	brcs	.+114    	; 0x165e <__stack+0xb5f>
				portid = *str - '1';
				str++;
				
				uint16_t temp_set_voltage = atoi(str);
    15ec:	cf 01       	movw	r24, r30
    15ee:	0e 94 c9 18 	call	0x3192	; 0x3192 <atoi>
    15f2:	7c 01       	movw	r14, r24
				if ((float)(temp_set_voltage/100) <= VMAX){
    15f4:	64 e6       	ldi	r22, 0x64	; 100
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	0e 94 49 18 	call	0x3092	; 0x3092 <__udivmodhi4>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__floatunsisf>
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e2       	ldi	r20, 0x20	; 32
    160a:	52 e4       	ldi	r21, 0x42	; 66
    160c:	0e 94 33 13 	call	0x2666	; 0x2666 <__cmpsf2>
    1610:	18 16       	cp	r1, r24
    1612:	2c f1       	brlt	.+74     	; 0x165e <__stack+0xb5f>
    1614:	8c 2d       	mov	r24, r12
    1616:	90 e0       	ldi	r25, 0x00	; 0
					if (setting == 1) {
    1618:	a1 e0       	ldi	r26, 0x01	; 1
    161a:	da 12       	cpse	r13, r26
    161c:	03 c0       	rjmp	.+6      	; 0x1624 <__stack+0xb25>
	return cuton;
}

// Stored as (int)cuton*100
static inline void EEPROM_Write_Port_CutOn(uint8_t port, uint16_t cuton) {
	eeprom_update_word((uint16_t*)(EEPROM_OFFSET_V_CUTON+(port*2)), cuton);
    161e:	88 57       	subi	r24, 0x78	; 120
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <__stack+0xb29>
	return cutoff;
}

// Stored as (int)cutoff*100
static inline void EEPROM_Write_Port_CutOff(uint8_t port, uint16_t cutoff) {
	eeprom_update_word((uint16_t*)(EEPROM_OFFSET_V_CUTOFF+(port*2)), cutoff);
    1624:	80 58       	subi	r24, 0x80	; 128
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	b7 01       	movw	r22, r14
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__eeupd_word_m32u4>
					if (setting == 1) {
						EEPROM_Write_Port_CutOn(portid, temp_set_voltage);
					} else {
						EEPROM_Write_Port_CutOff(portid, temp_set_voltage);
					}
					printPGMStr(STR_Port_VCTL);
    1632:	8c ea       	ldi	r24, 0xAC	; 172
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	0e 94 5f 02 	call	0x4be	; 0x4be <printPGMStr>
					fprintf(&USBSerialStream, "%.2fV", (float)temp_set_voltage/100);
    163a:	b7 01       	movw	r22, r14
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__floatunsisf>
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	48 ec       	ldi	r20, 0xC8	; 200
    164a:	52 e4       	ldi	r21, 0x42	; 66
    164c:	0e 94 37 13 	call	0x266e	; 0x266e <__divsf3>
    1650:	9f 93       	push	r25
    1652:	8f 93       	push	r24
    1654:	7f 93       	push	r23
    1656:	6f 93       	push	r22
    1658:	86 e6       	ldi	r24, 0x66	; 102
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	2f c1       	rjmp	.+606    	; 0x18bc <__stack+0xdbd>
		}
		// EEPROM_Write_Port_CutOff(uint8_t port, uint16_t cutoff)
		// EEPROM_Write_Port_CutOn(uint8_t port, uint16_t cuton)
	}
	// SETNAME - Set the name for a given port.
	if (strncasecmp_P(DATA_IN, STR_Command_SETNAME, 7) == 0) {
    165e:	47 e0       	ldi	r20, 0x07	; 7
    1660:	50 e0       	ldi	r21, 0x00	; 0
    1662:	67 e3       	ldi	r22, 0x37	; 55
    1664:	71 e0       	ldi	r23, 0x01	; 1
    1666:	87 e6       	ldi	r24, 0x67	; 103
    1668:	92 e0       	ldi	r25, 0x02	; 2
    166a:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    166e:	89 2b       	or	r24, r25
    1670:	a9 f5       	brne	.+106    	; 0x16dc <__stack+0xbdd>
    1672:	ae e6       	ldi	r26, 0x6E	; 110
    1674:	b2 e0       	ldi	r27, 0x02	; 2
    1676:	fd 01       	movw	r30, r26
		char *str = DATA_IN + 7;
		int8_t portid;
		char temp_name[16];

		while (*str == ' ' || *str == '\t') str++;
    1678:	8d 91       	ld	r24, X+
    167a:	80 32       	cpi	r24, 0x20	; 32
    167c:	e1 f3       	breq	.-8      	; 0x1676 <__stack+0xb77>
    167e:	89 30       	cpi	r24, 0x09	; 9
    1680:	d1 f3       	breq	.-12     	; 0x1676 <__stack+0xb77>
		if (*str >= '1' && *str <= '8') {
    1682:	7f ec       	ldi	r23, 0xCF	; 207
    1684:	f7 2e       	mov	r15, r23
    1686:	f8 0e       	add	r15, r24
    1688:	27 e0       	ldi	r18, 0x07	; 7
    168a:	2f 15       	cp	r18, r15
    168c:	d8 f0       	brcs	.+54     	; 0x16c4 <__stack+0xbc5>
			portid = *str - '1';
			
			str++;
    168e:	fd 01       	movw	r30, r26
    1690:	bf 01       	movw	r22, r30
			while (*str == ' ' || *str == '\t') str++;
    1692:	81 91       	ld	r24, Z+
    1694:	80 32       	cpi	r24, 0x20	; 32
    1696:	e1 f3       	breq	.-8      	; 0x1690 <__stack+0xb91>
    1698:	89 30       	cpi	r24, 0x09	; 9
    169a:	d1 f3       	breq	.-12     	; 0x1690 <__stack+0xb91>

			EEPROM_Write_Port_Name(portid, str);
    169c:	8f 2d       	mov	r24, r15
    169e:	5d d8       	rcall	.-3910   	; 0x75a <EEPROM_Write_Port_Name>
			
			printPGMStr(STR_NR_Port);
    16a0:	88 e0       	ldi	r24, 0x08	; 8
    16a2:	92 e0       	ldi	r25, 0x02	; 2
    16a4:	0e 94 5f 02 	call	0x4be	; 0x4be <printPGMStr>
			EEPROM_Read_Port_Name(portid, temp_name);
    16a8:	b8 01       	movw	r22, r16
    16aa:	8f 2d       	mov	r24, r15
    16ac:	0e 94 4b 03 	call	0x696	; 0x696 <EEPROM_Read_Port_Name>
			fprintf(&USBSerialStream, "%i NAME: %s", portid + 1, temp_name);
    16b0:	1f 93       	push	r17
    16b2:	0f 93       	push	r16
    16b4:	8f 2d       	mov	r24, r15
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	9f 93       	push	r25
    16bc:	8f 93       	push	r24
    16be:	81 e2       	ldi	r24, 0x21	; 33
    16c0:	92 e0       	ldi	r25, 0x02	; 2
    16c2:	fc c0       	rjmp	.+504    	; 0x18bc <__stack+0xdbd>
			return;
		} else if (*str == 'P') {
    16c4:	80 35       	cpi	r24, 0x50	; 80
    16c6:	51 f4       	brne	.+20     	; 0x16dc <__stack+0xbdd>
			portid = -1;
			
			str++;
    16c8:	31 96       	adiw	r30, 0x01	; 1
    16ca:	bf 01       	movw	r22, r30
			while (*str == ' ' || *str == '\t') str++;
    16cc:	81 91       	ld	r24, Z+
    16ce:	80 32       	cpi	r24, 0x20	; 32
    16d0:	e1 f3       	breq	.-8      	; 0x16ca <__stack+0xbcb>
    16d2:	89 30       	cpi	r24, 0x09	; 9
    16d4:	d1 f3       	breq	.-12     	; 0x16ca <__stack+0xbcb>

			EEPROM_Write_Port_Name(portid, str);
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	40 d8       	rcall	.-3968   	; 0x75a <EEPROM_Write_Port_Name>
    16da:	27 c1       	rjmp	.+590    	; 0x192a <__stack+0xe2b>
			return;
		}
	}
	// SETLIMIT - Set the current limit for a given port.
	if (strncasecmp_P(DATA_IN, STR_Command_SETLIMIT, 8) == 0) {
    16dc:	48 e0       	ldi	r20, 0x08	; 8
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	6e e2       	ldi	r22, 0x2E	; 46
    16e2:	71 e0       	ldi	r23, 0x01	; 1
    16e4:	87 e6       	ldi	r24, 0x67	; 103
    16e6:	92 e0       	ldi	r25, 0x02	; 2
    16e8:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    16ec:	89 2b       	or	r24, r25
    16ee:	89 f5       	brne	.+98     	; 0x1752 <__stack+0xc53>
    16f0:	ef e6       	ldi	r30, 0x6F	; 111
    16f2:	f2 e0       	ldi	r31, 0x02	; 2
		char *str = DATA_IN + 8;
		uint8_t portid;
		
		while (*str == ' ' || *str == '\t') str++;
    16f4:	21 91       	ld	r18, Z+
    16f6:	20 32       	cpi	r18, 0x20	; 32
    16f8:	e9 f3       	breq	.-6      	; 0x16f4 <__stack+0xbf5>
    16fa:	29 30       	cpi	r18, 0x09	; 9
    16fc:	d9 f3       	breq	.-10     	; 0x16f4 <__stack+0xbf5>
		if (*str >= '1' && *str <= '8') {
    16fe:	21 53       	subi	r18, 0x31	; 49
    1700:	28 30       	cpi	r18, 0x08	; 8
    1702:	38 f5       	brcc	.+78     	; 0x1752 <__stack+0xc53>
			portid = *str - '1';
			str++;
		
			uint16_t temp_set_limit = (atoi(str) / 100);
    1704:	cf 01       	movw	r24, r30
    1706:	2b 8b       	std	Y+19, r18	; 0x13
    1708:	0e 94 c9 18 	call	0x3192	; 0x3192 <atoi>
    170c:	64 e6       	ldi	r22, 0x64	; 100
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	0e 94 5d 18 	call	0x30ba	; 0x30ba <__divmodhi4>
    1714:	7b 01       	movw	r14, r22
			if (temp_set_limit <= LIMIT_MAX){
    1716:	2b 89       	ldd	r18, Y+19	; 0x13
    1718:	65 36       	cpi	r22, 0x65	; 101
    171a:	71 05       	cpc	r23, r1
    171c:	d0 f4       	brcc	.+52     	; 0x1752 <__stack+0xc53>
	if (limit > LIMIT_MAX) { limit = LIMIT_MAX; }
	return limit;
}
// Stored as amps*10 so 50==5.0A
static inline void EEPROM_Write_Port_Limit(uint8_t port, uint8_t limit) {
	eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_LIMIT+(port)), limit);
    171e:	82 2f       	mov	r24, r18
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	48 96       	adiw	r24, 0x18	; 24
    1724:	0e 94 cd 1a 	call	0x359a	; 0x359a <__eeupd_byte_m32u4>
			str++;
		
			uint16_t temp_set_limit = (atoi(str) / 100);
			if (temp_set_limit <= LIMIT_MAX){
				EEPROM_Write_Port_Limit(portid, temp_set_limit);
				printPGMStr(STR_Port_Limit);
    1728:	89 ed       	ldi	r24, 0xD9	; 217
    172a:	91 e0       	ldi	r25, 0x01	; 1
    172c:	0e 94 5f 02 	call	0x4be	; 0x4be <printPGMStr>
				fprintf(&USBSerialStream, "%.1fA", (float)temp_set_limit/10);
    1730:	b7 01       	movw	r22, r14
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__floatunsisf>
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e2       	ldi	r20, 0x20	; 32
    1740:	51 e4       	ldi	r21, 0x41	; 65
    1742:	95 d7       	rcall	.+3882   	; 0x266e <__divsf3>
    1744:	9f 93       	push	r25
    1746:	8f 93       	push	r24
    1748:	7f 93       	push	r23
    174a:	6f 93       	push	r22
    174c:	8d e2       	ldi	r24, 0x2D	; 45
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	b5 c0       	rjmp	.+362    	; 0x18bc <__stack+0xdbd>
				return;
			}
		}
	}
	// SETVREF - Set the VREF voltage and store in EEPROM to correct voltage readings.
	if (strncasecmp_P(DATA_IN, STR_Command_SETVREF, 7) == 0) {
    1752:	47 e0       	ldi	r20, 0x07	; 7
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	6f e4       	ldi	r22, 0x4F	; 79
    1758:	71 e0       	ldi	r23, 0x01	; 1
    175a:	87 e6       	ldi	r24, 0x67	; 103
    175c:	92 e0       	ldi	r25, 0x02	; 2
    175e:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    1762:	89 2b       	or	r24, r25
    1764:	61 f5       	brne	.+88     	; 0x17be <__stack+0xcbf>
		uint16_t temp_set_vref = atoi(DATA_IN + 7);
    1766:	8e e6       	ldi	r24, 0x6E	; 110
    1768:	92 e0       	ldi	r25, 0x02	; 2
    176a:	0e 94 c9 18 	call	0x3192	; 0x3192 <atoi>
    176e:	bc 01       	movw	r22, r24
		if (temp_set_vref >= VREF_MIN && temp_set_vref <= VREF_MAX){
    1770:	84 50       	subi	r24, 0x04	; 4
    1772:	90 41       	sbci	r25, 0x10	; 16
    1774:	89 3c       	cpi	r24, 0xC9	; 201
    1776:	91 05       	cpc	r25, r1
    1778:	10 f5       	brcc	.+68     	; 0x17be <__stack+0xcbf>
			float temp_vref = (float)temp_set_vref / 1000.0;
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__floatunsisf>
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	4a e7       	ldi	r20, 0x7A	; 122
    1788:	54 e4       	ldi	r21, 0x44	; 68
    178a:	71 d7       	rcall	.+3810   	; 0x266e <__divsf3>
    178c:	f6 2e       	mov	r15, r22
    178e:	e7 2e       	mov	r14, r23
    1790:	d8 2e       	mov	r13, r24
    1792:	c9 2e       	mov	r12, r25
	if (REF_V < 4.1 || REF_V > 4.3 || isnan(REF_V)) REF_V = 4.2;
	return REF_V;
}
// Write the reference voltage to EEPROM
static inline void EEPROM_Write_REF_V(float reference) {
	eeprom_update_float((float*)(EEPROM_OFFSET_REF_V), reference);
    1794:	97 01       	movw	r18, r14
    1796:	c6 01       	movw	r24, r12
    1798:	43 2f       	mov	r20, r19
    179a:	52 2f       	mov	r21, r18
    179c:	69 2f       	mov	r22, r25
    179e:	78 2f       	mov	r23, r24
    17a0:	8c e0       	ldi	r24, 0x0C	; 12
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	0e 94 df 1a 	call	0x35be	; 0x35be <__eeupd_dword_m32u4>
	if (strncasecmp_P(DATA_IN, STR_Command_SETVREF, 7) == 0) {
		uint16_t temp_set_vref = atoi(DATA_IN + 7);
		if (temp_set_vref >= VREF_MIN && temp_set_vref <= VREF_MAX){
			float temp_vref = (float)temp_set_vref / 1000.0;
			EEPROM_Write_REF_V(temp_vref);
			printPGMStr(STR_VREF);
    17a8:	83 ea       	ldi	r24, 0xA3	; 163
    17aa:	91 e0       	ldi	r25, 0x01	; 1
    17ac:	0e 94 5f 02 	call	0x4be	; 0x4be <printPGMStr>
			fprintf(&USBSerialStream, "%.3fV", temp_vref);
    17b0:	cf 92       	push	r12
    17b2:	df 92       	push	r13
    17b4:	ef 92       	push	r14
    17b6:	ff 92       	push	r15
    17b8:	83 e3       	ldi	r24, 0x33	; 51
    17ba:	92 e0       	ldi	r25, 0x02	; 2
    17bc:	7f c0       	rjmp	.+254    	; 0x18bc <__stack+0xdbd>
			return;
		}
	}
	// SETVCAL - Set the VCAL and store in EEPROM to correct voltage readings.
	if (strncasecmp_P(DATA_IN, STR_Command_SETVCAL, 7) == 0) {
    17be:	47 e0       	ldi	r20, 0x07	; 7
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	67 e4       	ldi	r22, 0x47	; 71
    17c4:	71 e0       	ldi	r23, 0x01	; 1
    17c6:	87 e6       	ldi	r24, 0x67	; 103
    17c8:	92 e0       	ldi	r25, 0x02	; 2
    17ca:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    17ce:	89 2b       	or	r24, r25
    17d0:	51 f5       	brne	.+84     	; 0x1826 <__stack+0xd27>
		uint16_t temp_set_vdiv = atoi(DATA_IN + 7);
    17d2:	8e e6       	ldi	r24, 0x6E	; 110
    17d4:	92 e0       	ldi	r25, 0x02	; 2
    17d6:	0e 94 c9 18 	call	0x3192	; 0x3192 <atoi>
    17da:	bc 01       	movw	r22, r24
		if (temp_set_vdiv >= VCAL_MIN && temp_set_vdiv <= VCAL_MAX){
    17dc:	86 54       	subi	r24, 0x46	; 70
    17de:	91 09       	sbc	r25, r1
    17e0:	81 35       	cpi	r24, 0x51	; 81
    17e2:	91 05       	cpc	r25, r1
    17e4:	00 f5       	brcc	.+64     	; 0x1826 <__stack+0xd27>
			float temp_vdiv = (float)temp_set_vdiv / 10.0;
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	da d7       	rcall	.+4020   	; 0x27a0 <__floatunsisf>
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e2       	ldi	r20, 0x20	; 32
    17f2:	51 e4       	ldi	r21, 0x41	; 65
    17f4:	3c d7       	rcall	.+3704   	; 0x266e <__divsf3>
    17f6:	f6 2e       	mov	r15, r22
    17f8:	e7 2e       	mov	r14, r23
    17fa:	d8 2e       	mov	r13, r24
    17fc:	c9 2e       	mov	r12, r25
	if (V_CAL < VCAL_MIN || V_CAL > VCAL_MAX) V_CAL = 110;
	return (float)(V_CAL / 10.0);
}
// Write the reference voltage to EEPROM
static inline void EEPROM_Write_V_CAL(float div) {
	eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_V_CAL), (int)(div * 10.0));
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e2       	ldi	r20, 0x20	; 32
    1804:	51 e4       	ldi	r21, 0x41	; 65
    1806:	d7 01       	movw	r26, r14
    1808:	f6 01       	movw	r30, r12
    180a:	6b 2f       	mov	r22, r27
    180c:	7a 2f       	mov	r23, r26
    180e:	8f 2f       	mov	r24, r31
    1810:	9e 2f       	mov	r25, r30
    1812:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
    1816:	93 d7       	rcall	.+3878   	; 0x273e <__fixsfsi>
    1818:	80 e1       	ldi	r24, 0x10	; 16
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 cd 1a 	call	0x359a	; 0x359a <__eeupd_byte_m32u4>
	if (strncasecmp_P(DATA_IN, STR_Command_SETVCAL, 7) == 0) {
		uint16_t temp_set_vdiv = atoi(DATA_IN + 7);
		if (temp_set_vdiv >= VCAL_MIN && temp_set_vdiv <= VCAL_MAX){
			float temp_vdiv = (float)temp_set_vdiv / 10.0;
			EEPROM_Write_V_CAL(temp_vdiv);
			printPGMStr(STR_VCAL);
    1820:	8a e9       	ldi	r24, 0x9A	; 154
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	43 c0       	rjmp	.+134    	; 0x18ac <__stack+0xdad>
			return;
		}
	}
	// SETICAL - Set the current calibration for a given port and store in EEPROM to 
	// correct current readings.
	if (strncasecmp_P(DATA_IN, STR_Command_SETICAL, 7) == 0) {
    1826:	47 e0       	ldi	r20, 0x07	; 7
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	6f e3       	ldi	r22, 0x3F	; 63
    182c:	71 e0       	ldi	r23, 0x01	; 1
    182e:	87 e6       	ldi	r24, 0x67	; 103
    1830:	92 e0       	ldi	r25, 0x02	; 2
    1832:	0e 94 be 19 	call	0x337c	; 0x337c <strncasecmp_P>
    1836:	89 2b       	or	r24, r25
    1838:	09 f0       	breq	.+2      	; 0x183c <__stack+0xd3d>
    183a:	73 c0       	rjmp	.+230    	; 0x1922 <__stack+0xe23>
    183c:	ee e6       	ldi	r30, 0x6E	; 110
    183e:	f2 e0       	ldi	r31, 0x02	; 2
    1840:	cf 01       	movw	r24, r30
		char *str = DATA_IN + 7;
		uint8_t portid;
		
		while (*str == ' ' || *str == '\t') str++;
    1842:	21 91       	ld	r18, Z+
    1844:	20 32       	cpi	r18, 0x20	; 32
    1846:	e1 f3       	breq	.-8      	; 0x1840 <__stack+0xd41>
    1848:	29 30       	cpi	r18, 0x09	; 9
    184a:	d1 f3       	breq	.-12     	; 0x1840 <__stack+0xd41>
		if (*str >= '1' && *str <= '8') {
    184c:	6f ec       	ldi	r22, 0xCF	; 207
    184e:	b6 2e       	mov	r11, r22
    1850:	b2 0e       	add	r11, r18
    1852:	f7 e0       	ldi	r31, 0x07	; 7
    1854:	fb 15       	cp	r31, r11
    1856:	08 f4       	brcc	.+2      	; 0x185a <__stack+0xd5b>
    1858:	64 c0       	rjmp	.+200    	; 0x1922 <__stack+0xe23>
			portid = *str - '1';
			str++;
		
			uint16_t temp_i_cal = atoi(str);
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	0e 94 c9 18 	call	0x3192	; 0x3192 <atoi>
    1860:	bc 01       	movw	r22, r24
			if (temp_i_cal >= ICAL_MIN && temp_i_cal <= ICAL_MAX){
    1862:	cc 97       	sbiw	r24, 0x3c	; 60
    1864:	85 36       	cpi	r24, 0x65	; 101
    1866:	91 05       	cpc	r25, r1
    1868:	08 f0       	brcs	.+2      	; 0x186c <__stack+0xd6d>
    186a:	5b c0       	rjmp	.+182    	; 0x1922 <__stack+0xe23>
				EEPROM_Write_I_CAL(portid, (float)(temp_i_cal / 10.0));
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	97 d7       	rcall	.+3886   	; 0x27a0 <__floatunsisf>
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e2       	ldi	r20, 0x20	; 32
    1878:	51 e4       	ldi	r21, 0x41	; 65
    187a:	f9 d6       	rcall	.+3570   	; 0x266e <__divsf3>
    187c:	f6 2e       	mov	r15, r22
    187e:	e7 2e       	mov	r14, r23
    1880:	d8 2e       	mov	r13, r24
    1882:	c9 2e       	mov	r12, r25
	if(I_CAL < ICAL_MIN || I_CAL > ICAL_MAX) I_CAL = 110;
	return (float)(I_CAL / 10.0);
}
// Write the port current calibration to EEPROM
static inline void EEPROM_Write_I_CAL(uint8_t port, float cal) {
	eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_I_CAL + port), (int)(cal * 10.0));
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e2       	ldi	r20, 0x20	; 32
    188a:	51 e4       	ldi	r21, 0x41	; 65
    188c:	d7 01       	movw	r26, r14
    188e:	f6 01       	movw	r30, r12
    1890:	6b 2f       	mov	r22, r27
    1892:	7a 2f       	mov	r23, r26
    1894:	8f 2f       	mov	r24, r31
    1896:	9e 2f       	mov	r25, r30
    1898:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
    189c:	50 d7       	rcall	.+3744   	; 0x273e <__fixsfsi>
    189e:	8b 2d       	mov	r24, r11
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	80 96       	adiw	r24, 0x20	; 32
    18a4:	0e 94 cd 1a 	call	0x359a	; 0x359a <__eeupd_byte_m32u4>
			str++;
		
			uint16_t temp_i_cal = atoi(str);
			if (temp_i_cal >= ICAL_MIN && temp_i_cal <= ICAL_MAX){
				EEPROM_Write_I_CAL(portid, (float)(temp_i_cal / 10.0));
				printPGMStr(STR_ICAL);
    18a8:	81 e9       	ldi	r24, 0x91	; 145
    18aa:	91 e0       	ldi	r25, 0x01	; 1
    18ac:	0e 94 5f 02 	call	0x4be	; 0x4be <printPGMStr>
				fprintf(&USBSerialStream, "%.1f", (float)(temp_i_cal / 10.0));
    18b0:	cf 92       	push	r12
    18b2:	df 92       	push	r13
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	87 ef       	ldi	r24, 0xF7	; 247
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	9f 93       	push	r25
    18be:	8f 93       	push	r24
    18c0:	81 e4       	ldi	r24, 0x41	; 65
    18c2:	92 e0       	ldi	r25, 0x02	; 2
    18c4:	9f 93       	push	r25
    18c6:	8f 93       	push	r24
    18c8:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <fprintf>
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	29 c0       	rjmp	.+82     	; 0x192a <__stack+0xe2b>
}

// Reset all EEPROM values to 255
static inline void EEPROM_Reset(void) {
	for (uint16_t i = 0; i < 256; i++) {
		eeprom_update_byte((uint8_t*)(i), 255);
    18d8:	6f ef       	ldi	r22, 0xFF	; 255
    18da:	c7 01       	movw	r24, r14
    18dc:	0e 94 cd 1a 	call	0x359a	; 0x359a <__eeupd_byte_m32u4>
	eeprom_update_word((uint16_t*)(EEPROM_OFFSET_V_CUTON+(port*2)), cuton);
}

// Reset all EEPROM values to 255
static inline void EEPROM_Reset(void) {
	for (uint16_t i = 0; i < 256; i++) {
    18e0:	3f ef       	ldi	r19, 0xFF	; 255
    18e2:	e3 1a       	sub	r14, r19
    18e4:	f3 0a       	sbc	r15, r19
    18e6:	e1 14       	cp	r14, r1
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	f4 06       	cpc	r15, r20
    18ec:	a9 f7       	brne	.-22     	; 0x18d8 <__stack+0xdd9>
    18ee:	1d c0       	rjmp	.+58     	; 0x192a <__stack+0xe2b>
					INPUT_Clear();
					break;
					
				case 30:
					// Ctrl-^ jump into the bootloader
					TIMSK0 = 0b00000000; // Interrupt will mess with the bootloader
    18f0:	10 92 6e 00 	sts	0x006E, r1
					bootloader();
    18f4:	e0 91 00 01 	lds	r30, 0x0100
    18f8:	f0 91 01 01 	lds	r31, 0x0101
    18fc:	09 95       	icall
					break; // We should never get here...
    18fe:	17 c0       	rjmp	.+46     	; 0x192e <__stack+0xe2f>

				default:
					// Normal char buffering
					if (DATA_IN_POS < (DATA_BUFF_LEN - 1)) {
    1900:	e0 91 3a 02 	lds	r30, 0x023A
    1904:	ef 31       	cpi	r30, 0x1F	; 31
    1906:	68 f4       	brcc	.+26     	; 0x1922 <__stack+0xe23>
						DATA_IN[DATA_IN_POS] = BYTE_IN;
    1908:	ae 2f       	mov	r26, r30
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	a9 59       	subi	r26, 0x99	; 153
    190e:	bd 4f       	sbci	r27, 0xFD	; 253
    1910:	ec 92       	st	X, r14
						DATA_IN_POS++;
    1912:	ef 5f       	subi	r30, 0xFF	; 255
    1914:	e0 93 3a 02 	sts	0x023A, r30
						DATA_IN[DATA_IN_POS] = 0;
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	e9 59       	subi	r30, 0x99	; 153
    191c:	fd 4f       	sbci	r31, 0xFD	; 253
    191e:	10 82       	st	Z, r1
    1920:	06 c0       	rjmp	.+12     	; 0x192e <__stack+0xe2f>
					} else {
						// Input is too long.
						printPGMStr(STR_Unrecognized);
    1922:	86 e6       	ldi	r24, 0x66	; 102
    1924:	92 e0       	ldi	r25, 0x02	; 2
    1926:	0e 94 5f 02 	call	0x4be	; 0x4be <printPGMStr>
						INPUT_Clear();
    192a:	0e 94 df 03 	call	0x7be	; 0x7be <INPUT_Clear>
// LED 0 == Green, LED 1 == Red
static inline void LED_CTL(uint8_t led, uint8_t state) {
	if (state == 1) {
		PORTB |= (1 << (LED1 + led));
	} else {
		PORTB &= ~(1 << (LED1 + led));
    192e:	2b 98       	cbi	0x05, 3	; 5
//			Check_Voltage_Cutoff();
//			check_voltage = 0;
//		}
		
		// Keep the LUFA USB stuff fed regularly.
		run_lufa();
    1930:	0e 94 17 04 	call	0x82e	; 0x82e <run_lufa>
	}
    1934:	ab c8       	rjmp	.-3754   	; 0xa8c <main+0xd6>

00001936 <EVENT_USB_Device_Connect>:
	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
	USB_USBTask();
}

// Event handler for the library USB Connection event.
void EVENT_USB_Device_Connect(void) {
    1936:	08 95       	ret

00001938 <EVENT_USB_Device_Disconnect>:
	// We're enumerated. Act on that as desired.
}

// Event handler for the library USB Disconnection event.
void EVENT_USB_Device_Disconnect(void) {
    1938:	08 95       	ret

0000193a <EVENT_USB_Device_ConfigurationChanged>:
}

// Event handler for the library USB Configuration Changed event.
void EVENT_USB_Device_ConfigurationChanged(void) {
	bool ConfigSuccess = true;
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    193a:	82 e0       	ldi	r24, 0x02	; 2
    193c:	91 e0       	ldi	r25, 0x01	; 1
    193e:	8c c4       	rjmp	.+2328   	; 0x2258 <CDC_Device_ConfigureEndpoints>

00001940 <EVENT_USB_Device_ControlRequest>:
	// USB is ready. Act on that as desired.
}

// Event handler for the library USB Control Request reception event.
void EVENT_USB_Device_ControlRequest(void) {
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	91 e0       	ldi	r25, 0x01	; 1
    1944:	7b c5       	rjmp	.+2806   	; 0x243c <CDC_Device_ProcessControlRequest>

00001946 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    1946:	29 2f       	mov	r18, r25
    1948:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    194a:	22 30       	cpi	r18, 0x02	; 2
    194c:	31 05       	cpc	r19, r1
    194e:	59 f0       	breq	.+22     	; 0x1966 <CALLBACK_USB_GetDescriptor+0x20>
    1950:	23 30       	cpi	r18, 0x03	; 3
    1952:	31 05       	cpc	r19, r1
    1954:	69 f0       	breq	.+26     	; 0x1970 <CALLBACK_USB_GetDescriptor+0x2a>
    1956:	21 30       	cpi	r18, 0x01	; 1
    1958:	31 05       	cpc	r19, r1
    195a:	f9 f4       	brne	.+62     	; 0x199a <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    195c:	82 e1       	ldi	r24, 0x12	; 18
    195e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    1960:	2d e2       	ldi	r18, 0x2D	; 45
    1962:	33 e0       	ldi	r19, 0x03	; 3
    1964:	1e c0       	rjmp	.+60     	; 0x19a2 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    1966:	8e e3       	ldi	r24, 0x3E	; 62
    1968:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    196a:	2f ee       	ldi	r18, 0xEF	; 239
    196c:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    196e:	19 c0       	rjmp	.+50     	; 0x19a2 <CALLBACK_USB_GetDescriptor+0x5c>
    1970:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
    1972:	81 30       	cpi	r24, 0x01	; 1
    1974:	91 05       	cpc	r25, r1
    1976:	41 f0       	breq	.+16     	; 0x1988 <CALLBACK_USB_GetDescriptor+0x42>
    1978:	82 30       	cpi	r24, 0x02	; 2
    197a:	91 05       	cpc	r25, r1
    197c:	41 f0       	breq	.+16     	; 0x198e <CALLBACK_USB_GetDescriptor+0x48>
    197e:	89 2b       	or	r24, r25
    1980:	61 f4       	brne	.+24     	; 0x199a <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    1982:	eb ee       	ldi	r30, 0xEB	; 235
    1984:	f2 e0       	ldi	r31, 0x02	; 2
    1986:	05 c0       	rjmp	.+10     	; 0x1992 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1988:	ed ed       	ldi	r30, 0xDD	; 221
    198a:	f2 e0       	ldi	r31, 0x02	; 2
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    198e:	e1 ec       	ldi	r30, 0xC1	; 193
    1990:	f2 e0       	ldi	r31, 0x02	; 2
    1992:	84 91       	lpm	r24, Z
    1994:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    1996:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    1998:	04 c0       	rjmp	.+8      	; 0x19a2 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    19a2:	fa 01       	movw	r30, r20
    19a4:	31 83       	std	Z+1, r19	; 0x01
    19a6:	20 83       	st	Z, r18
	return Size;
}
    19a8:	08 95       	ret

000019aa <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19aa:	20 91 92 02 	lds	r18, 0x0292
    19ae:	30 91 93 02 	lds	r19, 0x0293
    19b2:	26 17       	cp	r18, r22
    19b4:	37 07       	cpc	r19, r23
    19b6:	48 f0       	brcs	.+18     	; 0x19ca <Endpoint_Write_Control_Stream_LE+0x20>
    19b8:	61 15       	cp	r22, r1
    19ba:	71 05       	cpc	r23, r1
    19bc:	39 f4       	brne	.+14     	; 0x19cc <Endpoint_Write_Control_Stream_LE+0x22>
    19be:	20 91 e8 00 	lds	r18, 0x00E8
    19c2:	2e 77       	andi	r18, 0x7E	; 126
    19c4:	20 93 e8 00 	sts	0x00E8, r18
    19c8:	01 c0       	rjmp	.+2      	; 0x19cc <Endpoint_Write_Control_Stream_LE+0x22>
    19ca:	b9 01       	movw	r22, r18
    19cc:	fc 01       	movw	r30, r24
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	61 15       	cp	r22, r1
    19d2:	71 05       	cpc	r23, r1
    19d4:	b9 f1       	breq	.+110    	; 0x1a44 <Endpoint_Write_Control_Stream_LE+0x9a>
    19d6:	80 91 8b 02 	lds	r24, 0x028B
    19da:	88 23       	and	r24, r24
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <Endpoint_Write_Control_Stream_LE+0x36>
    19de:	40 c0       	rjmp	.+128    	; 0x1a60 <Endpoint_Write_Control_Stream_LE+0xb6>
    19e0:	85 30       	cpi	r24, 0x05	; 5
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <Endpoint_Write_Control_Stream_LE+0x3c>
    19e4:	3f c0       	rjmp	.+126    	; 0x1a64 <Endpoint_Write_Control_Stream_LE+0xba>
    19e6:	80 91 e8 00 	lds	r24, 0x00E8
    19ea:	83 fd       	sbrc	r24, 3
    19ec:	3d c0       	rjmp	.+122    	; 0x1a68 <Endpoint_Write_Control_Stream_LE+0xbe>
    19ee:	80 91 e8 00 	lds	r24, 0x00E8
    19f2:	82 ff       	sbrs	r24, 2
    19f4:	06 c0       	rjmp	.+12     	; 0x1a02 <Endpoint_Write_Control_Stream_LE+0x58>
    19f6:	80 91 e8 00 	lds	r24, 0x00E8
    19fa:	82 ff       	sbrs	r24, 2
    19fc:	26 c0       	rjmp	.+76     	; 0x1a4a <Endpoint_Write_Control_Stream_LE+0xa0>
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	08 95       	ret
    1a02:	80 91 e8 00 	lds	r24, 0x00E8
    1a06:	80 ff       	sbrs	r24, 0
    1a08:	e3 cf       	rjmp	.-58     	; 0x19d0 <Endpoint_Write_Control_Stream_LE+0x26>
    1a0a:	20 91 f3 00 	lds	r18, 0x00F3
    1a0e:	80 91 f2 00 	lds	r24, 0x00F2
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	92 2b       	or	r25, r18
    1a16:	61 15       	cp	r22, r1
    1a18:	71 05       	cpc	r23, r1
    1a1a:	51 f0       	breq	.+20     	; 0x1a30 <Endpoint_Write_Control_Stream_LE+0x86>
    1a1c:	88 30       	cpi	r24, 0x08	; 8
    1a1e:	91 05       	cpc	r25, r1
    1a20:	38 f4       	brcc	.+14     	; 0x1a30 <Endpoint_Write_Control_Stream_LE+0x86>
    1a22:	21 91       	ld	r18, Z+
    1a24:	20 93 f1 00 	sts	0x00F1, r18
    1a28:	61 50       	subi	r22, 0x01	; 1
    1a2a:	71 09       	sbc	r23, r1
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	f3 cf       	rjmp	.-26     	; 0x1a16 <Endpoint_Write_Control_Stream_LE+0x6c>
    1a30:	21 e0       	ldi	r18, 0x01	; 1
    1a32:	08 97       	sbiw	r24, 0x08	; 8
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <Endpoint_Write_Control_Stream_LE+0x8e>
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	80 91 e8 00 	lds	r24, 0x00E8
    1a3c:	8e 77       	andi	r24, 0x7E	; 126
    1a3e:	80 93 e8 00 	sts	0x00E8, r24
    1a42:	c6 cf       	rjmp	.-116    	; 0x19d0 <Endpoint_Write_Control_Stream_LE+0x26>
    1a44:	21 11       	cpse	r18, r1
    1a46:	c7 cf       	rjmp	.-114    	; 0x19d6 <Endpoint_Write_Control_Stream_LE+0x2c>
    1a48:	d6 cf       	rjmp	.-84     	; 0x19f6 <Endpoint_Write_Control_Stream_LE+0x4c>
    1a4a:	80 91 8b 02 	lds	r24, 0x028B
    1a4e:	88 23       	and	r24, r24
    1a50:	39 f0       	breq	.+14     	; 0x1a60 <Endpoint_Write_Control_Stream_LE+0xb6>
    1a52:	85 30       	cpi	r24, 0x05	; 5
    1a54:	39 f0       	breq	.+14     	; 0x1a64 <Endpoint_Write_Control_Stream_LE+0xba>
    1a56:	80 91 e8 00 	lds	r24, 0x00E8
    1a5a:	83 ff       	sbrs	r24, 3
    1a5c:	cc cf       	rjmp	.-104    	; 0x19f6 <Endpoint_Write_Control_Stream_LE+0x4c>
    1a5e:	04 c0       	rjmp	.+8      	; 0x1a68 <Endpoint_Write_Control_Stream_LE+0xbe>
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	08 95       	ret
    1a64:	83 e0       	ldi	r24, 0x03	; 3
    1a66:	08 95       	ret
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	08 95       	ret

00001a6c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1a6c:	20 91 92 02 	lds	r18, 0x0292
    1a70:	30 91 93 02 	lds	r19, 0x0293
    1a74:	26 17       	cp	r18, r22
    1a76:	37 07       	cpc	r19, r23
    1a78:	48 f0       	brcs	.+18     	; 0x1a8c <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1a7a:	61 15       	cp	r22, r1
    1a7c:	71 05       	cpc	r23, r1
    1a7e:	39 f4       	brne	.+14     	; 0x1a8e <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a80:	20 91 e8 00 	lds	r18, 0x00E8
    1a84:	2e 77       	andi	r18, 0x7E	; 126
    1a86:	20 93 e8 00 	sts	0x00E8, r18
    1a8a:	01 c0       	rjmp	.+2      	; 0x1a8e <Endpoint_Write_Control_PStream_LE+0x22>
    1a8c:	b9 01       	movw	r22, r18
    1a8e:	fc 01       	movw	r30, r24
    1a90:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a92:	61 15       	cp	r22, r1
    1a94:	71 05       	cpc	r23, r1
    1a96:	c1 f1       	breq	.+112    	; 0x1b08 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a98:	80 91 8b 02 	lds	r24, 0x028B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a9c:	88 23       	and	r24, r24
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <Endpoint_Write_Control_PStream_LE+0x36>
    1aa0:	41 c0       	rjmp	.+130    	; 0x1b24 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1aa2:	85 30       	cpi	r24, 0x05	; 5
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <Endpoint_Write_Control_PStream_LE+0x3c>
    1aa6:	40 c0       	rjmp	.+128    	; 0x1b28 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1aa8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1aac:	83 fd       	sbrc	r24, 3
    1aae:	3e c0       	rjmp	.+124    	; 0x1b2c <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ab0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1ab4:	82 ff       	sbrs	r24, 2
    1ab6:	06 c0       	rjmp	.+12     	; 0x1ac4 <Endpoint_Write_Control_PStream_LE+0x58>
    1ab8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1abc:	82 ff       	sbrs	r24, 2
    1abe:	27 c0       	rjmp	.+78     	; 0x1b0e <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ac4:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1ac8:	80 ff       	sbrs	r24, 0
    1aca:	e3 cf       	rjmp	.-58     	; 0x1a92 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1acc:	20 91 f3 00 	lds	r18, 0x00F3
    1ad0:	80 91 f2 00 	lds	r24, 0x00F2
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1ad8:	61 15       	cp	r22, r1
    1ada:	71 05       	cpc	r23, r1
    1adc:	59 f0       	breq	.+22     	; 0x1af4 <Endpoint_Write_Control_PStream_LE+0x88>
    1ade:	88 30       	cpi	r24, 0x08	; 8
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	40 f4       	brcc	.+16     	; 0x1af4 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1ae4:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ae6:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1aea:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1aec:	61 50       	subi	r22, 0x01	; 1
    1aee:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	f2 cf       	rjmp	.-28     	; 0x1ad8 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1af4:	21 e0       	ldi	r18, 0x01	; 1
    1af6:	08 97       	sbiw	r24, 0x08	; 8
    1af8:	09 f0       	breq	.+2      	; 0x1afc <Endpoint_Write_Control_PStream_LE+0x90>
    1afa:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1afc:	80 91 e8 00 	lds	r24, 0x00E8
    1b00:	8e 77       	andi	r24, 0x7E	; 126
    1b02:	80 93 e8 00 	sts	0x00E8, r24
    1b06:	c5 cf       	rjmp	.-118    	; 0x1a92 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b08:	21 11       	cpse	r18, r1
    1b0a:	c6 cf       	rjmp	.-116    	; 0x1a98 <Endpoint_Write_Control_PStream_LE+0x2c>
    1b0c:	d5 cf       	rjmp	.-86     	; 0x1ab8 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b0e:	80 91 8b 02 	lds	r24, 0x028B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b12:	88 23       	and	r24, r24
    1b14:	39 f0       	breq	.+14     	; 0x1b24 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b16:	85 30       	cpi	r24, 0x05	; 5
    1b18:	39 f0       	breq	.+14     	; 0x1b28 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b1a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b1e:	83 ff       	sbrs	r24, 3
    1b20:	cb cf       	rjmp	.-106    	; 0x1ab8 <Endpoint_Write_Control_PStream_LE+0x4c>
    1b22:	04 c0       	rjmp	.+8      	; 0x1b2c <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1b2e:	08 95       	ret

00001b30 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1b30:	98 2f       	mov	r25, r24
    1b32:	97 30       	cpi	r25, 0x07	; 7
    1b34:	58 f5       	brcc	.+86     	; 0x1b8c <Endpoint_ConfigureEndpoint_Prv+0x5c>
    1b36:	90 93 e9 00 	sts	0x00E9, r25
    1b3a:	98 17       	cp	r25, r24
    1b3c:	39 f0       	breq	.+14     	; 0x1b4c <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1b3e:	70 91 ec 00 	lds	r23, 0x00EC
    1b42:	20 91 ed 00 	lds	r18, 0x00ED
    1b46:	50 91 f0 00 	lds	r21, 0x00F0
    1b4a:	03 c0       	rjmp	.+6      	; 0x1b52 <Endpoint_ConfigureEndpoint_Prv+0x22>
    1b4c:	24 2f       	mov	r18, r20
    1b4e:	76 2f       	mov	r23, r22
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	21 ff       	sbrs	r18, 1
    1b54:	19 c0       	rjmp	.+50     	; 0x1b88 <Endpoint_ConfigureEndpoint_Prv+0x58>
    1b56:	30 91 eb 00 	lds	r19, 0x00EB
    1b5a:	3e 7f       	andi	r19, 0xFE	; 254
    1b5c:	30 93 eb 00 	sts	0x00EB, r19
    1b60:	30 91 ed 00 	lds	r19, 0x00ED
    1b64:	3d 7f       	andi	r19, 0xFD	; 253
    1b66:	30 93 ed 00 	sts	0x00ED, r19
    1b6a:	30 91 eb 00 	lds	r19, 0x00EB
    1b6e:	31 60       	ori	r19, 0x01	; 1
    1b70:	30 93 eb 00 	sts	0x00EB, r19
    1b74:	70 93 ec 00 	sts	0x00EC, r23
    1b78:	20 93 ed 00 	sts	0x00ED, r18
    1b7c:	50 93 f0 00 	sts	0x00F0, r21
    1b80:	20 91 ee 00 	lds	r18, 0x00EE
    1b84:	27 ff       	sbrs	r18, 7
    1b86:	07 c0       	rjmp	.+14     	; 0x1b96 <Endpoint_ConfigureEndpoint_Prv+0x66>
    1b88:	9f 5f       	subi	r25, 0xFF	; 255
    1b8a:	d3 cf       	rjmp	.-90     	; 0x1b32 <Endpoint_ConfigureEndpoint_Prv+0x2>
    1b8c:	8f 70       	andi	r24, 0x0F	; 15
    1b8e:	80 93 e9 00 	sts	0x00E9, r24
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	08 95       	ret
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	08 95       	ret

00001b9a <Endpoint_ConfigureEndpointTable>:
    1b9a:	0f 93       	push	r16
    1b9c:	1f 93       	push	r17
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	06 2f       	mov	r16, r22
    1ba4:	ec 01       	movw	r28, r24
    1ba6:	10 e0       	ldi	r17, 0x00	; 0
    1ba8:	10 17       	cp	r17, r16
    1baa:	71 f1       	breq	.+92     	; 0x1c08 <Endpoint_ConfigureEndpointTable+0x6e>
    1bac:	98 81       	ld	r25, Y
    1bae:	99 23       	and	r25, r25
    1bb0:	41 f1       	breq	.+80     	; 0x1c02 <Endpoint_ConfigureEndpointTable+0x68>
    1bb2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb8:	7b 81       	ldd	r23, Y+3	; 0x03
    1bba:	89 2f       	mov	r24, r25
    1bbc:	8f 70       	andi	r24, 0x0F	; 15
    1bbe:	87 30       	cpi	r24, 0x07	; 7
    1bc0:	10 f0       	brcs	.+4      	; 0x1bc6 <Endpoint_ConfigureEndpointTable+0x2c>
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	22 c0       	rjmp	.+68     	; 0x1c0a <Endpoint_ConfigureEndpointTable+0x70>
    1bc6:	22 30       	cpi	r18, 0x02	; 2
    1bc8:	10 f0       	brcs	.+4      	; 0x1bce <Endpoint_ConfigureEndpointTable+0x34>
    1bca:	56 e0       	ldi	r21, 0x06	; 6
    1bcc:	01 c0       	rjmp	.+2      	; 0x1bd0 <Endpoint_ConfigureEndpointTable+0x36>
    1bce:	52 e0       	ldi	r21, 0x02	; 2
    1bd0:	28 e0       	ldi	r18, 0x08	; 8
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e0       	ldi	r20, 0x00	; 0
    1bd6:	2e 17       	cp	r18, r30
    1bd8:	3f 07       	cpc	r19, r31
    1bda:	20 f4       	brcc	.+8      	; 0x1be4 <Endpoint_ConfigureEndpointTable+0x4a>
    1bdc:	4f 5f       	subi	r20, 0xFF	; 255
    1bde:	22 0f       	add	r18, r18
    1be0:	33 1f       	adc	r19, r19
    1be2:	f9 cf       	rjmp	.-14     	; 0x1bd6 <Endpoint_ConfigureEndpointTable+0x3c>
    1be4:	42 95       	swap	r20
    1be6:	40 7f       	andi	r20, 0xF0	; 240
    1be8:	45 2b       	or	r20, r21
    1bea:	69 2f       	mov	r22, r25
    1bec:	66 1f       	adc	r22, r22
    1bee:	66 27       	eor	r22, r22
    1bf0:	66 1f       	adc	r22, r22
    1bf2:	90 e4       	ldi	r25, 0x40	; 64
    1bf4:	79 9f       	mul	r23, r25
    1bf6:	90 01       	movw	r18, r0
    1bf8:	11 24       	eor	r1, r1
    1bfa:	62 2b       	or	r22, r18
    1bfc:	99 df       	rcall	.-206    	; 0x1b30 <Endpoint_ConfigureEndpoint_Prv>
    1bfe:	88 23       	and	r24, r24
    1c00:	01 f3       	breq	.-64     	; 0x1bc2 <Endpoint_ConfigureEndpointTable+0x28>
    1c02:	1f 5f       	subi	r17, 0xFF	; 255
    1c04:	25 96       	adiw	r28, 0x05	; 5
    1c06:	d0 cf       	rjmp	.-96     	; 0x1ba8 <Endpoint_ConfigureEndpointTable+0xe>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	08 95       	ret

00001c14 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1c14:	80 91 8c 02 	lds	r24, 0x028C
    1c18:	87 fd       	sbrc	r24, 7
    1c1a:	05 c0       	rjmp	.+10     	; 0x1c26 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c1c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1c20:	80 ff       	sbrs	r24, 0
    1c22:	0e c0       	rjmp	.+28     	; 0x1c40 <Endpoint_ClearStatusStage+0x2c>
    1c24:	12 c0       	rjmp	.+36     	; 0x1c4a <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c26:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1c2a:	82 fd       	sbrc	r24, 2
    1c2c:	05 c0       	rjmp	.+10     	; 0x1c38 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c2e:	80 91 8b 02 	lds	r24, 0x028B
    1c32:	81 11       	cpse	r24, r1
    1c34:	f8 cf       	rjmp	.-16     	; 0x1c26 <Endpoint_ClearStatusStage+0x12>
    1c36:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c38:	80 91 e8 00 	lds	r24, 0x00E8
    1c3c:	8b 77       	andi	r24, 0x7B	; 123
    1c3e:	08 c0       	rjmp	.+16     	; 0x1c50 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c40:	80 91 8b 02 	lds	r24, 0x028B
    1c44:	81 11       	cpse	r24, r1
    1c46:	ea cf       	rjmp	.-44     	; 0x1c1c <Endpoint_ClearStatusStage+0x8>
    1c48:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c4a:	80 91 e8 00 	lds	r24, 0x00E8
    1c4e:	8e 77       	andi	r24, 0x7E	; 126
    1c50:	80 93 e8 00 	sts	0x00E8, r24
    1c54:	08 95       	ret

00001c56 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1c56:	80 91 e4 00 	lds	r24, 0x00E4
    1c5a:	90 91 e5 00 	lds	r25, 0x00E5
    1c5e:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1c60:	20 91 ec 00 	lds	r18, 0x00EC
    1c64:	20 ff       	sbrs	r18, 0
    1c66:	21 c0       	rjmp	.+66     	; 0x1caa <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c68:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1c6c:	20 fd       	sbrc	r18, 0
    1c6e:	21 c0       	rjmp	.+66     	; 0x1cb2 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c70:	20 91 8b 02 	lds	r18, 0x028B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c74:	22 23       	and	r18, r18
    1c76:	89 f0       	breq	.+34     	; 0x1c9a <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c78:	25 30       	cpi	r18, 0x05	; 5
    1c7a:	89 f0       	breq	.+34     	; 0x1c9e <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1c7c:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1c80:	25 fd       	sbrc	r18, 5
    1c82:	0f c0       	rjmp	.+30     	; 0x1ca2 <Endpoint_WaitUntilReady+0x4c>
    1c84:	20 91 e4 00 	lds	r18, 0x00E4
    1c88:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1c8c:	28 17       	cp	r18, r24
    1c8e:	39 07       	cpc	r19, r25
    1c90:	39 f3       	breq	.-50     	; 0x1c60 <Endpoint_WaitUntilReady+0xa>
    1c92:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1c94:	41 f0       	breq	.+16     	; 0x1ca6 <Endpoint_WaitUntilReady+0x50>
    1c96:	c9 01       	movw	r24, r18
    1c98:	e3 cf       	rjmp	.-58     	; 0x1c60 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1c9a:	82 e0       	ldi	r24, 0x02	; 2
    1c9c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1c9e:	83 e0       	ldi	r24, 0x03	; 3
    1ca0:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1ca6:	84 e0       	ldi	r24, 0x04	; 4
    1ca8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1caa:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1cae:	22 ff       	sbrs	r18, 2
    1cb0:	df cf       	rjmp	.-66     	; 0x1c70 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	08 95       	ret

00001cb6 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1cbe:	4b d0       	rcall	.+150    	; 0x1d56 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1cc0:	52 d0       	rcall	.+164    	; 0x1d66 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1cc2:	c8 ed       	ldi	r28, 0xD8	; 216
    1cc4:	d0 e0       	ldi	r29, 0x00	; 0
    1cc6:	88 81       	ld	r24, Y
    1cc8:	8f 77       	andi	r24, 0x7F	; 127
    1cca:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1ccc:	88 81       	ld	r24, Y
    1cce:	80 68       	ori	r24, 0x80	; 128
    1cd0:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1cd2:	88 81       	ld	r24, Y
    1cd4:	8f 7d       	andi	r24, 0xDF	; 223
    1cd6:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1cd8:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1cda:	10 92 8b 02 	sts	0x028B, r1
	USB_Device_ConfigurationNumber  = 0;
    1cde:	10 92 87 02 	sts	0x0287, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1ce2:	10 92 89 02 	sts	0x0289, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1ce6:	10 92 88 02 	sts	0x0288, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1cea:	00 ee       	ldi	r16, 0xE0	; 224
    1cec:	10 e0       	ldi	r17, 0x00	; 0
    1cee:	f8 01       	movw	r30, r16
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8b 7f       	andi	r24, 0xFB	; 251
    1cf4:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1cf6:	88 81       	ld	r24, Y
    1cf8:	81 60       	ori	r24, 0x01	; 1
    1cfa:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1cfc:	42 e0       	ldi	r20, 0x02	; 2
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	16 df       	rcall	.-468    	; 0x1b30 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d04:	e1 ee       	ldi	r30, 0xE1	; 225
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	8e 7f       	andi	r24, 0xFE	; 254
    1d0c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d0e:	e2 ee       	ldi	r30, 0xE2	; 226
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	81 60       	ori	r24, 0x01	; 1
    1d16:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1d18:	80 81       	ld	r24, Z
    1d1a:	88 60       	ori	r24, 0x08	; 8
    1d1c:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1d1e:	f8 01       	movw	r30, r16
    1d20:	80 81       	ld	r24, Z
    1d22:	8e 7f       	andi	r24, 0xFE	; 254
    1d24:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1d26:	88 81       	ld	r24, Y
    1d28:	80 61       	ori	r24, 0x10	; 16
    1d2a:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	08 95       	ret

00001d36 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1d36:	e8 ed       	ldi	r30, 0xD8	; 216
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8f 7e       	andi	r24, 0xEF	; 239
    1d3e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1d40:	e7 ed       	ldi	r30, 0xD7	; 215
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	81 60       	ori	r24, 0x01	; 1
    1d48:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1d4a:	84 e0       	ldi	r24, 0x04	; 4
    1d4c:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	80 93 8a 02 	sts	0x028A, r24

	USB_ResetInterface();
    1d54:	b0 cf       	rjmp	.-160    	; 0x1cb6 <USB_ResetInterface>

00001d56 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1d56:	e8 ed       	ldi	r30, 0xD8	; 216
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8e 7f       	andi	r24, 0xFE	; 254
    1d5e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1d60:	10 92 e2 00 	sts	0x00E2, r1
    1d64:	08 95       	ret

00001d66 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1d66:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1d6a:	10 92 e1 00 	sts	0x00E1, r1
    1d6e:	08 95       	ret

00001d70 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1d70:	1f 92       	push	r1
    1d72:	0f 92       	push	r0
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	0f 92       	push	r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	2f 93       	push	r18
    1d7c:	3f 93       	push	r19
    1d7e:	4f 93       	push	r20
    1d80:	5f 93       	push	r21
    1d82:	6f 93       	push	r22
    1d84:	7f 93       	push	r23
    1d86:	8f 93       	push	r24
    1d88:	9f 93       	push	r25
    1d8a:	af 93       	push	r26
    1d8c:	bf 93       	push	r27
    1d8e:	ef 93       	push	r30
    1d90:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1d92:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1d96:	82 ff       	sbrs	r24, 2
    1d98:	0a c0       	rjmp	.+20     	; 0x1dae <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1d9a:	80 91 e2 00 	lds	r24, 0x00E2
    1d9e:	82 ff       	sbrs	r24, 2
    1da0:	06 c0       	rjmp	.+12     	; 0x1dae <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1da2:	80 91 e1 00 	lds	r24, 0x00E1
    1da6:	8b 7f       	andi	r24, 0xFB	; 251
    1da8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1dac:	38 d2       	rcall	.+1136   	; 0x221e <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1dae:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1db2:	80 ff       	sbrs	r24, 0
    1db4:	1d c0       	rjmp	.+58     	; 0x1df0 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1db6:	80 91 d8 00 	lds	r24, 0x00D8
    1dba:	80 ff       	sbrs	r24, 0
    1dbc:	19 c0       	rjmp	.+50     	; 0x1df0 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1dbe:	80 91 da 00 	lds	r24, 0x00DA
    1dc2:	8e 7f       	andi	r24, 0xFE	; 254
    1dc4:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1dc8:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1dcc:	80 ff       	sbrs	r24, 0
    1dce:	0c c0       	rjmp	.+24     	; 0x1de8 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1dd0:	80 e1       	ldi	r24, 0x10	; 16
    1dd2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1dd4:	82 e1       	ldi	r24, 0x12	; 18
    1dd6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1dd8:	09 b4       	in	r0, 0x29	; 41
    1dda:	00 fe       	sbrs	r0, 0
    1ddc:	fd cf       	rjmp	.-6      	; 0x1dd8 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	80 93 8b 02 	sts	0x028B, r24
			EVENT_USB_Device_Connect();
    1de4:	a8 dd       	rcall	.-1200   	; 0x1936 <EVENT_USB_Device_Connect>
    1de6:	04 c0       	rjmp	.+8      	; 0x1df0 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1de8:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1dea:	10 92 8b 02 	sts	0x028B, r1
			EVENT_USB_Device_Disconnect();
    1dee:	a4 dd       	rcall	.-1208   	; 0x1938 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1df0:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1df4:	80 ff       	sbrs	r24, 0
    1df6:	18 c0       	rjmp	.+48     	; 0x1e28 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1df8:	80 91 e2 00 	lds	r24, 0x00E2
    1dfc:	80 ff       	sbrs	r24, 0
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1e00:	80 91 e2 00 	lds	r24, 0x00E2
    1e04:	8e 7f       	andi	r24, 0xFE	; 254
    1e06:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e0a:	80 91 e2 00 	lds	r24, 0x00E2
    1e0e:	80 61       	ori	r24, 0x10	; 16
    1e10:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1e14:	80 91 d8 00 	lds	r24, 0x00D8
    1e18:	80 62       	ori	r24, 0x20	; 32
    1e1a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1e1e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1e20:	85 e0       	ldi	r24, 0x05	; 5
    1e22:	80 93 8b 02 	sts	0x028B, r24
		EVENT_USB_Device_Suspend();
    1e26:	fb d1       	rcall	.+1014   	; 0x221e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1e28:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1e2c:	84 ff       	sbrs	r24, 4
    1e2e:	2f c0       	rjmp	.+94     	; 0x1e8e <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1e30:	80 91 e2 00 	lds	r24, 0x00E2
    1e34:	84 ff       	sbrs	r24, 4
    1e36:	2b c0       	rjmp	.+86     	; 0x1e8e <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1e38:	80 e1       	ldi	r24, 0x10	; 16
    1e3a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e3c:	82 e1       	ldi	r24, 0x12	; 18
    1e3e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1e40:	09 b4       	in	r0, 0x29	; 41
    1e42:	00 fe       	sbrs	r0, 0
    1e44:	fd cf       	rjmp	.-6      	; 0x1e40 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1e46:	80 91 d8 00 	lds	r24, 0x00D8
    1e4a:	8f 7d       	andi	r24, 0xDF	; 223
    1e4c:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1e50:	80 91 e1 00 	lds	r24, 0x00E1
    1e54:	8f 7e       	andi	r24, 0xEF	; 239
    1e56:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1e5a:	80 91 e2 00 	lds	r24, 0x00E2
    1e5e:	8f 7e       	andi	r24, 0xEF	; 239
    1e60:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1e64:	80 91 e2 00 	lds	r24, 0x00E2
    1e68:	81 60       	ori	r24, 0x01	; 1
    1e6a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1e6e:	80 91 87 02 	lds	r24, 0x0287
    1e72:	88 23       	and	r24, r24
    1e74:	11 f0       	breq	.+4      	; 0x1e7a <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1e76:	84 e0       	ldi	r24, 0x04	; 4
    1e78:	07 c0       	rjmp	.+14     	; 0x1e88 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1e7a:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1e7e:	87 ff       	sbrs	r24, 7
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <__vector_10+0x116>
    1e82:	83 e0       	ldi	r24, 0x03	; 3
    1e84:	01 c0       	rjmp	.+2      	; 0x1e88 <__vector_10+0x118>
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	80 93 8b 02 	sts	0x028B, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1e8c:	c8 d1       	rcall	.+912    	; 0x221e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1e8e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1e92:	83 ff       	sbrs	r24, 3
    1e94:	27 c0       	rjmp	.+78     	; 0x1ee4 <__vector_10+0x174>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1e96:	80 91 e2 00 	lds	r24, 0x00E2
    1e9a:	83 ff       	sbrs	r24, 3
    1e9c:	23 c0       	rjmp	.+70     	; 0x1ee4 <__vector_10+0x174>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1e9e:	80 91 e1 00 	lds	r24, 0x00E1
    1ea2:	87 7f       	andi	r24, 0xF7	; 247
    1ea4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1ea8:	82 e0       	ldi	r24, 0x02	; 2
    1eaa:	80 93 8b 02 	sts	0x028B, r24
		USB_Device_ConfigurationNumber = 0;
    1eae:	10 92 87 02 	sts	0x0287, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1eb2:	80 91 e1 00 	lds	r24, 0x00E1
    1eb6:	8e 7f       	andi	r24, 0xFE	; 254
    1eb8:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1ebc:	80 91 e2 00 	lds	r24, 0x00E2
    1ec0:	8e 7f       	andi	r24, 0xFE	; 254
    1ec2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1ec6:	80 91 e2 00 	lds	r24, 0x00E2
    1eca:	80 61       	ori	r24, 0x10	; 16
    1ecc:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ed0:	42 e0       	ldi	r20, 0x02	; 2
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	2c de       	rcall	.-936    	; 0x1b30 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1ed8:	80 91 f0 00 	lds	r24, 0x00F0
    1edc:	88 60       	ori	r24, 0x08	; 8
    1ede:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1ee2:	9d d1       	rcall	.+826    	; 0x221e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1ee4:	ff 91       	pop	r31
    1ee6:	ef 91       	pop	r30
    1ee8:	bf 91       	pop	r27
    1eea:	af 91       	pop	r26
    1eec:	9f 91       	pop	r25
    1eee:	8f 91       	pop	r24
    1ef0:	7f 91       	pop	r23
    1ef2:	6f 91       	pop	r22
    1ef4:	5f 91       	pop	r21
    1ef6:	4f 91       	pop	r20
    1ef8:	3f 91       	pop	r19
    1efa:	2f 91       	pop	r18
    1efc:	0f 90       	pop	r0
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	0f 90       	pop	r0
    1f02:	1f 90       	pop	r1
    1f04:	18 95       	reti

00001f06 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1f06:	1f 92       	push	r1
    1f08:	0f 92       	push	r0
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	0f 92       	push	r0
    1f0e:	11 24       	eor	r1, r1
    1f10:	2f 93       	push	r18
    1f12:	3f 93       	push	r19
    1f14:	4f 93       	push	r20
    1f16:	5f 93       	push	r21
    1f18:	6f 93       	push	r22
    1f1a:	7f 93       	push	r23
    1f1c:	8f 93       	push	r24
    1f1e:	9f 93       	push	r25
    1f20:	af 93       	push	r26
    1f22:	bf 93       	push	r27
    1f24:	cf 93       	push	r28
    1f26:	ef 93       	push	r30
    1f28:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f2a:	c0 91 e9 00 	lds	r28, 0x00E9
    1f2e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f30:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f34:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1f38:	80 91 f0 00 	lds	r24, 0x00F0
    1f3c:	87 7f       	andi	r24, 0xF7	; 247
    1f3e:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1f42:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1f44:	1b d0       	rcall	.+54     	; 0x1f7c <USB_Device_ProcessControlRequest>
    1f46:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1f4a:	80 91 f0 00 	lds	r24, 0x00F0
    1f4e:	88 60       	ori	r24, 0x08	; 8
    1f50:	80 93 f0 00 	sts	0x00F0, r24
    1f54:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1f58:	ff 91       	pop	r31
    1f5a:	ef 91       	pop	r30
    1f5c:	cf 91       	pop	r28
    1f5e:	bf 91       	pop	r27
    1f60:	af 91       	pop	r26
    1f62:	9f 91       	pop	r25
    1f64:	8f 91       	pop	r24
    1f66:	7f 91       	pop	r23
    1f68:	6f 91       	pop	r22
    1f6a:	5f 91       	pop	r21
    1f6c:	4f 91       	pop	r20
    1f6e:	3f 91       	pop	r19
    1f70:	2f 91       	pop	r18
    1f72:	0f 90       	pop	r0
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	0f 90       	pop	r0
    1f78:	1f 90       	pop	r1
    1f7a:	18 95       	reti

00001f7c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	aa 97       	sbiw	r28, 0x2a	; 42
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	ec e8       	ldi	r30, 0x8C	; 140
    1f94:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1f96:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1f9a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1f9c:	22 e0       	ldi	r18, 0x02	; 2
    1f9e:	e4 39       	cpi	r30, 0x94	; 148
    1fa0:	f2 07       	cpc	r31, r18
    1fa2:	c9 f7       	brne	.-14     	; 0x1f96 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1fa4:	cd dc       	rcall	.-1638   	; 0x1940 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fa6:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1faa:	83 ff       	sbrs	r24, 3
    1fac:	20 c1       	rjmp	.+576    	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1fae:	90 91 8c 02 	lds	r25, 0x028C

		switch (USB_ControlRequest.bRequest)
    1fb2:	80 91 8d 02 	lds	r24, 0x028D
    1fb6:	85 30       	cpi	r24, 0x05	; 5
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <USB_Device_ProcessControlRequest+0x40>
    1fba:	77 c0       	rjmp	.+238    	; 0x20aa <USB_Device_ProcessControlRequest+0x12e>
    1fbc:	30 f4       	brcc	.+12     	; 0x1fca <USB_Device_ProcessControlRequest+0x4e>
    1fbe:	81 30       	cpi	r24, 0x01	; 1
    1fc0:	81 f1       	breq	.+96     	; 0x2022 <USB_Device_ProcessControlRequest+0xa6>
    1fc2:	68 f0       	brcs	.+26     	; 0x1fde <USB_Device_ProcessControlRequest+0x62>
    1fc4:	83 30       	cpi	r24, 0x03	; 3
    1fc6:	69 f1       	breq	.+90     	; 0x2022 <USB_Device_ProcessControlRequest+0xa6>
    1fc8:	12 c1       	rjmp	.+548    	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
    1fca:	88 30       	cpi	r24, 0x08	; 8
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <USB_Device_ProcessControlRequest+0x54>
    1fce:	e1 c0       	rjmp	.+450    	; 0x2192 <USB_Device_ProcessControlRequest+0x216>
    1fd0:	89 30       	cpi	r24, 0x09	; 9
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <USB_Device_ProcessControlRequest+0x5a>
    1fd4:	f0 c0       	rjmp	.+480    	; 0x21b6 <USB_Device_ProcessControlRequest+0x23a>
    1fd6:	86 30       	cpi	r24, 0x06	; 6
    1fd8:	09 f0       	breq	.+2      	; 0x1fdc <USB_Device_ProcessControlRequest+0x60>
    1fda:	09 c1       	rjmp	.+530    	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
    1fdc:	88 c0       	rjmp	.+272    	; 0x20ee <USB_Device_ProcessControlRequest+0x172>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1fde:	90 38       	cpi	r25, 0x80	; 128
    1fe0:	81 f0       	breq	.+32     	; 0x2002 <USB_Device_ProcessControlRequest+0x86>
    1fe2:	92 38       	cpi	r25, 0x82	; 130
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <USB_Device_ProcessControlRequest+0x6c>
    1fe6:	03 c1       	rjmp	.+518    	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fe8:	80 91 90 02 	lds	r24, 0x0290
    1fec:	8f 70       	andi	r24, 0x0F	; 15
    1fee:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ff2:	80 91 eb 00 	lds	r24, 0x00EB
    1ff6:	85 fb       	bst	r24, 5
    1ff8:	88 27       	eor	r24, r24
    1ffa:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ffc:	10 92 e9 00 	sts	0x00E9, r1
    2000:	06 c0       	rjmp	.+12     	; 0x200e <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2002:	80 91 88 02 	lds	r24, 0x0288
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2006:	90 91 89 02 	lds	r25, 0x0289
    200a:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    200c:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    200e:	90 91 e8 00 	lds	r25, 0x00E8
    2012:	97 7f       	andi	r25, 0xF7	; 247
    2014:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2018:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    201c:	10 92 f1 00 	sts	0x00F1, r1
    2020:	c3 c0       	rjmp	.+390    	; 0x21a8 <USB_Device_ProcessControlRequest+0x22c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2022:	29 2f       	mov	r18, r25
    2024:	2d 7f       	andi	r18, 0xFD	; 253
    2026:	09 f0       	breq	.+2      	; 0x202a <USB_Device_ProcessControlRequest+0xae>
    2028:	e2 c0       	rjmp	.+452    	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    202a:	99 23       	and	r25, r25
    202c:	19 f0       	breq	.+6      	; 0x2034 <USB_Device_ProcessControlRequest+0xb8>
    202e:	92 30       	cpi	r25, 0x02	; 2
    2030:	61 f0       	breq	.+24     	; 0x204a <USB_Device_ProcessControlRequest+0xce>
    2032:	dd c0       	rjmp	.+442    	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    2034:	90 91 8e 02 	lds	r25, 0x028E
    2038:	91 30       	cpi	r25, 0x01	; 1
    203a:	09 f0       	breq	.+2      	; 0x203e <USB_Device_ProcessControlRequest+0xc2>
    203c:	d8 c0       	rjmp	.+432    	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    203e:	83 30       	cpi	r24, 0x03	; 3
    2040:	09 f0       	breq	.+2      	; 0x2044 <USB_Device_ProcessControlRequest+0xc8>
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	90 93 89 02 	sts	0x0289, r25
    2048:	2a c0       	rjmp	.+84     	; 0x209e <USB_Device_ProcessControlRequest+0x122>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    204a:	90 91 8e 02 	lds	r25, 0x028E
    204e:	91 11       	cpse	r25, r1
    2050:	26 c0       	rjmp	.+76     	; 0x209e <USB_Device_ProcessControlRequest+0x122>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2052:	20 91 90 02 	lds	r18, 0x0290
    2056:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    2058:	09 f4       	brne	.+2      	; 0x205c <USB_Device_ProcessControlRequest+0xe0>
    205a:	c9 c0       	rjmp	.+402    	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    205c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2060:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2064:	90 ff       	sbrs	r25, 0
    2066:	1b c0       	rjmp	.+54     	; 0x209e <USB_Device_ProcessControlRequest+0x122>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2068:	83 30       	cpi	r24, 0x03	; 3
    206a:	21 f4       	brne	.+8      	; 0x2074 <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    206c:	80 91 eb 00 	lds	r24, 0x00EB
    2070:	80 62       	ori	r24, 0x20	; 32
    2072:	13 c0       	rjmp	.+38     	; 0x209a <USB_Device_ProcessControlRequest+0x11e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2074:	80 91 eb 00 	lds	r24, 0x00EB
    2078:	80 61       	ori	r24, 0x10	; 16
    207a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	02 2e       	mov	r0, r18
    2084:	01 c0       	rjmp	.+2      	; 0x2088 <USB_Device_ProcessControlRequest+0x10c>
    2086:	88 0f       	add	r24, r24
    2088:	0a 94       	dec	r0
    208a:	ea f7       	brpl	.-6      	; 0x2086 <USB_Device_ProcessControlRequest+0x10a>
    208c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    2090:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2094:	80 91 eb 00 	lds	r24, 0x00EB
    2098:	88 60       	ori	r24, 0x08	; 8
    209a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    209e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20a2:	80 91 e8 00 	lds	r24, 0x00E8
    20a6:	87 7f       	andi	r24, 0xF7	; 247
    20a8:	82 c0       	rjmp	.+260    	; 0x21ae <USB_Device_ProcessControlRequest+0x232>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    20aa:	91 11       	cpse	r25, r1
    20ac:	a0 c0       	rjmp	.+320    	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    20ae:	10 91 8e 02 	lds	r17, 0x028E
    20b2:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    20b4:	80 91 e3 00 	lds	r24, 0x00E3
    20b8:	80 78       	andi	r24, 0x80	; 128
    20ba:	81 2b       	or	r24, r17
    20bc:	80 93 e3 00 	sts	0x00E3, r24
    20c0:	80 91 e8 00 	lds	r24, 0x00E8
    20c4:	87 7f       	andi	r24, 0xF7	; 247
    20c6:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    20ca:	a4 dd       	rcall	.-1208   	; 0x1c14 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    20cc:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    20d0:	80 ff       	sbrs	r24, 0
    20d2:	fc cf       	rjmp	.-8      	; 0x20cc <USB_Device_ProcessControlRequest+0x150>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    20d4:	80 91 e3 00 	lds	r24, 0x00E3
    20d8:	80 68       	ori	r24, 0x80	; 128
    20da:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    20de:	11 23       	and	r17, r17
    20e0:	11 f0       	breq	.+4      	; 0x20e6 <USB_Device_ProcessControlRequest+0x16a>
    20e2:	83 e0       	ldi	r24, 0x03	; 3
    20e4:	01 c0       	rjmp	.+2      	; 0x20e8 <USB_Device_ProcessControlRequest+0x16c>
    20e6:	82 e0       	ldi	r24, 0x02	; 2
    20e8:	80 93 8b 02 	sts	0x028B, r24
    20ec:	80 c0       	rjmp	.+256    	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    20ee:	90 58       	subi	r25, 0x80	; 128
    20f0:	92 30       	cpi	r25, 0x02	; 2
    20f2:	08 f0       	brcs	.+2      	; 0x20f6 <USB_Device_ProcessControlRequest+0x17a>
    20f4:	7c c0       	rjmp	.+248    	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    20f6:	80 91 8e 02 	lds	r24, 0x028E
    20fa:	90 91 8f 02 	lds	r25, 0x028F
    20fe:	8c 3d       	cpi	r24, 0xDC	; 220
    2100:	23 e0       	ldi	r18, 0x03	; 3
    2102:	92 07       	cpc	r25, r18
    2104:	71 f5       	brne	.+92     	; 0x2162 <USB_Device_ProcessControlRequest+0x1e6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    210a:	8a e2       	ldi	r24, 0x2A	; 42
    210c:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    210e:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2110:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2112:	de 01       	movw	r26, r28
    2114:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2116:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2118:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    211a:	51 e2       	ldi	r21, 0x21	; 33
    211c:	e3 2f       	mov	r30, r19
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	50 93 57 00 	sts	0x0057, r21
    2124:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    2126:	20 ff       	sbrs	r18, 0
    2128:	03 c0       	rjmp	.+6      	; 0x2130 <USB_Device_ProcessControlRequest+0x1b4>
					{
						SerialByte >>= 4;
    212a:	e2 95       	swap	r30
    212c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    212e:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2130:	ef 70       	andi	r30, 0x0F	; 15
    2132:	8e 2f       	mov	r24, r30
    2134:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2136:	ea 30       	cpi	r30, 0x0A	; 10
    2138:	10 f0       	brcs	.+4      	; 0x213e <USB_Device_ProcessControlRequest+0x1c2>
    213a:	c7 96       	adiw	r24, 0x37	; 55
    213c:	01 c0       	rjmp	.+2      	; 0x2140 <USB_Device_ProcessControlRequest+0x1c4>
    213e:	c0 96       	adiw	r24, 0x30	; 48
    2140:	8d 93       	st	X+, r24
    2142:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2144:	2f 5f       	subi	r18, 0xFF	; 255
    2146:	24 31       	cpi	r18, 0x14	; 20
    2148:	49 f7       	brne	.-46     	; 0x211c <USB_Device_ProcessControlRequest+0x1a0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    214a:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    214c:	80 91 e8 00 	lds	r24, 0x00E8
    2150:	87 7f       	andi	r24, 0xF7	; 247
    2152:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2156:	6a e2       	ldi	r22, 0x2A	; 42
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	ce 01       	movw	r24, r28
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	25 dc       	rcall	.-1974   	; 0x19aa <Endpoint_Write_Control_Stream_LE>
    2160:	12 c0       	rjmp	.+36     	; 0x2186 <USB_Device_ProcessControlRequest+0x20a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2162:	ae 01       	movw	r20, r28
    2164:	4f 5f       	subi	r20, 0xFF	; 255
    2166:	5f 4f       	sbci	r21, 0xFF	; 255
    2168:	60 91 90 02 	lds	r22, 0x0290
    216c:	ec db       	rcall	.-2088   	; 0x1946 <CALLBACK_USB_GetDescriptor>
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	09 f4       	brne	.+2      	; 0x2174 <USB_Device_ProcessControlRequest+0x1f8>
    2172:	3d c0       	rjmp	.+122    	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
    2174:	20 91 e8 00 	lds	r18, 0x00E8
    2178:	27 7f       	andi	r18, 0xF7	; 247
    217a:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    217e:	bc 01       	movw	r22, r24
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
    2184:	73 dc       	rcall	.-1818   	; 0x1a6c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2186:	80 91 e8 00 	lds	r24, 0x00E8
    218a:	8b 77       	andi	r24, 0x7B	; 123
    218c:	80 93 e8 00 	sts	0x00E8, r24
    2190:	2e c0       	rjmp	.+92     	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2192:	90 38       	cpi	r25, 0x80	; 128
    2194:	61 f5       	brne	.+88     	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2196:	80 91 e8 00 	lds	r24, 0x00E8
    219a:	87 7f       	andi	r24, 0xF7	; 247
    219c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    21a0:	80 91 87 02 	lds	r24, 0x0287
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21a4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21a8:	80 91 e8 00 	lds	r24, 0x00E8
    21ac:	8e 77       	andi	r24, 0x7E	; 126
    21ae:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    21b2:	30 dd       	rcall	.-1440   	; 0x1c14 <Endpoint_ClearStatusStage>
    21b4:	1c c0       	rjmp	.+56     	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    21b6:	91 11       	cpse	r25, r1
    21b8:	1a c0       	rjmp	.+52     	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    21ba:	90 91 8e 02 	lds	r25, 0x028E
    21be:	92 30       	cpi	r25, 0x02	; 2
    21c0:	b0 f4       	brcc	.+44     	; 0x21ee <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21c2:	80 91 e8 00 	lds	r24, 0x00E8
    21c6:	87 7f       	andi	r24, 0xF7	; 247
    21c8:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    21cc:	90 93 87 02 	sts	0x0287, r25

	Endpoint_ClearStatusStage();
    21d0:	21 dd       	rcall	.-1470   	; 0x1c14 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    21d2:	80 91 87 02 	lds	r24, 0x0287
    21d6:	81 11       	cpse	r24, r1
    21d8:	04 c0       	rjmp	.+8      	; 0x21e2 <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    21da:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    21de:	87 ff       	sbrs	r24, 7
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <USB_Device_ProcessControlRequest+0x26a>
    21e2:	84 e0       	ldi	r24, 0x04	; 4
    21e4:	01 c0       	rjmp	.+2      	; 0x21e8 <USB_Device_ProcessControlRequest+0x26c>
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	80 93 8b 02 	sts	0x028B, r24

	EVENT_USB_Device_ConfigurationChanged();
    21ec:	a6 db       	rcall	.-2228   	; 0x193a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21ee:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    21f2:	83 ff       	sbrs	r24, 3
    21f4:	0a c0       	rjmp	.+20     	; 0x220a <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21f6:	80 91 e8 00 	lds	r24, 0x00E8
    21fa:	87 7f       	andi	r24, 0xF7	; 247
    21fc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2200:	80 91 eb 00 	lds	r24, 0x00EB
    2204:	80 62       	ori	r24, 0x20	; 32
    2206:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    220a:	aa 96       	adiw	r28, 0x2a	; 42
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	1f 91       	pop	r17
    221c:	08 95       	ret

0000221e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    221e:	08 95       	ret

00002220 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2220:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2222:	80 91 8b 02 	lds	r24, 0x028B
    2226:	88 23       	and	r24, r24
    2228:	a9 f0       	breq	.+42     	; 0x2254 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    222a:	80 91 e9 00 	lds	r24, 0x00E9
    222e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2230:	90 91 ec 00 	lds	r25, 0x00EC
    2234:	90 ff       	sbrs	r25, 0
    2236:	02 c0       	rjmp	.+4      	; 0x223c <USB_USBTask+0x1c>
    2238:	90 e8       	ldi	r25, 0x80	; 128
    223a:	01 c0       	rjmp	.+2      	; 0x223e <USB_USBTask+0x1e>
    223c:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    223e:	c9 2f       	mov	r28, r25
    2240:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2242:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2246:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    224a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    224c:	97 de       	rcall	.-722    	; 0x1f7c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    224e:	cf 70       	andi	r28, 0x0F	; 15
    2250:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2254:	cf 91       	pop	r28
    2256:	08 95       	ret

00002258 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	ec 01       	movw	r28, r24
    225e:	fc 01       	movw	r30, r24
    2260:	70 96       	adiw	r30, 0x10	; 16
    2262:	8b e0       	ldi	r24, 0x0B	; 11
    2264:	df 01       	movw	r26, r30
    2266:	1d 92       	st	X+, r1
    2268:	8a 95       	dec	r24
    226a:	e9 f7       	brne	.-6      	; 0x2266 <CDC_Device_ConfigureEndpoints+0xe>
    226c:	82 e0       	ldi	r24, 0x02	; 2
    226e:	8c 83       	std	Y+4, r24	; 0x04
    2270:	89 87       	std	Y+9, r24	; 0x09
    2272:	83 e0       	ldi	r24, 0x03	; 3
    2274:	8e 87       	std	Y+14, r24	; 0x0e
    2276:	61 e0       	ldi	r22, 0x01	; 1
    2278:	ce 01       	movw	r24, r28
    227a:	01 96       	adiw	r24, 0x01	; 1
    227c:	8e dc       	rcall	.-1764   	; 0x1b9a <Endpoint_ConfigureEndpointTable>
    227e:	88 23       	and	r24, r24
    2280:	61 f0       	breq	.+24     	; 0x229a <CDC_Device_ConfigureEndpoints+0x42>
    2282:	61 e0       	ldi	r22, 0x01	; 1
    2284:	ce 01       	movw	r24, r28
    2286:	06 96       	adiw	r24, 0x06	; 6
    2288:	88 dc       	rcall	.-1776   	; 0x1b9a <Endpoint_ConfigureEndpointTable>
    228a:	88 23       	and	r24, r24
    228c:	31 f0       	breq	.+12     	; 0x229a <CDC_Device_ConfigureEndpoints+0x42>
    228e:	61 e0       	ldi	r22, 0x01	; 1
    2290:	ce 01       	movw	r24, r28
    2292:	0b 96       	adiw	r24, 0x0b	; 11
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	80 cc       	rjmp	.-1792   	; 0x1b9a <Endpoint_ConfigureEndpointTable>
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	08 95       	ret

000022a2 <CDC_Device_SendByte>:
    22a2:	cf 93       	push	r28
    22a4:	c6 2f       	mov	r28, r22
    22a6:	20 91 8b 02 	lds	r18, 0x028B
    22aa:	24 30       	cpi	r18, 0x04	; 4
    22ac:	f1 f4       	brne	.+60     	; 0x22ea <CDC_Device_SendByte+0x48>
    22ae:	fc 01       	movw	r30, r24
    22b0:	44 89       	ldd	r20, Z+20	; 0x14
    22b2:	55 89       	ldd	r21, Z+21	; 0x15
    22b4:	66 89       	ldd	r22, Z+22	; 0x16
    22b6:	77 89       	ldd	r23, Z+23	; 0x17
    22b8:	45 2b       	or	r20, r21
    22ba:	46 2b       	or	r20, r22
    22bc:	47 2b       	or	r20, r23
    22be:	a9 f0       	breq	.+42     	; 0x22ea <CDC_Device_SendByte+0x48>
    22c0:	81 81       	ldd	r24, Z+1	; 0x01
    22c2:	8f 70       	andi	r24, 0x0F	; 15
    22c4:	80 93 e9 00 	sts	0x00E9, r24
    22c8:	80 91 e8 00 	lds	r24, 0x00E8
    22cc:	85 ff       	sbrs	r24, 5
    22ce:	04 c0       	rjmp	.+8      	; 0x22d8 <CDC_Device_SendByte+0x36>
    22d0:	c0 93 f1 00 	sts	0x00F1, r28
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	0a c0       	rjmp	.+20     	; 0x22ec <CDC_Device_SendByte+0x4a>
    22d8:	80 91 e8 00 	lds	r24, 0x00E8
    22dc:	8e 77       	andi	r24, 0x7E	; 126
    22de:	80 93 e8 00 	sts	0x00E8, r24
    22e2:	b9 dc       	rcall	.-1678   	; 0x1c56 <Endpoint_WaitUntilReady>
    22e4:	88 23       	and	r24, r24
    22e6:	a1 f3       	breq	.-24     	; 0x22d0 <CDC_Device_SendByte+0x2e>
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <CDC_Device_SendByte+0x4a>
    22ea:	82 e0       	ldi	r24, 0x02	; 2
    22ec:	cf 91       	pop	r28
    22ee:	08 95       	ret

000022f0 <CDC_Device_putchar>:
    22f0:	fb 01       	movw	r30, r22
    22f2:	68 2f       	mov	r22, r24
    22f4:	84 85       	ldd	r24, Z+12	; 0x0c
    22f6:	95 85       	ldd	r25, Z+13	; 0x0d
    22f8:	d4 df       	rcall	.-88     	; 0x22a2 <CDC_Device_SendByte>
    22fa:	21 e0       	ldi	r18, 0x01	; 1
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	81 11       	cpse	r24, r1
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <CDC_Device_putchar+0x16>
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	88 27       	eor	r24, r24
    2308:	99 27       	eor	r25, r25
    230a:	82 1b       	sub	r24, r18
    230c:	93 0b       	sbc	r25, r19
    230e:	08 95       	ret

00002310 <CDC_Device_Flush>:
    2310:	20 91 8b 02 	lds	r18, 0x028B
    2314:	24 30       	cpi	r18, 0x04	; 4
    2316:	41 f5       	brne	.+80     	; 0x2368 <CDC_Device_Flush+0x58>
    2318:	fc 01       	movw	r30, r24
    231a:	44 89       	ldd	r20, Z+20	; 0x14
    231c:	55 89       	ldd	r21, Z+21	; 0x15
    231e:	66 89       	ldd	r22, Z+22	; 0x16
    2320:	77 89       	ldd	r23, Z+23	; 0x17
    2322:	45 2b       	or	r20, r21
    2324:	46 2b       	or	r20, r22
    2326:	47 2b       	or	r20, r23
    2328:	f9 f0       	breq	.+62     	; 0x2368 <CDC_Device_Flush+0x58>
    232a:	81 81       	ldd	r24, Z+1	; 0x01
    232c:	8f 70       	andi	r24, 0x0F	; 15
    232e:	80 93 e9 00 	sts	0x00E9, r24
    2332:	20 91 f3 00 	lds	r18, 0x00F3
    2336:	80 91 f2 00 	lds	r24, 0x00F2
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	92 2b       	or	r25, r18
    233e:	89 2b       	or	r24, r25
    2340:	89 f0       	breq	.+34     	; 0x2364 <CDC_Device_Flush+0x54>
    2342:	90 91 e8 00 	lds	r25, 0x00E8
    2346:	80 91 e8 00 	lds	r24, 0x00E8
    234a:	8e 77       	andi	r24, 0x7E	; 126
    234c:	80 93 e8 00 	sts	0x00E8, r24
    2350:	95 fd       	sbrc	r25, 5
    2352:	08 c0       	rjmp	.+16     	; 0x2364 <CDC_Device_Flush+0x54>
    2354:	80 dc       	rcall	.-1792   	; 0x1c56 <Endpoint_WaitUntilReady>
    2356:	81 11       	cpse	r24, r1
    2358:	08 c0       	rjmp	.+16     	; 0x236a <CDC_Device_Flush+0x5a>
    235a:	80 91 e8 00 	lds	r24, 0x00E8
    235e:	8e 77       	andi	r24, 0x7E	; 126
    2360:	80 93 e8 00 	sts	0x00E8, r24
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	08 95       	ret
    2368:	82 e0       	ldi	r24, 0x02	; 2
    236a:	08 95       	ret

0000236c <CDC_Device_USBTask>:
    236c:	20 91 8b 02 	lds	r18, 0x028B
    2370:	24 30       	cpi	r18, 0x04	; 4
    2372:	89 f4       	brne	.+34     	; 0x2396 <CDC_Device_USBTask+0x2a>
    2374:	fc 01       	movw	r30, r24
    2376:	44 89       	ldd	r20, Z+20	; 0x14
    2378:	55 89       	ldd	r21, Z+21	; 0x15
    237a:	66 89       	ldd	r22, Z+22	; 0x16
    237c:	77 89       	ldd	r23, Z+23	; 0x17
    237e:	45 2b       	or	r20, r21
    2380:	46 2b       	or	r20, r22
    2382:	47 2b       	or	r20, r23
    2384:	41 f0       	breq	.+16     	; 0x2396 <CDC_Device_USBTask+0x2a>
    2386:	21 81       	ldd	r18, Z+1	; 0x01
    2388:	2f 70       	andi	r18, 0x0F	; 15
    238a:	20 93 e9 00 	sts	0x00E9, r18
    238e:	20 91 e8 00 	lds	r18, 0x00E8
    2392:	20 fd       	sbrc	r18, 0
    2394:	bd cf       	rjmp	.-134    	; 0x2310 <CDC_Device_Flush>
    2396:	08 95       	ret

00002398 <CDC_Device_ReceiveByte>:
    2398:	20 91 8b 02 	lds	r18, 0x028B
    239c:	24 30       	cpi	r18, 0x04	; 4
    239e:	19 f0       	breq	.+6      	; 0x23a6 <CDC_Device_ReceiveByte+0xe>
    23a0:	8f ef       	ldi	r24, 0xFF	; 255
    23a2:	9f ef       	ldi	r25, 0xFF	; 255
    23a4:	08 95       	ret
    23a6:	fc 01       	movw	r30, r24
    23a8:	44 89       	ldd	r20, Z+20	; 0x14
    23aa:	55 89       	ldd	r21, Z+21	; 0x15
    23ac:	66 89       	ldd	r22, Z+22	; 0x16
    23ae:	77 89       	ldd	r23, Z+23	; 0x17
    23b0:	45 2b       	or	r20, r21
    23b2:	46 2b       	or	r20, r22
    23b4:	47 2b       	or	r20, r23
    23b6:	a1 f3       	breq	.-24     	; 0x23a0 <CDC_Device_ReceiveByte+0x8>
    23b8:	86 81       	ldd	r24, Z+6	; 0x06
    23ba:	8f 70       	andi	r24, 0x0F	; 15
    23bc:	80 93 e9 00 	sts	0x00E9, r24
    23c0:	80 91 e8 00 	lds	r24, 0x00E8
    23c4:	82 ff       	sbrs	r24, 2
    23c6:	ec cf       	rjmp	.-40     	; 0x23a0 <CDC_Device_ReceiveByte+0x8>
    23c8:	20 91 f3 00 	lds	r18, 0x00F3
    23cc:	80 91 f2 00 	lds	r24, 0x00F2
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	92 2b       	or	r25, r18
    23d4:	89 2b       	or	r24, r25
    23d6:	21 f0       	breq	.+8      	; 0x23e0 <CDC_Device_ReceiveByte+0x48>
    23d8:	20 91 f1 00 	lds	r18, 0x00F1
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <CDC_Device_ReceiveByte+0x4c>
    23e0:	2f ef       	ldi	r18, 0xFF	; 255
    23e2:	3f ef       	ldi	r19, 0xFF	; 255
    23e4:	40 91 f3 00 	lds	r20, 0x00F3
    23e8:	80 91 f2 00 	lds	r24, 0x00F2
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	94 2b       	or	r25, r20
    23f0:	89 2b       	or	r24, r25
    23f2:	29 f4       	brne	.+10     	; 0x23fe <CDC_Device_ReceiveByte+0x66>
    23f4:	80 91 e8 00 	lds	r24, 0x00E8
    23f8:	8b 77       	andi	r24, 0x7B	; 123
    23fa:	80 93 e8 00 	sts	0x00E8, r24
    23fe:	c9 01       	movw	r24, r18
    2400:	08 95       	ret

00002402 <CDC_Device_getchar>:
    2402:	fc 01       	movw	r30, r24
    2404:	84 85       	ldd	r24, Z+12	; 0x0c
    2406:	95 85       	ldd	r25, Z+13	; 0x0d
    2408:	c7 df       	rcall	.-114    	; 0x2398 <CDC_Device_ReceiveByte>
    240a:	97 ff       	sbrs	r25, 7
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <CDC_Device_getchar+0x10>
    240e:	8e ef       	ldi	r24, 0xFE	; 254
    2410:	9f ef       	ldi	r25, 0xFF	; 255
    2412:	08 95       	ret

00002414 <CDC_Device_CreateStream>:
    2414:	fb 01       	movw	r30, r22
    2416:	2e e0       	ldi	r18, 0x0E	; 14
    2418:	db 01       	movw	r26, r22
    241a:	1d 92       	st	X+, r1
    241c:	2a 95       	dec	r18
    241e:	e9 f7       	brne	.-6      	; 0x241a <CDC_Device_CreateStream+0x6>
    2420:	23 e0       	ldi	r18, 0x03	; 3
    2422:	23 83       	std	Z+3, r18	; 0x03
    2424:	28 e7       	ldi	r18, 0x78	; 120
    2426:	31 e1       	ldi	r19, 0x11	; 17
    2428:	31 87       	std	Z+9, r19	; 0x09
    242a:	20 87       	std	Z+8, r18	; 0x08
    242c:	21 e0       	ldi	r18, 0x01	; 1
    242e:	32 e1       	ldi	r19, 0x12	; 18
    2430:	33 87       	std	Z+11, r19	; 0x0b
    2432:	22 87       	std	Z+10, r18	; 0x0a
    2434:	95 87       	std	Z+13, r25	; 0x0d
    2436:	84 87       	std	Z+12, r24	; 0x0c
    2438:	08 95       	ret

0000243a <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    243a:	08 95       	ret

0000243c <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2442:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    2446:	83 ff       	sbrs	r24, 3
    2448:	a6 c0       	rjmp	.+332    	; 0x2596 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    244a:	88 81       	ld	r24, Y
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	20 91 90 02 	lds	r18, 0x0290
    2452:	30 91 91 02 	lds	r19, 0x0291
    2456:	28 17       	cp	r18, r24
    2458:	39 07       	cpc	r19, r25
    245a:	09 f0       	breq	.+2      	; 0x245e <CDC_Device_ProcessControlRequest+0x22>
    245c:	9c c0       	rjmp	.+312    	; 0x2596 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
    245e:	80 91 8d 02 	lds	r24, 0x028D
    2462:	81 32       	cpi	r24, 0x21	; 33
    2464:	61 f0       	breq	.+24     	; 0x247e <CDC_Device_ProcessControlRequest+0x42>
    2466:	20 f4       	brcc	.+8      	; 0x2470 <CDC_Device_ProcessControlRequest+0x34>
    2468:	80 32       	cpi	r24, 0x20	; 32
    246a:	09 f4       	brne	.+2      	; 0x246e <CDC_Device_ProcessControlRequest+0x32>
    246c:	3e c0       	rjmp	.+124    	; 0x24ea <CDC_Device_ProcessControlRequest+0xae>
    246e:	93 c0       	rjmp	.+294    	; 0x2596 <CDC_Device_ProcessControlRequest+0x15a>
    2470:	82 32       	cpi	r24, 0x22	; 34
    2472:	09 f4       	brne	.+2      	; 0x2476 <CDC_Device_ProcessControlRequest+0x3a>
    2474:	6c c0       	rjmp	.+216    	; 0x254e <CDC_Device_ProcessControlRequest+0x112>
    2476:	83 32       	cpi	r24, 0x23	; 35
    2478:	09 f4       	brne	.+2      	; 0x247c <CDC_Device_ProcessControlRequest+0x40>
    247a:	7d c0       	rjmp	.+250    	; 0x2576 <CDC_Device_ProcessControlRequest+0x13a>
    247c:	8c c0       	rjmp	.+280    	; 0x2596 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    247e:	80 91 8c 02 	lds	r24, 0x028C
    2482:	81 3a       	cpi	r24, 0xA1	; 161
    2484:	09 f0       	breq	.+2      	; 0x2488 <CDC_Device_ProcessControlRequest+0x4c>
    2486:	87 c0       	rjmp	.+270    	; 0x2596 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2488:	80 91 e8 00 	lds	r24, 0x00E8
    248c:	87 7f       	andi	r24, 0xF7	; 247
    248e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2492:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    2496:	80 ff       	sbrs	r24, 0
    2498:	fc cf       	rjmp	.-8      	; 0x2492 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    249a:	4c 89       	ldd	r20, Y+20	; 0x14
    249c:	5d 89       	ldd	r21, Y+21	; 0x15
    249e:	6e 89       	ldd	r22, Y+22	; 0x16
    24a0:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    24a2:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    24a6:	bb 27       	eor	r27, r27
    24a8:	a7 2f       	mov	r26, r23
    24aa:	96 2f       	mov	r25, r22
    24ac:	85 2f       	mov	r24, r21
    24ae:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    24b2:	cb 01       	movw	r24, r22
    24b4:	aa 27       	eor	r26, r26
    24b6:	bb 27       	eor	r27, r27
    24b8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    24bc:	47 2f       	mov	r20, r23
    24be:	55 27       	eor	r21, r21
    24c0:	66 27       	eor	r22, r22
    24c2:	77 27       	eor	r23, r23
    24c4:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    24c8:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    24ca:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    24ce:	89 8d       	ldd	r24, Y+25	; 0x19
    24d0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    24d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24d6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    24da:	80 91 e8 00 	lds	r24, 0x00E8
    24de:	8e 77       	andi	r24, 0x7E	; 126
    24e0:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    24e8:	95 cb       	rjmp	.-2262   	; 0x1c14 <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    24ea:	80 91 8c 02 	lds	r24, 0x028C
    24ee:	81 32       	cpi	r24, 0x21	; 33
    24f0:	09 f0       	breq	.+2      	; 0x24f4 <CDC_Device_ProcessControlRequest+0xb8>
    24f2:	51 c0       	rjmp	.+162    	; 0x2596 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24f4:	80 91 e8 00 	lds	r24, 0x00E8
    24f8:	87 7f       	andi	r24, 0xF7	; 247
    24fa:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    24fe:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    2502:	82 fd       	sbrc	r24, 2
    2504:	05 c0       	rjmp	.+10     	; 0x2510 <CDC_Device_ProcessControlRequest+0xd4>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    2506:	80 91 8b 02 	lds	r24, 0x028B
    250a:	81 11       	cpse	r24, r1
    250c:	f8 cf       	rjmp	.-16     	; 0x24fe <CDC_Device_ProcessControlRequest+0xc2>
    250e:	43 c0       	rjmp	.+134    	; 0x2596 <CDC_Device_ProcessControlRequest+0x15a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    2510:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
    2514:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
    2518:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
    251c:	80 91 f1 00 	lds	r24, 0x00F1
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    2520:	3c 8b       	std	Y+20, r19	; 0x14
    2522:	2d 8b       	std	Y+21, r18	; 0x15
    2524:	9e 8b       	std	Y+22, r25	; 0x16
    2526:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2528:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    252c:	88 8f       	std	Y+24, r24	; 0x18
    252e:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    2532:	89 8f       	std	Y+25, r24	; 0x19
    2534:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    2538:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    253a:	80 91 e8 00 	lds	r24, 0x00E8
    253e:	8b 77       	andi	r24, 0x7B	; 123
    2540:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    2544:	67 db       	rcall	.-2354   	; 0x1c14 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2546:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2548:	df 91       	pop	r29
    254a:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    254c:	76 cf       	rjmp	.-276    	; 0x243a <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    254e:	80 91 8c 02 	lds	r24, 0x028C
    2552:	81 32       	cpi	r24, 0x21	; 33
    2554:	01 f5       	brne	.+64     	; 0x2596 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2556:	80 91 e8 00 	lds	r24, 0x00E8
    255a:	87 7f       	andi	r24, 0xF7	; 247
    255c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2560:	59 db       	rcall	.-2382   	; 0x1c14 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    2562:	80 91 8e 02 	lds	r24, 0x028E
    2566:	90 91 8f 02 	lds	r25, 0x028F
    256a:	99 8b       	std	Y+17, r25	; 0x11
    256c:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    256e:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    2574:	62 cf       	rjmp	.-316    	; 0x243a <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2576:	80 91 8c 02 	lds	r24, 0x028C
    257a:	81 32       	cpi	r24, 0x21	; 33
    257c:	61 f4       	brne	.+24     	; 0x2596 <CDC_Device_ProcessControlRequest+0x15a>
    257e:	80 91 e8 00 	lds	r24, 0x00E8
    2582:	87 7f       	andi	r24, 0xF7	; 247
    2584:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2588:	45 db       	rcall	.-2422   	; 0x1c14 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    258a:	60 91 8e 02 	lds	r22, 0x028E
    258e:	ce 01       	movw	r24, r28
			}

			break;
	}
}
    2590:	df 91       	pop	r29
    2592:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    2594:	52 cf       	rjmp	.-348    	; 0x243a <CDC_Device_Event_Stub>
			}

			break;
	}
}
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	08 95       	ret

0000259c <__subsf3>:
    259c:	50 58       	subi	r21, 0x80	; 128

0000259e <__addsf3>:
    259e:	bb 27       	eor	r27, r27
    25a0:	aa 27       	eor	r26, r26
    25a2:	0e d0       	rcall	.+28     	; 0x25c0 <__addsf3x>
    25a4:	75 c1       	rjmp	.+746    	; 0x2890 <__fp_round>
    25a6:	66 d1       	rcall	.+716    	; 0x2874 <__fp_pscA>
    25a8:	30 f0       	brcs	.+12     	; 0x25b6 <__addsf3+0x18>
    25aa:	6b d1       	rcall	.+726    	; 0x2882 <__fp_pscB>
    25ac:	20 f0       	brcs	.+8      	; 0x25b6 <__addsf3+0x18>
    25ae:	31 f4       	brne	.+12     	; 0x25bc <__addsf3+0x1e>
    25b0:	9f 3f       	cpi	r25, 0xFF	; 255
    25b2:	11 f4       	brne	.+4      	; 0x25b8 <__addsf3+0x1a>
    25b4:	1e f4       	brtc	.+6      	; 0x25bc <__addsf3+0x1e>
    25b6:	5b c1       	rjmp	.+694    	; 0x286e <__fp_nan>
    25b8:	0e f4       	brtc	.+2      	; 0x25bc <__addsf3+0x1e>
    25ba:	e0 95       	com	r30
    25bc:	e7 fb       	bst	r30, 7
    25be:	51 c1       	rjmp	.+674    	; 0x2862 <__fp_inf>

000025c0 <__addsf3x>:
    25c0:	e9 2f       	mov	r30, r25
    25c2:	77 d1       	rcall	.+750    	; 0x28b2 <__fp_split3>
    25c4:	80 f3       	brcs	.-32     	; 0x25a6 <__addsf3+0x8>
    25c6:	ba 17       	cp	r27, r26
    25c8:	62 07       	cpc	r22, r18
    25ca:	73 07       	cpc	r23, r19
    25cc:	84 07       	cpc	r24, r20
    25ce:	95 07       	cpc	r25, r21
    25d0:	18 f0       	brcs	.+6      	; 0x25d8 <__addsf3x+0x18>
    25d2:	71 f4       	brne	.+28     	; 0x25f0 <__addsf3x+0x30>
    25d4:	9e f5       	brtc	.+102    	; 0x263c <__addsf3x+0x7c>
    25d6:	8f c1       	rjmp	.+798    	; 0x28f6 <__fp_zero>
    25d8:	0e f4       	brtc	.+2      	; 0x25dc <__addsf3x+0x1c>
    25da:	e0 95       	com	r30
    25dc:	0b 2e       	mov	r0, r27
    25de:	ba 2f       	mov	r27, r26
    25e0:	a0 2d       	mov	r26, r0
    25e2:	0b 01       	movw	r0, r22
    25e4:	b9 01       	movw	r22, r18
    25e6:	90 01       	movw	r18, r0
    25e8:	0c 01       	movw	r0, r24
    25ea:	ca 01       	movw	r24, r20
    25ec:	a0 01       	movw	r20, r0
    25ee:	11 24       	eor	r1, r1
    25f0:	ff 27       	eor	r31, r31
    25f2:	59 1b       	sub	r21, r25
    25f4:	99 f0       	breq	.+38     	; 0x261c <__addsf3x+0x5c>
    25f6:	59 3f       	cpi	r21, 0xF9	; 249
    25f8:	50 f4       	brcc	.+20     	; 0x260e <__addsf3x+0x4e>
    25fa:	50 3e       	cpi	r21, 0xE0	; 224
    25fc:	68 f1       	brcs	.+90     	; 0x2658 <__addsf3x+0x98>
    25fe:	1a 16       	cp	r1, r26
    2600:	f0 40       	sbci	r31, 0x00	; 0
    2602:	a2 2f       	mov	r26, r18
    2604:	23 2f       	mov	r18, r19
    2606:	34 2f       	mov	r19, r20
    2608:	44 27       	eor	r20, r20
    260a:	58 5f       	subi	r21, 0xF8	; 248
    260c:	f3 cf       	rjmp	.-26     	; 0x25f4 <__addsf3x+0x34>
    260e:	46 95       	lsr	r20
    2610:	37 95       	ror	r19
    2612:	27 95       	ror	r18
    2614:	a7 95       	ror	r26
    2616:	f0 40       	sbci	r31, 0x00	; 0
    2618:	53 95       	inc	r21
    261a:	c9 f7       	brne	.-14     	; 0x260e <__addsf3x+0x4e>
    261c:	7e f4       	brtc	.+30     	; 0x263c <__addsf3x+0x7c>
    261e:	1f 16       	cp	r1, r31
    2620:	ba 0b       	sbc	r27, r26
    2622:	62 0b       	sbc	r22, r18
    2624:	73 0b       	sbc	r23, r19
    2626:	84 0b       	sbc	r24, r20
    2628:	ba f0       	brmi	.+46     	; 0x2658 <__addsf3x+0x98>
    262a:	91 50       	subi	r25, 0x01	; 1
    262c:	a1 f0       	breq	.+40     	; 0x2656 <__addsf3x+0x96>
    262e:	ff 0f       	add	r31, r31
    2630:	bb 1f       	adc	r27, r27
    2632:	66 1f       	adc	r22, r22
    2634:	77 1f       	adc	r23, r23
    2636:	88 1f       	adc	r24, r24
    2638:	c2 f7       	brpl	.-16     	; 0x262a <__addsf3x+0x6a>
    263a:	0e c0       	rjmp	.+28     	; 0x2658 <__addsf3x+0x98>
    263c:	ba 0f       	add	r27, r26
    263e:	62 1f       	adc	r22, r18
    2640:	73 1f       	adc	r23, r19
    2642:	84 1f       	adc	r24, r20
    2644:	48 f4       	brcc	.+18     	; 0x2658 <__addsf3x+0x98>
    2646:	87 95       	ror	r24
    2648:	77 95       	ror	r23
    264a:	67 95       	ror	r22
    264c:	b7 95       	ror	r27
    264e:	f7 95       	ror	r31
    2650:	9e 3f       	cpi	r25, 0xFE	; 254
    2652:	08 f0       	brcs	.+2      	; 0x2656 <__addsf3x+0x96>
    2654:	b3 cf       	rjmp	.-154    	; 0x25bc <__addsf3+0x1e>
    2656:	93 95       	inc	r25
    2658:	88 0f       	add	r24, r24
    265a:	08 f0       	brcs	.+2      	; 0x265e <__addsf3x+0x9e>
    265c:	99 27       	eor	r25, r25
    265e:	ee 0f       	add	r30, r30
    2660:	97 95       	ror	r25
    2662:	87 95       	ror	r24
    2664:	08 95       	ret

00002666 <__cmpsf2>:
    2666:	d9 d0       	rcall	.+434    	; 0x281a <__fp_cmp>
    2668:	08 f4       	brcc	.+2      	; 0x266c <__cmpsf2+0x6>
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	08 95       	ret

0000266e <__divsf3>:
    266e:	0c d0       	rcall	.+24     	; 0x2688 <__divsf3x>
    2670:	0f c1       	rjmp	.+542    	; 0x2890 <__fp_round>
    2672:	07 d1       	rcall	.+526    	; 0x2882 <__fp_pscB>
    2674:	40 f0       	brcs	.+16     	; 0x2686 <__divsf3+0x18>
    2676:	fe d0       	rcall	.+508    	; 0x2874 <__fp_pscA>
    2678:	30 f0       	brcs	.+12     	; 0x2686 <__divsf3+0x18>
    267a:	21 f4       	brne	.+8      	; 0x2684 <__divsf3+0x16>
    267c:	5f 3f       	cpi	r21, 0xFF	; 255
    267e:	19 f0       	breq	.+6      	; 0x2686 <__divsf3+0x18>
    2680:	f0 c0       	rjmp	.+480    	; 0x2862 <__fp_inf>
    2682:	51 11       	cpse	r21, r1
    2684:	39 c1       	rjmp	.+626    	; 0x28f8 <__fp_szero>
    2686:	f3 c0       	rjmp	.+486    	; 0x286e <__fp_nan>

00002688 <__divsf3x>:
    2688:	14 d1       	rcall	.+552    	; 0x28b2 <__fp_split3>
    268a:	98 f3       	brcs	.-26     	; 0x2672 <__divsf3+0x4>

0000268c <__divsf3_pse>:
    268c:	99 23       	and	r25, r25
    268e:	c9 f3       	breq	.-14     	; 0x2682 <__divsf3+0x14>
    2690:	55 23       	and	r21, r21
    2692:	b1 f3       	breq	.-20     	; 0x2680 <__divsf3+0x12>
    2694:	95 1b       	sub	r25, r21
    2696:	55 0b       	sbc	r21, r21
    2698:	bb 27       	eor	r27, r27
    269a:	aa 27       	eor	r26, r26
    269c:	62 17       	cp	r22, r18
    269e:	73 07       	cpc	r23, r19
    26a0:	84 07       	cpc	r24, r20
    26a2:	38 f0       	brcs	.+14     	; 0x26b2 <__divsf3_pse+0x26>
    26a4:	9f 5f       	subi	r25, 0xFF	; 255
    26a6:	5f 4f       	sbci	r21, 0xFF	; 255
    26a8:	22 0f       	add	r18, r18
    26aa:	33 1f       	adc	r19, r19
    26ac:	44 1f       	adc	r20, r20
    26ae:	aa 1f       	adc	r26, r26
    26b0:	a9 f3       	breq	.-22     	; 0x269c <__divsf3_pse+0x10>
    26b2:	33 d0       	rcall	.+102    	; 0x271a <__divsf3_pse+0x8e>
    26b4:	0e 2e       	mov	r0, r30
    26b6:	3a f0       	brmi	.+14     	; 0x26c6 <__divsf3_pse+0x3a>
    26b8:	e0 e8       	ldi	r30, 0x80	; 128
    26ba:	30 d0       	rcall	.+96     	; 0x271c <__divsf3_pse+0x90>
    26bc:	91 50       	subi	r25, 0x01	; 1
    26be:	50 40       	sbci	r21, 0x00	; 0
    26c0:	e6 95       	lsr	r30
    26c2:	00 1c       	adc	r0, r0
    26c4:	ca f7       	brpl	.-14     	; 0x26b8 <__divsf3_pse+0x2c>
    26c6:	29 d0       	rcall	.+82     	; 0x271a <__divsf3_pse+0x8e>
    26c8:	fe 2f       	mov	r31, r30
    26ca:	27 d0       	rcall	.+78     	; 0x271a <__divsf3_pse+0x8e>
    26cc:	66 0f       	add	r22, r22
    26ce:	77 1f       	adc	r23, r23
    26d0:	88 1f       	adc	r24, r24
    26d2:	bb 1f       	adc	r27, r27
    26d4:	26 17       	cp	r18, r22
    26d6:	37 07       	cpc	r19, r23
    26d8:	48 07       	cpc	r20, r24
    26da:	ab 07       	cpc	r26, r27
    26dc:	b0 e8       	ldi	r27, 0x80	; 128
    26de:	09 f0       	breq	.+2      	; 0x26e2 <__divsf3_pse+0x56>
    26e0:	bb 0b       	sbc	r27, r27
    26e2:	80 2d       	mov	r24, r0
    26e4:	bf 01       	movw	r22, r30
    26e6:	ff 27       	eor	r31, r31
    26e8:	93 58       	subi	r25, 0x83	; 131
    26ea:	5f 4f       	sbci	r21, 0xFF	; 255
    26ec:	2a f0       	brmi	.+10     	; 0x26f8 <__divsf3_pse+0x6c>
    26ee:	9e 3f       	cpi	r25, 0xFE	; 254
    26f0:	51 05       	cpc	r21, r1
    26f2:	68 f0       	brcs	.+26     	; 0x270e <__divsf3_pse+0x82>
    26f4:	b6 c0       	rjmp	.+364    	; 0x2862 <__fp_inf>
    26f6:	00 c1       	rjmp	.+512    	; 0x28f8 <__fp_szero>
    26f8:	5f 3f       	cpi	r21, 0xFF	; 255
    26fa:	ec f3       	brlt	.-6      	; 0x26f6 <__divsf3_pse+0x6a>
    26fc:	98 3e       	cpi	r25, 0xE8	; 232
    26fe:	dc f3       	brlt	.-10     	; 0x26f6 <__divsf3_pse+0x6a>
    2700:	86 95       	lsr	r24
    2702:	77 95       	ror	r23
    2704:	67 95       	ror	r22
    2706:	b7 95       	ror	r27
    2708:	f7 95       	ror	r31
    270a:	9f 5f       	subi	r25, 0xFF	; 255
    270c:	c9 f7       	brne	.-14     	; 0x2700 <__divsf3_pse+0x74>
    270e:	88 0f       	add	r24, r24
    2710:	91 1d       	adc	r25, r1
    2712:	96 95       	lsr	r25
    2714:	87 95       	ror	r24
    2716:	97 f9       	bld	r25, 7
    2718:	08 95       	ret
    271a:	e1 e0       	ldi	r30, 0x01	; 1
    271c:	66 0f       	add	r22, r22
    271e:	77 1f       	adc	r23, r23
    2720:	88 1f       	adc	r24, r24
    2722:	bb 1f       	adc	r27, r27
    2724:	62 17       	cp	r22, r18
    2726:	73 07       	cpc	r23, r19
    2728:	84 07       	cpc	r24, r20
    272a:	ba 07       	cpc	r27, r26
    272c:	20 f0       	brcs	.+8      	; 0x2736 <__divsf3_pse+0xaa>
    272e:	62 1b       	sub	r22, r18
    2730:	73 0b       	sbc	r23, r19
    2732:	84 0b       	sbc	r24, r20
    2734:	ba 0b       	sbc	r27, r26
    2736:	ee 1f       	adc	r30, r30
    2738:	88 f7       	brcc	.-30     	; 0x271c <__divsf3_pse+0x90>
    273a:	e0 95       	com	r30
    273c:	08 95       	ret

0000273e <__fixsfsi>:
    273e:	04 d0       	rcall	.+8      	; 0x2748 <__fixunssfsi>
    2740:	68 94       	set
    2742:	b1 11       	cpse	r27, r1
    2744:	d9 c0       	rjmp	.+434    	; 0x28f8 <__fp_szero>
    2746:	08 95       	ret

00002748 <__fixunssfsi>:
    2748:	bc d0       	rcall	.+376    	; 0x28c2 <__fp_splitA>
    274a:	88 f0       	brcs	.+34     	; 0x276e <__fixunssfsi+0x26>
    274c:	9f 57       	subi	r25, 0x7F	; 127
    274e:	90 f0       	brcs	.+36     	; 0x2774 <__fixunssfsi+0x2c>
    2750:	b9 2f       	mov	r27, r25
    2752:	99 27       	eor	r25, r25
    2754:	b7 51       	subi	r27, 0x17	; 23
    2756:	a0 f0       	brcs	.+40     	; 0x2780 <__fixunssfsi+0x38>
    2758:	d1 f0       	breq	.+52     	; 0x278e <__fixunssfsi+0x46>
    275a:	66 0f       	add	r22, r22
    275c:	77 1f       	adc	r23, r23
    275e:	88 1f       	adc	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	1a f0       	brmi	.+6      	; 0x276a <__fixunssfsi+0x22>
    2764:	ba 95       	dec	r27
    2766:	c9 f7       	brne	.-14     	; 0x275a <__fixunssfsi+0x12>
    2768:	12 c0       	rjmp	.+36     	; 0x278e <__fixunssfsi+0x46>
    276a:	b1 30       	cpi	r27, 0x01	; 1
    276c:	81 f0       	breq	.+32     	; 0x278e <__fixunssfsi+0x46>
    276e:	c3 d0       	rcall	.+390    	; 0x28f6 <__fp_zero>
    2770:	b1 e0       	ldi	r27, 0x01	; 1
    2772:	08 95       	ret
    2774:	c0 c0       	rjmp	.+384    	; 0x28f6 <__fp_zero>
    2776:	67 2f       	mov	r22, r23
    2778:	78 2f       	mov	r23, r24
    277a:	88 27       	eor	r24, r24
    277c:	b8 5f       	subi	r27, 0xF8	; 248
    277e:	39 f0       	breq	.+14     	; 0x278e <__fixunssfsi+0x46>
    2780:	b9 3f       	cpi	r27, 0xF9	; 249
    2782:	cc f3       	brlt	.-14     	; 0x2776 <__fixunssfsi+0x2e>
    2784:	86 95       	lsr	r24
    2786:	77 95       	ror	r23
    2788:	67 95       	ror	r22
    278a:	b3 95       	inc	r27
    278c:	d9 f7       	brne	.-10     	; 0x2784 <__fixunssfsi+0x3c>
    278e:	3e f4       	brtc	.+14     	; 0x279e <__fixunssfsi+0x56>
    2790:	90 95       	com	r25
    2792:	80 95       	com	r24
    2794:	70 95       	com	r23
    2796:	61 95       	neg	r22
    2798:	7f 4f       	sbci	r23, 0xFF	; 255
    279a:	8f 4f       	sbci	r24, 0xFF	; 255
    279c:	9f 4f       	sbci	r25, 0xFF	; 255
    279e:	08 95       	ret

000027a0 <__floatunsisf>:
    27a0:	e8 94       	clt
    27a2:	09 c0       	rjmp	.+18     	; 0x27b6 <__floatsisf+0x12>

000027a4 <__floatsisf>:
    27a4:	97 fb       	bst	r25, 7
    27a6:	3e f4       	brtc	.+14     	; 0x27b6 <__floatsisf+0x12>
    27a8:	90 95       	com	r25
    27aa:	80 95       	com	r24
    27ac:	70 95       	com	r23
    27ae:	61 95       	neg	r22
    27b0:	7f 4f       	sbci	r23, 0xFF	; 255
    27b2:	8f 4f       	sbci	r24, 0xFF	; 255
    27b4:	9f 4f       	sbci	r25, 0xFF	; 255
    27b6:	99 23       	and	r25, r25
    27b8:	a9 f0       	breq	.+42     	; 0x27e4 <__floatsisf+0x40>
    27ba:	f9 2f       	mov	r31, r25
    27bc:	96 e9       	ldi	r25, 0x96	; 150
    27be:	bb 27       	eor	r27, r27
    27c0:	93 95       	inc	r25
    27c2:	f6 95       	lsr	r31
    27c4:	87 95       	ror	r24
    27c6:	77 95       	ror	r23
    27c8:	67 95       	ror	r22
    27ca:	b7 95       	ror	r27
    27cc:	f1 11       	cpse	r31, r1
    27ce:	f8 cf       	rjmp	.-16     	; 0x27c0 <__floatsisf+0x1c>
    27d0:	fa f4       	brpl	.+62     	; 0x2810 <__floatsisf+0x6c>
    27d2:	bb 0f       	add	r27, r27
    27d4:	11 f4       	brne	.+4      	; 0x27da <__floatsisf+0x36>
    27d6:	60 ff       	sbrs	r22, 0
    27d8:	1b c0       	rjmp	.+54     	; 0x2810 <__floatsisf+0x6c>
    27da:	6f 5f       	subi	r22, 0xFF	; 255
    27dc:	7f 4f       	sbci	r23, 0xFF	; 255
    27de:	8f 4f       	sbci	r24, 0xFF	; 255
    27e0:	9f 4f       	sbci	r25, 0xFF	; 255
    27e2:	16 c0       	rjmp	.+44     	; 0x2810 <__floatsisf+0x6c>
    27e4:	88 23       	and	r24, r24
    27e6:	11 f0       	breq	.+4      	; 0x27ec <__floatsisf+0x48>
    27e8:	96 e9       	ldi	r25, 0x96	; 150
    27ea:	11 c0       	rjmp	.+34     	; 0x280e <__floatsisf+0x6a>
    27ec:	77 23       	and	r23, r23
    27ee:	21 f0       	breq	.+8      	; 0x27f8 <__floatsisf+0x54>
    27f0:	9e e8       	ldi	r25, 0x8E	; 142
    27f2:	87 2f       	mov	r24, r23
    27f4:	76 2f       	mov	r23, r22
    27f6:	05 c0       	rjmp	.+10     	; 0x2802 <__floatsisf+0x5e>
    27f8:	66 23       	and	r22, r22
    27fa:	71 f0       	breq	.+28     	; 0x2818 <__floatsisf+0x74>
    27fc:	96 e8       	ldi	r25, 0x86	; 134
    27fe:	86 2f       	mov	r24, r22
    2800:	70 e0       	ldi	r23, 0x00	; 0
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	2a f0       	brmi	.+10     	; 0x2810 <__floatsisf+0x6c>
    2806:	9a 95       	dec	r25
    2808:	66 0f       	add	r22, r22
    280a:	77 1f       	adc	r23, r23
    280c:	88 1f       	adc	r24, r24
    280e:	da f7       	brpl	.-10     	; 0x2806 <__floatsisf+0x62>
    2810:	88 0f       	add	r24, r24
    2812:	96 95       	lsr	r25
    2814:	87 95       	ror	r24
    2816:	97 f9       	bld	r25, 7
    2818:	08 95       	ret

0000281a <__fp_cmp>:
    281a:	99 0f       	add	r25, r25
    281c:	00 08       	sbc	r0, r0
    281e:	55 0f       	add	r21, r21
    2820:	aa 0b       	sbc	r26, r26
    2822:	e0 e8       	ldi	r30, 0x80	; 128
    2824:	fe ef       	ldi	r31, 0xFE	; 254
    2826:	16 16       	cp	r1, r22
    2828:	17 06       	cpc	r1, r23
    282a:	e8 07       	cpc	r30, r24
    282c:	f9 07       	cpc	r31, r25
    282e:	c0 f0       	brcs	.+48     	; 0x2860 <__fp_cmp+0x46>
    2830:	12 16       	cp	r1, r18
    2832:	13 06       	cpc	r1, r19
    2834:	e4 07       	cpc	r30, r20
    2836:	f5 07       	cpc	r31, r21
    2838:	98 f0       	brcs	.+38     	; 0x2860 <__fp_cmp+0x46>
    283a:	62 1b       	sub	r22, r18
    283c:	73 0b       	sbc	r23, r19
    283e:	84 0b       	sbc	r24, r20
    2840:	95 0b       	sbc	r25, r21
    2842:	39 f4       	brne	.+14     	; 0x2852 <__fp_cmp+0x38>
    2844:	0a 26       	eor	r0, r26
    2846:	61 f0       	breq	.+24     	; 0x2860 <__fp_cmp+0x46>
    2848:	23 2b       	or	r18, r19
    284a:	24 2b       	or	r18, r20
    284c:	25 2b       	or	r18, r21
    284e:	21 f4       	brne	.+8      	; 0x2858 <__fp_cmp+0x3e>
    2850:	08 95       	ret
    2852:	0a 26       	eor	r0, r26
    2854:	09 f4       	brne	.+2      	; 0x2858 <__fp_cmp+0x3e>
    2856:	a1 40       	sbci	r26, 0x01	; 1
    2858:	a6 95       	lsr	r26
    285a:	8f ef       	ldi	r24, 0xFF	; 255
    285c:	81 1d       	adc	r24, r1
    285e:	81 1d       	adc	r24, r1
    2860:	08 95       	ret

00002862 <__fp_inf>:
    2862:	97 f9       	bld	r25, 7
    2864:	9f 67       	ori	r25, 0x7F	; 127
    2866:	80 e8       	ldi	r24, 0x80	; 128
    2868:	70 e0       	ldi	r23, 0x00	; 0
    286a:	60 e0       	ldi	r22, 0x00	; 0
    286c:	08 95       	ret

0000286e <__fp_nan>:
    286e:	9f ef       	ldi	r25, 0xFF	; 255
    2870:	80 ec       	ldi	r24, 0xC0	; 192
    2872:	08 95       	ret

00002874 <__fp_pscA>:
    2874:	00 24       	eor	r0, r0
    2876:	0a 94       	dec	r0
    2878:	16 16       	cp	r1, r22
    287a:	17 06       	cpc	r1, r23
    287c:	18 06       	cpc	r1, r24
    287e:	09 06       	cpc	r0, r25
    2880:	08 95       	ret

00002882 <__fp_pscB>:
    2882:	00 24       	eor	r0, r0
    2884:	0a 94       	dec	r0
    2886:	12 16       	cp	r1, r18
    2888:	13 06       	cpc	r1, r19
    288a:	14 06       	cpc	r1, r20
    288c:	05 06       	cpc	r0, r21
    288e:	08 95       	ret

00002890 <__fp_round>:
    2890:	09 2e       	mov	r0, r25
    2892:	03 94       	inc	r0
    2894:	00 0c       	add	r0, r0
    2896:	11 f4       	brne	.+4      	; 0x289c <__fp_round+0xc>
    2898:	88 23       	and	r24, r24
    289a:	52 f0       	brmi	.+20     	; 0x28b0 <__fp_round+0x20>
    289c:	bb 0f       	add	r27, r27
    289e:	40 f4       	brcc	.+16     	; 0x28b0 <__fp_round+0x20>
    28a0:	bf 2b       	or	r27, r31
    28a2:	11 f4       	brne	.+4      	; 0x28a8 <__fp_round+0x18>
    28a4:	60 ff       	sbrs	r22, 0
    28a6:	04 c0       	rjmp	.+8      	; 0x28b0 <__fp_round+0x20>
    28a8:	6f 5f       	subi	r22, 0xFF	; 255
    28aa:	7f 4f       	sbci	r23, 0xFF	; 255
    28ac:	8f 4f       	sbci	r24, 0xFF	; 255
    28ae:	9f 4f       	sbci	r25, 0xFF	; 255
    28b0:	08 95       	ret

000028b2 <__fp_split3>:
    28b2:	57 fd       	sbrc	r21, 7
    28b4:	90 58       	subi	r25, 0x80	; 128
    28b6:	44 0f       	add	r20, r20
    28b8:	55 1f       	adc	r21, r21
    28ba:	59 f0       	breq	.+22     	; 0x28d2 <__fp_splitA+0x10>
    28bc:	5f 3f       	cpi	r21, 0xFF	; 255
    28be:	71 f0       	breq	.+28     	; 0x28dc <__fp_splitA+0x1a>
    28c0:	47 95       	ror	r20

000028c2 <__fp_splitA>:
    28c2:	88 0f       	add	r24, r24
    28c4:	97 fb       	bst	r25, 7
    28c6:	99 1f       	adc	r25, r25
    28c8:	61 f0       	breq	.+24     	; 0x28e2 <__fp_splitA+0x20>
    28ca:	9f 3f       	cpi	r25, 0xFF	; 255
    28cc:	79 f0       	breq	.+30     	; 0x28ec <__fp_splitA+0x2a>
    28ce:	87 95       	ror	r24
    28d0:	08 95       	ret
    28d2:	12 16       	cp	r1, r18
    28d4:	13 06       	cpc	r1, r19
    28d6:	14 06       	cpc	r1, r20
    28d8:	55 1f       	adc	r21, r21
    28da:	f2 cf       	rjmp	.-28     	; 0x28c0 <__fp_split3+0xe>
    28dc:	46 95       	lsr	r20
    28de:	f1 df       	rcall	.-30     	; 0x28c2 <__fp_splitA>
    28e0:	08 c0       	rjmp	.+16     	; 0x28f2 <__fp_splitA+0x30>
    28e2:	16 16       	cp	r1, r22
    28e4:	17 06       	cpc	r1, r23
    28e6:	18 06       	cpc	r1, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	f1 cf       	rjmp	.-30     	; 0x28ce <__fp_splitA+0xc>
    28ec:	86 95       	lsr	r24
    28ee:	71 05       	cpc	r23, r1
    28f0:	61 05       	cpc	r22, r1
    28f2:	08 94       	sec
    28f4:	08 95       	ret

000028f6 <__fp_zero>:
    28f6:	e8 94       	clt

000028f8 <__fp_szero>:
    28f8:	bb 27       	eor	r27, r27
    28fa:	66 27       	eor	r22, r22
    28fc:	77 27       	eor	r23, r23
    28fe:	cb 01       	movw	r24, r22
    2900:	97 f9       	bld	r25, 7
    2902:	08 95       	ret

00002904 <__gesf2>:
    2904:	8a df       	rcall	.-236    	; 0x281a <__fp_cmp>
    2906:	08 f4       	brcc	.+2      	; 0x290a <__gesf2+0x6>
    2908:	8f ef       	ldi	r24, 0xFF	; 255
    290a:	08 95       	ret

0000290c <__mulsf3>:
    290c:	0b d0       	rcall	.+22     	; 0x2924 <__mulsf3x>
    290e:	c0 cf       	rjmp	.-128    	; 0x2890 <__fp_round>
    2910:	b1 df       	rcall	.-158    	; 0x2874 <__fp_pscA>
    2912:	28 f0       	brcs	.+10     	; 0x291e <__mulsf3+0x12>
    2914:	b6 df       	rcall	.-148    	; 0x2882 <__fp_pscB>
    2916:	18 f0       	brcs	.+6      	; 0x291e <__mulsf3+0x12>
    2918:	95 23       	and	r25, r21
    291a:	09 f0       	breq	.+2      	; 0x291e <__mulsf3+0x12>
    291c:	a2 cf       	rjmp	.-188    	; 0x2862 <__fp_inf>
    291e:	a7 cf       	rjmp	.-178    	; 0x286e <__fp_nan>
    2920:	11 24       	eor	r1, r1
    2922:	ea cf       	rjmp	.-44     	; 0x28f8 <__fp_szero>

00002924 <__mulsf3x>:
    2924:	c6 df       	rcall	.-116    	; 0x28b2 <__fp_split3>
    2926:	a0 f3       	brcs	.-24     	; 0x2910 <__mulsf3+0x4>

00002928 <__mulsf3_pse>:
    2928:	95 9f       	mul	r25, r21
    292a:	d1 f3       	breq	.-12     	; 0x2920 <__mulsf3+0x14>
    292c:	95 0f       	add	r25, r21
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	55 1f       	adc	r21, r21
    2932:	62 9f       	mul	r22, r18
    2934:	f0 01       	movw	r30, r0
    2936:	72 9f       	mul	r23, r18
    2938:	bb 27       	eor	r27, r27
    293a:	f0 0d       	add	r31, r0
    293c:	b1 1d       	adc	r27, r1
    293e:	63 9f       	mul	r22, r19
    2940:	aa 27       	eor	r26, r26
    2942:	f0 0d       	add	r31, r0
    2944:	b1 1d       	adc	r27, r1
    2946:	aa 1f       	adc	r26, r26
    2948:	64 9f       	mul	r22, r20
    294a:	66 27       	eor	r22, r22
    294c:	b0 0d       	add	r27, r0
    294e:	a1 1d       	adc	r26, r1
    2950:	66 1f       	adc	r22, r22
    2952:	82 9f       	mul	r24, r18
    2954:	22 27       	eor	r18, r18
    2956:	b0 0d       	add	r27, r0
    2958:	a1 1d       	adc	r26, r1
    295a:	62 1f       	adc	r22, r18
    295c:	73 9f       	mul	r23, r19
    295e:	b0 0d       	add	r27, r0
    2960:	a1 1d       	adc	r26, r1
    2962:	62 1f       	adc	r22, r18
    2964:	83 9f       	mul	r24, r19
    2966:	a0 0d       	add	r26, r0
    2968:	61 1d       	adc	r22, r1
    296a:	22 1f       	adc	r18, r18
    296c:	74 9f       	mul	r23, r20
    296e:	33 27       	eor	r19, r19
    2970:	a0 0d       	add	r26, r0
    2972:	61 1d       	adc	r22, r1
    2974:	23 1f       	adc	r18, r19
    2976:	84 9f       	mul	r24, r20
    2978:	60 0d       	add	r22, r0
    297a:	21 1d       	adc	r18, r1
    297c:	82 2f       	mov	r24, r18
    297e:	76 2f       	mov	r23, r22
    2980:	6a 2f       	mov	r22, r26
    2982:	11 24       	eor	r1, r1
    2984:	9f 57       	subi	r25, 0x7F	; 127
    2986:	50 40       	sbci	r21, 0x00	; 0
    2988:	8a f0       	brmi	.+34     	; 0x29ac <__mulsf3_pse+0x84>
    298a:	e1 f0       	breq	.+56     	; 0x29c4 <__mulsf3_pse+0x9c>
    298c:	88 23       	and	r24, r24
    298e:	4a f0       	brmi	.+18     	; 0x29a2 <__mulsf3_pse+0x7a>
    2990:	ee 0f       	add	r30, r30
    2992:	ff 1f       	adc	r31, r31
    2994:	bb 1f       	adc	r27, r27
    2996:	66 1f       	adc	r22, r22
    2998:	77 1f       	adc	r23, r23
    299a:	88 1f       	adc	r24, r24
    299c:	91 50       	subi	r25, 0x01	; 1
    299e:	50 40       	sbci	r21, 0x00	; 0
    29a0:	a9 f7       	brne	.-22     	; 0x298c <__mulsf3_pse+0x64>
    29a2:	9e 3f       	cpi	r25, 0xFE	; 254
    29a4:	51 05       	cpc	r21, r1
    29a6:	70 f0       	brcs	.+28     	; 0x29c4 <__mulsf3_pse+0x9c>
    29a8:	5c cf       	rjmp	.-328    	; 0x2862 <__fp_inf>
    29aa:	a6 cf       	rjmp	.-180    	; 0x28f8 <__fp_szero>
    29ac:	5f 3f       	cpi	r21, 0xFF	; 255
    29ae:	ec f3       	brlt	.-6      	; 0x29aa <__mulsf3_pse+0x82>
    29b0:	98 3e       	cpi	r25, 0xE8	; 232
    29b2:	dc f3       	brlt	.-10     	; 0x29aa <__mulsf3_pse+0x82>
    29b4:	86 95       	lsr	r24
    29b6:	77 95       	ror	r23
    29b8:	67 95       	ror	r22
    29ba:	b7 95       	ror	r27
    29bc:	f7 95       	ror	r31
    29be:	e7 95       	ror	r30
    29c0:	9f 5f       	subi	r25, 0xFF	; 255
    29c2:	c1 f7       	brne	.-16     	; 0x29b4 <__mulsf3_pse+0x8c>
    29c4:	fe 2b       	or	r31, r30
    29c6:	88 0f       	add	r24, r24
    29c8:	91 1d       	adc	r25, r1
    29ca:	96 95       	lsr	r25
    29cc:	87 95       	ror	r24
    29ce:	97 f9       	bld	r25, 7
    29d0:	08 95       	ret

000029d2 <__unordsf2>:
    29d2:	23 df       	rcall	.-442    	; 0x281a <__fp_cmp>
    29d4:	88 0b       	sbc	r24, r24
    29d6:	99 0b       	sbc	r25, r25
    29d8:	08 95       	ret

000029da <vfprintf>:
    29da:	a3 e1       	ldi	r26, 0x13	; 19
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	e2 ef       	ldi	r30, 0xF2	; 242
    29e0:	f4 e1       	ldi	r31, 0x14	; 20
    29e2:	a0 c3       	rjmp	.+1856   	; 0x3124 <__prologue_saves__>
    29e4:	7c 01       	movw	r14, r24
    29e6:	1b 01       	movw	r2, r22
    29e8:	6a 01       	movw	r12, r20
    29ea:	fc 01       	movw	r30, r24
    29ec:	17 82       	std	Z+7, r1	; 0x07
    29ee:	16 82       	std	Z+6, r1	; 0x06
    29f0:	83 81       	ldd	r24, Z+3	; 0x03
    29f2:	81 ff       	sbrs	r24, 1
    29f4:	49 c3       	rjmp	.+1682   	; 0x3088 <vfprintf+0x6ae>
    29f6:	be 01       	movw	r22, r28
    29f8:	6f 5f       	subi	r22, 0xFF	; 255
    29fa:	7f 4f       	sbci	r23, 0xFF	; 255
    29fc:	4b 01       	movw	r8, r22
    29fe:	f7 01       	movw	r30, r14
    2a00:	93 81       	ldd	r25, Z+3	; 0x03
    2a02:	f1 01       	movw	r30, r2
    2a04:	93 fd       	sbrc	r25, 3
    2a06:	85 91       	lpm	r24, Z+
    2a08:	93 ff       	sbrs	r25, 3
    2a0a:	81 91       	ld	r24, Z+
    2a0c:	1f 01       	movw	r2, r30
    2a0e:	88 23       	and	r24, r24
    2a10:	09 f4       	brne	.+2      	; 0x2a14 <vfprintf+0x3a>
    2a12:	36 c3       	rjmp	.+1644   	; 0x3080 <vfprintf+0x6a6>
    2a14:	85 32       	cpi	r24, 0x25	; 37
    2a16:	39 f4       	brne	.+14     	; 0x2a26 <vfprintf+0x4c>
    2a18:	93 fd       	sbrc	r25, 3
    2a1a:	85 91       	lpm	r24, Z+
    2a1c:	93 ff       	sbrs	r25, 3
    2a1e:	81 91       	ld	r24, Z+
    2a20:	1f 01       	movw	r2, r30
    2a22:	85 32       	cpi	r24, 0x25	; 37
    2a24:	31 f4       	brne	.+12     	; 0x2a32 <vfprintf+0x58>
    2a26:	b7 01       	movw	r22, r14
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	ed d4       	rcall	.+2522   	; 0x3406 <fputc>
    2a2c:	56 01       	movw	r10, r12
    2a2e:	65 01       	movw	r12, r10
    2a30:	e6 cf       	rjmp	.-52     	; 0x29fe <vfprintf+0x24>
    2a32:	10 e0       	ldi	r17, 0x00	; 0
    2a34:	51 2c       	mov	r5, r1
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	20 32       	cpi	r18, 0x20	; 32
    2a3a:	a0 f4       	brcc	.+40     	; 0x2a64 <vfprintf+0x8a>
    2a3c:	8b 32       	cpi	r24, 0x2B	; 43
    2a3e:	69 f0       	breq	.+26     	; 0x2a5a <vfprintf+0x80>
    2a40:	30 f4       	brcc	.+12     	; 0x2a4e <vfprintf+0x74>
    2a42:	80 32       	cpi	r24, 0x20	; 32
    2a44:	59 f0       	breq	.+22     	; 0x2a5c <vfprintf+0x82>
    2a46:	83 32       	cpi	r24, 0x23	; 35
    2a48:	69 f4       	brne	.+26     	; 0x2a64 <vfprintf+0x8a>
    2a4a:	20 61       	ori	r18, 0x10	; 16
    2a4c:	2c c0       	rjmp	.+88     	; 0x2aa6 <vfprintf+0xcc>
    2a4e:	8d 32       	cpi	r24, 0x2D	; 45
    2a50:	39 f0       	breq	.+14     	; 0x2a60 <vfprintf+0x86>
    2a52:	80 33       	cpi	r24, 0x30	; 48
    2a54:	39 f4       	brne	.+14     	; 0x2a64 <vfprintf+0x8a>
    2a56:	21 60       	ori	r18, 0x01	; 1
    2a58:	26 c0       	rjmp	.+76     	; 0x2aa6 <vfprintf+0xcc>
    2a5a:	22 60       	ori	r18, 0x02	; 2
    2a5c:	24 60       	ori	r18, 0x04	; 4
    2a5e:	23 c0       	rjmp	.+70     	; 0x2aa6 <vfprintf+0xcc>
    2a60:	28 60       	ori	r18, 0x08	; 8
    2a62:	21 c0       	rjmp	.+66     	; 0x2aa6 <vfprintf+0xcc>
    2a64:	27 fd       	sbrc	r18, 7
    2a66:	27 c0       	rjmp	.+78     	; 0x2ab6 <vfprintf+0xdc>
    2a68:	30 ed       	ldi	r19, 0xD0	; 208
    2a6a:	38 0f       	add	r19, r24
    2a6c:	3a 30       	cpi	r19, 0x0A	; 10
    2a6e:	78 f4       	brcc	.+30     	; 0x2a8e <vfprintf+0xb4>
    2a70:	26 ff       	sbrs	r18, 6
    2a72:	06 c0       	rjmp	.+12     	; 0x2a80 <vfprintf+0xa6>
    2a74:	fa e0       	ldi	r31, 0x0A	; 10
    2a76:	1f 9f       	mul	r17, r31
    2a78:	30 0d       	add	r19, r0
    2a7a:	11 24       	eor	r1, r1
    2a7c:	13 2f       	mov	r17, r19
    2a7e:	13 c0       	rjmp	.+38     	; 0x2aa6 <vfprintf+0xcc>
    2a80:	6a e0       	ldi	r22, 0x0A	; 10
    2a82:	56 9e       	mul	r5, r22
    2a84:	30 0d       	add	r19, r0
    2a86:	11 24       	eor	r1, r1
    2a88:	53 2e       	mov	r5, r19
    2a8a:	20 62       	ori	r18, 0x20	; 32
    2a8c:	0c c0       	rjmp	.+24     	; 0x2aa6 <vfprintf+0xcc>
    2a8e:	8e 32       	cpi	r24, 0x2E	; 46
    2a90:	21 f4       	brne	.+8      	; 0x2a9a <vfprintf+0xc0>
    2a92:	26 fd       	sbrc	r18, 6
    2a94:	f5 c2       	rjmp	.+1514   	; 0x3080 <vfprintf+0x6a6>
    2a96:	20 64       	ori	r18, 0x40	; 64
    2a98:	06 c0       	rjmp	.+12     	; 0x2aa6 <vfprintf+0xcc>
    2a9a:	8c 36       	cpi	r24, 0x6C	; 108
    2a9c:	11 f4       	brne	.+4      	; 0x2aa2 <vfprintf+0xc8>
    2a9e:	20 68       	ori	r18, 0x80	; 128
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <vfprintf+0xcc>
    2aa2:	88 36       	cpi	r24, 0x68	; 104
    2aa4:	41 f4       	brne	.+16     	; 0x2ab6 <vfprintf+0xdc>
    2aa6:	f1 01       	movw	r30, r2
    2aa8:	93 fd       	sbrc	r25, 3
    2aaa:	85 91       	lpm	r24, Z+
    2aac:	93 ff       	sbrs	r25, 3
    2aae:	81 91       	ld	r24, Z+
    2ab0:	1f 01       	movw	r2, r30
    2ab2:	81 11       	cpse	r24, r1
    2ab4:	c1 cf       	rjmp	.-126    	; 0x2a38 <vfprintf+0x5e>
    2ab6:	9b eb       	ldi	r25, 0xBB	; 187
    2ab8:	98 0f       	add	r25, r24
    2aba:	93 30       	cpi	r25, 0x03	; 3
    2abc:	18 f4       	brcc	.+6      	; 0x2ac4 <vfprintf+0xea>
    2abe:	20 61       	ori	r18, 0x10	; 16
    2ac0:	80 5e       	subi	r24, 0xE0	; 224
    2ac2:	06 c0       	rjmp	.+12     	; 0x2ad0 <vfprintf+0xf6>
    2ac4:	9b e9       	ldi	r25, 0x9B	; 155
    2ac6:	98 0f       	add	r25, r24
    2ac8:	93 30       	cpi	r25, 0x03	; 3
    2aca:	08 f0       	brcs	.+2      	; 0x2ace <vfprintf+0xf4>
    2acc:	9a c1       	rjmp	.+820    	; 0x2e02 <vfprintf+0x428>
    2ace:	2f 7e       	andi	r18, 0xEF	; 239
    2ad0:	26 ff       	sbrs	r18, 6
    2ad2:	16 e0       	ldi	r17, 0x06	; 6
    2ad4:	2f 73       	andi	r18, 0x3F	; 63
    2ad6:	72 2e       	mov	r7, r18
    2ad8:	85 36       	cpi	r24, 0x65	; 101
    2ada:	21 f4       	brne	.+8      	; 0x2ae4 <vfprintf+0x10a>
    2adc:	f2 2f       	mov	r31, r18
    2ade:	f0 64       	ori	r31, 0x40	; 64
    2ae0:	7f 2e       	mov	r7, r31
    2ae2:	08 c0       	rjmp	.+16     	; 0x2af4 <vfprintf+0x11a>
    2ae4:	86 36       	cpi	r24, 0x66	; 102
    2ae6:	21 f4       	brne	.+8      	; 0x2af0 <vfprintf+0x116>
    2ae8:	62 2f       	mov	r22, r18
    2aea:	60 68       	ori	r22, 0x80	; 128
    2aec:	76 2e       	mov	r7, r22
    2aee:	02 c0       	rjmp	.+4      	; 0x2af4 <vfprintf+0x11a>
    2af0:	11 11       	cpse	r17, r1
    2af2:	11 50       	subi	r17, 0x01	; 1
    2af4:	77 fe       	sbrs	r7, 7
    2af6:	07 c0       	rjmp	.+14     	; 0x2b06 <vfprintf+0x12c>
    2af8:	1c 33       	cpi	r17, 0x3C	; 60
    2afa:	48 f4       	brcc	.+18     	; 0x2b0e <vfprintf+0x134>
    2afc:	44 24       	eor	r4, r4
    2afe:	43 94       	inc	r4
    2b00:	41 0e       	add	r4, r17
    2b02:	27 e0       	ldi	r18, 0x07	; 7
    2b04:	0b c0       	rjmp	.+22     	; 0x2b1c <vfprintf+0x142>
    2b06:	18 30       	cpi	r17, 0x08	; 8
    2b08:	30 f4       	brcc	.+12     	; 0x2b16 <vfprintf+0x13c>
    2b0a:	21 2f       	mov	r18, r17
    2b0c:	06 c0       	rjmp	.+12     	; 0x2b1a <vfprintf+0x140>
    2b0e:	27 e0       	ldi	r18, 0x07	; 7
    2b10:	4c e3       	ldi	r20, 0x3C	; 60
    2b12:	44 2e       	mov	r4, r20
    2b14:	03 c0       	rjmp	.+6      	; 0x2b1c <vfprintf+0x142>
    2b16:	27 e0       	ldi	r18, 0x07	; 7
    2b18:	17 e0       	ldi	r17, 0x07	; 7
    2b1a:	41 2c       	mov	r4, r1
    2b1c:	56 01       	movw	r10, r12
    2b1e:	74 e0       	ldi	r23, 0x04	; 4
    2b20:	a7 0e       	add	r10, r23
    2b22:	b1 1c       	adc	r11, r1
    2b24:	f6 01       	movw	r30, r12
    2b26:	60 81       	ld	r22, Z
    2b28:	71 81       	ldd	r23, Z+1	; 0x01
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	04 2d       	mov	r16, r4
    2b30:	a4 01       	movw	r20, r8
    2b32:	4c d3       	rcall	.+1688   	; 0x31cc <__ftoa_engine>
    2b34:	6c 01       	movw	r12, r24
    2b36:	09 81       	ldd	r16, Y+1	; 0x01
    2b38:	00 ff       	sbrs	r16, 0
    2b3a:	02 c0       	rjmp	.+4      	; 0x2b40 <vfprintf+0x166>
    2b3c:	03 ff       	sbrs	r16, 3
    2b3e:	06 c0       	rjmp	.+12     	; 0x2b4c <vfprintf+0x172>
    2b40:	71 fc       	sbrc	r7, 1
    2b42:	07 c0       	rjmp	.+14     	; 0x2b52 <vfprintf+0x178>
    2b44:	72 fc       	sbrc	r7, 2
    2b46:	08 c0       	rjmp	.+16     	; 0x2b58 <vfprintf+0x17e>
    2b48:	61 2c       	mov	r6, r1
    2b4a:	08 c0       	rjmp	.+16     	; 0x2b5c <vfprintf+0x182>
    2b4c:	3d e2       	ldi	r19, 0x2D	; 45
    2b4e:	63 2e       	mov	r6, r19
    2b50:	05 c0       	rjmp	.+10     	; 0x2b5c <vfprintf+0x182>
    2b52:	2b e2       	ldi	r18, 0x2B	; 43
    2b54:	62 2e       	mov	r6, r18
    2b56:	02 c0       	rjmp	.+4      	; 0x2b5c <vfprintf+0x182>
    2b58:	90 e2       	ldi	r25, 0x20	; 32
    2b5a:	69 2e       	mov	r6, r25
    2b5c:	80 2f       	mov	r24, r16
    2b5e:	8c 70       	andi	r24, 0x0C	; 12
    2b60:	81 f1       	breq	.+96     	; 0x2bc2 <vfprintf+0x1e8>
    2b62:	66 20       	and	r6, r6
    2b64:	11 f0       	breq	.+4      	; 0x2b6a <vfprintf+0x190>
    2b66:	84 e0       	ldi	r24, 0x04	; 4
    2b68:	01 c0       	rjmp	.+2      	; 0x2b6c <vfprintf+0x192>
    2b6a:	83 e0       	ldi	r24, 0x03	; 3
    2b6c:	85 15       	cp	r24, r5
    2b6e:	10 f0       	brcs	.+4      	; 0x2b74 <vfprintf+0x19a>
    2b70:	51 2c       	mov	r5, r1
    2b72:	0a c0       	rjmp	.+20     	; 0x2b88 <vfprintf+0x1ae>
    2b74:	58 1a       	sub	r5, r24
    2b76:	73 fc       	sbrc	r7, 3
    2b78:	07 c0       	rjmp	.+14     	; 0x2b88 <vfprintf+0x1ae>
    2b7a:	b7 01       	movw	r22, r14
    2b7c:	80 e2       	ldi	r24, 0x20	; 32
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	42 d4       	rcall	.+2180   	; 0x3406 <fputc>
    2b82:	5a 94       	dec	r5
    2b84:	d1 f7       	brne	.-12     	; 0x2b7a <vfprintf+0x1a0>
    2b86:	f4 cf       	rjmp	.-24     	; 0x2b70 <vfprintf+0x196>
    2b88:	66 20       	and	r6, r6
    2b8a:	21 f0       	breq	.+8      	; 0x2b94 <vfprintf+0x1ba>
    2b8c:	b7 01       	movw	r22, r14
    2b8e:	86 2d       	mov	r24, r6
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	39 d4       	rcall	.+2162   	; 0x3406 <fputc>
    2b94:	03 fd       	sbrc	r16, 3
    2b96:	03 c0       	rjmp	.+6      	; 0x2b9e <vfprintf+0x1c4>
    2b98:	03 e4       	ldi	r16, 0x43	; 67
    2b9a:	13 e0       	ldi	r17, 0x03	; 3
    2b9c:	02 c0       	rjmp	.+4      	; 0x2ba2 <vfprintf+0x1c8>
    2b9e:	0f e3       	ldi	r16, 0x3F	; 63
    2ba0:	13 e0       	ldi	r17, 0x03	; 3
    2ba2:	f7 2d       	mov	r31, r7
    2ba4:	f0 71       	andi	r31, 0x10	; 16
    2ba6:	7f 2e       	mov	r7, r31
    2ba8:	f8 01       	movw	r30, r16
    2baa:	84 91       	lpm	r24, Z
    2bac:	88 23       	and	r24, r24
    2bae:	09 f4       	brne	.+2      	; 0x2bb2 <vfprintf+0x1d8>
    2bb0:	5e c2       	rjmp	.+1212   	; 0x306e <vfprintf+0x694>
    2bb2:	71 10       	cpse	r7, r1
    2bb4:	80 52       	subi	r24, 0x20	; 32
    2bb6:	b7 01       	movw	r22, r14
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	25 d4       	rcall	.+2122   	; 0x3406 <fputc>
    2bbc:	0f 5f       	subi	r16, 0xFF	; 255
    2bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc0:	f3 cf       	rjmp	.-26     	; 0x2ba8 <vfprintf+0x1ce>
    2bc2:	77 fe       	sbrs	r7, 7
    2bc4:	0f c0       	rjmp	.+30     	; 0x2be4 <vfprintf+0x20a>
    2bc6:	4c 0c       	add	r4, r12
    2bc8:	04 ff       	sbrs	r16, 4
    2bca:	04 c0       	rjmp	.+8      	; 0x2bd4 <vfprintf+0x1fa>
    2bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bce:	81 33       	cpi	r24, 0x31	; 49
    2bd0:	09 f4       	brne	.+2      	; 0x2bd4 <vfprintf+0x1fa>
    2bd2:	4a 94       	dec	r4
    2bd4:	14 14       	cp	r1, r4
    2bd6:	74 f5       	brge	.+92     	; 0x2c34 <vfprintf+0x25a>
    2bd8:	f8 e0       	ldi	r31, 0x08	; 8
    2bda:	f4 15       	cp	r31, r4
    2bdc:	78 f5       	brcc	.+94     	; 0x2c3c <vfprintf+0x262>
    2bde:	88 e0       	ldi	r24, 0x08	; 8
    2be0:	48 2e       	mov	r4, r24
    2be2:	2c c0       	rjmp	.+88     	; 0x2c3c <vfprintf+0x262>
    2be4:	76 fc       	sbrc	r7, 6
    2be6:	2a c0       	rjmp	.+84     	; 0x2c3c <vfprintf+0x262>
    2be8:	81 2f       	mov	r24, r17
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	8c 15       	cp	r24, r12
    2bee:	9d 05       	cpc	r25, r13
    2bf0:	9c f0       	brlt	.+38     	; 0x2c18 <vfprintf+0x23e>
    2bf2:	6c ef       	ldi	r22, 0xFC	; 252
    2bf4:	c6 16       	cp	r12, r22
    2bf6:	6f ef       	ldi	r22, 0xFF	; 255
    2bf8:	d6 06       	cpc	r13, r22
    2bfa:	74 f0       	brlt	.+28     	; 0x2c18 <vfprintf+0x23e>
    2bfc:	77 2d       	mov	r23, r7
    2bfe:	70 68       	ori	r23, 0x80	; 128
    2c00:	77 2e       	mov	r7, r23
    2c02:	0a c0       	rjmp	.+20     	; 0x2c18 <vfprintf+0x23e>
    2c04:	e2 e0       	ldi	r30, 0x02	; 2
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	ec 0f       	add	r30, r28
    2c0a:	fd 1f       	adc	r31, r29
    2c0c:	e1 0f       	add	r30, r17
    2c0e:	f1 1d       	adc	r31, r1
    2c10:	80 81       	ld	r24, Z
    2c12:	80 33       	cpi	r24, 0x30	; 48
    2c14:	19 f4       	brne	.+6      	; 0x2c1c <vfprintf+0x242>
    2c16:	11 50       	subi	r17, 0x01	; 1
    2c18:	11 11       	cpse	r17, r1
    2c1a:	f4 cf       	rjmp	.-24     	; 0x2c04 <vfprintf+0x22a>
    2c1c:	77 fe       	sbrs	r7, 7
    2c1e:	0e c0       	rjmp	.+28     	; 0x2c3c <vfprintf+0x262>
    2c20:	44 24       	eor	r4, r4
    2c22:	43 94       	inc	r4
    2c24:	41 0e       	add	r4, r17
    2c26:	81 2f       	mov	r24, r17
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	c8 16       	cp	r12, r24
    2c2c:	d9 06       	cpc	r13, r25
    2c2e:	2c f4       	brge	.+10     	; 0x2c3a <vfprintf+0x260>
    2c30:	1c 19       	sub	r17, r12
    2c32:	04 c0       	rjmp	.+8      	; 0x2c3c <vfprintf+0x262>
    2c34:	44 24       	eor	r4, r4
    2c36:	43 94       	inc	r4
    2c38:	01 c0       	rjmp	.+2      	; 0x2c3c <vfprintf+0x262>
    2c3a:	10 e0       	ldi	r17, 0x00	; 0
    2c3c:	77 fe       	sbrs	r7, 7
    2c3e:	07 c0       	rjmp	.+14     	; 0x2c4e <vfprintf+0x274>
    2c40:	1c 14       	cp	r1, r12
    2c42:	1d 04       	cpc	r1, r13
    2c44:	3c f4       	brge	.+14     	; 0x2c54 <vfprintf+0x27a>
    2c46:	96 01       	movw	r18, r12
    2c48:	2f 5f       	subi	r18, 0xFF	; 255
    2c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4c:	05 c0       	rjmp	.+10     	; 0x2c58 <vfprintf+0x27e>
    2c4e:	25 e0       	ldi	r18, 0x05	; 5
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	02 c0       	rjmp	.+4      	; 0x2c58 <vfprintf+0x27e>
    2c54:	21 e0       	ldi	r18, 0x01	; 1
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	66 20       	and	r6, r6
    2c5a:	11 f0       	breq	.+4      	; 0x2c60 <vfprintf+0x286>
    2c5c:	2f 5f       	subi	r18, 0xFF	; 255
    2c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c60:	11 23       	and	r17, r17
    2c62:	31 f0       	breq	.+12     	; 0x2c70 <vfprintf+0x296>
    2c64:	41 2f       	mov	r20, r17
    2c66:	50 e0       	ldi	r21, 0x00	; 0
    2c68:	4f 5f       	subi	r20, 0xFF	; 255
    2c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c6c:	24 0f       	add	r18, r20
    2c6e:	35 1f       	adc	r19, r21
    2c70:	45 2d       	mov	r20, r5
    2c72:	50 e0       	ldi	r21, 0x00	; 0
    2c74:	24 17       	cp	r18, r20
    2c76:	35 07       	cpc	r19, r21
    2c78:	14 f4       	brge	.+4      	; 0x2c7e <vfprintf+0x2a4>
    2c7a:	52 1a       	sub	r5, r18
    2c7c:	01 c0       	rjmp	.+2      	; 0x2c80 <vfprintf+0x2a6>
    2c7e:	51 2c       	mov	r5, r1
    2c80:	87 2d       	mov	r24, r7
    2c82:	89 70       	andi	r24, 0x09	; 9
    2c84:	41 f4       	brne	.+16     	; 0x2c96 <vfprintf+0x2bc>
    2c86:	55 20       	and	r5, r5
    2c88:	31 f0       	breq	.+12     	; 0x2c96 <vfprintf+0x2bc>
    2c8a:	b7 01       	movw	r22, r14
    2c8c:	80 e2       	ldi	r24, 0x20	; 32
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	ba d3       	rcall	.+1908   	; 0x3406 <fputc>
    2c92:	5a 94       	dec	r5
    2c94:	f8 cf       	rjmp	.-16     	; 0x2c86 <vfprintf+0x2ac>
    2c96:	66 20       	and	r6, r6
    2c98:	21 f0       	breq	.+8      	; 0x2ca2 <vfprintf+0x2c8>
    2c9a:	b7 01       	movw	r22, r14
    2c9c:	86 2d       	mov	r24, r6
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	b2 d3       	rcall	.+1892   	; 0x3406 <fputc>
    2ca2:	73 fc       	sbrc	r7, 3
    2ca4:	08 c0       	rjmp	.+16     	; 0x2cb6 <vfprintf+0x2dc>
    2ca6:	55 20       	and	r5, r5
    2ca8:	31 f0       	breq	.+12     	; 0x2cb6 <vfprintf+0x2dc>
    2caa:	b7 01       	movw	r22, r14
    2cac:	80 e3       	ldi	r24, 0x30	; 48
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	aa d3       	rcall	.+1876   	; 0x3406 <fputc>
    2cb2:	5a 94       	dec	r5
    2cb4:	f8 cf       	rjmp	.-16     	; 0x2ca6 <vfprintf+0x2cc>
    2cb6:	77 fe       	sbrs	r7, 7
    2cb8:	5d c0       	rjmp	.+186    	; 0x2d74 <vfprintf+0x39a>
    2cba:	9c 2d       	mov	r25, r12
    2cbc:	8d 2d       	mov	r24, r13
    2cbe:	d7 fe       	sbrs	r13, 7
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <vfprintf+0x2ec>
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	69 2e       	mov	r6, r25
    2cc8:	78 2e       	mov	r7, r24
    2cca:	40 e0       	ldi	r20, 0x00	; 0
    2ccc:	50 e0       	ldi	r21, 0x00	; 0
    2cce:	c6 01       	movw	r24, r12
    2cd0:	84 19       	sub	r24, r4
    2cd2:	91 09       	sbc	r25, r1
    2cd4:	9d 87       	std	Y+13, r25	; 0x0d
    2cd6:	8c 87       	std	Y+12, r24	; 0x0c
    2cd8:	96 01       	movw	r18, r12
    2cda:	26 19       	sub	r18, r6
    2cdc:	37 09       	sbc	r19, r7
    2cde:	28 0d       	add	r18, r8
    2ce0:	39 1d       	adc	r19, r9
    2ce2:	81 2f       	mov	r24, r17
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	ee 27       	eor	r30, r30
    2ce8:	ff 27       	eor	r31, r31
    2cea:	e8 1b       	sub	r30, r24
    2cec:	f9 0b       	sbc	r31, r25
    2cee:	ff 87       	std	Y+15, r31	; 0x0f
    2cf0:	ee 87       	std	Y+14, r30	; 0x0e
    2cf2:	ff ef       	ldi	r31, 0xFF	; 255
    2cf4:	6f 16       	cp	r6, r31
    2cf6:	7f 06       	cpc	r7, r31
    2cf8:	61 f4       	brne	.+24     	; 0x2d12 <vfprintf+0x338>
    2cfa:	b7 01       	movw	r22, r14
    2cfc:	8e e2       	ldi	r24, 0x2E	; 46
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	2b 8b       	std	Y+19, r18	; 0x13
    2d02:	3a 8b       	std	Y+18, r19	; 0x12
    2d04:	48 8b       	std	Y+16, r20	; 0x10
    2d06:	59 8b       	std	Y+17, r21	; 0x11
    2d08:	7e d3       	rcall	.+1788   	; 0x3406 <fputc>
    2d0a:	59 89       	ldd	r21, Y+17	; 0x11
    2d0c:	48 89       	ldd	r20, Y+16	; 0x10
    2d0e:	3a 89       	ldd	r19, Y+18	; 0x12
    2d10:	2b 89       	ldd	r18, Y+19	; 0x13
    2d12:	c6 14       	cp	r12, r6
    2d14:	d7 04       	cpc	r13, r7
    2d16:	54 f0       	brlt	.+20     	; 0x2d2c <vfprintf+0x352>
    2d18:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d1a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d1c:	66 15       	cp	r22, r6
    2d1e:	77 05       	cpc	r23, r7
    2d20:	2c f4       	brge	.+10     	; 0x2d2c <vfprintf+0x352>
    2d22:	f9 01       	movw	r30, r18
    2d24:	e4 0f       	add	r30, r20
    2d26:	f5 1f       	adc	r31, r21
    2d28:	81 81       	ldd	r24, Z+1	; 0x01
    2d2a:	01 c0       	rjmp	.+2      	; 0x2d2e <vfprintf+0x354>
    2d2c:	80 e3       	ldi	r24, 0x30	; 48
    2d2e:	71 e0       	ldi	r23, 0x01	; 1
    2d30:	67 1a       	sub	r6, r23
    2d32:	71 08       	sbc	r7, r1
    2d34:	4f 5f       	subi	r20, 0xFF	; 255
    2d36:	5f 4f       	sbci	r21, 0xFF	; 255
    2d38:	ee 85       	ldd	r30, Y+14	; 0x0e
    2d3a:	ff 85       	ldd	r31, Y+15	; 0x0f
    2d3c:	6e 16       	cp	r6, r30
    2d3e:	7f 06       	cpc	r7, r31
    2d40:	64 f0       	brlt	.+24     	; 0x2d5a <vfprintf+0x380>
    2d42:	b7 01       	movw	r22, r14
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	2b 8b       	std	Y+19, r18	; 0x13
    2d48:	3a 8b       	std	Y+18, r19	; 0x12
    2d4a:	48 8b       	std	Y+16, r20	; 0x10
    2d4c:	59 8b       	std	Y+17, r21	; 0x11
    2d4e:	5b d3       	rcall	.+1718   	; 0x3406 <fputc>
    2d50:	2b 89       	ldd	r18, Y+19	; 0x13
    2d52:	3a 89       	ldd	r19, Y+18	; 0x12
    2d54:	48 89       	ldd	r20, Y+16	; 0x10
    2d56:	59 89       	ldd	r21, Y+17	; 0x11
    2d58:	cc cf       	rjmp	.-104    	; 0x2cf2 <vfprintf+0x318>
    2d5a:	6c 14       	cp	r6, r12
    2d5c:	7d 04       	cpc	r7, r13
    2d5e:	39 f4       	brne	.+14     	; 0x2d6e <vfprintf+0x394>
    2d60:	9a 81       	ldd	r25, Y+2	; 0x02
    2d62:	96 33       	cpi	r25, 0x36	; 54
    2d64:	18 f4       	brcc	.+6      	; 0x2d6c <vfprintf+0x392>
    2d66:	95 33       	cpi	r25, 0x35	; 53
    2d68:	11 f4       	brne	.+4      	; 0x2d6e <vfprintf+0x394>
    2d6a:	04 ff       	sbrs	r16, 4
    2d6c:	81 e3       	ldi	r24, 0x31	; 49
    2d6e:	b7 01       	movw	r22, r14
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	45 c0       	rjmp	.+138    	; 0x2dfe <vfprintf+0x424>
    2d74:	8a 81       	ldd	r24, Y+2	; 0x02
    2d76:	81 33       	cpi	r24, 0x31	; 49
    2d78:	09 f0       	breq	.+2      	; 0x2d7c <vfprintf+0x3a2>
    2d7a:	0f 7e       	andi	r16, 0xEF	; 239
    2d7c:	b7 01       	movw	r22, r14
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	42 d3       	rcall	.+1668   	; 0x3406 <fputc>
    2d82:	11 11       	cpse	r17, r1
    2d84:	05 c0       	rjmp	.+10     	; 0x2d90 <vfprintf+0x3b6>
    2d86:	74 fe       	sbrs	r7, 4
    2d88:	16 c0       	rjmp	.+44     	; 0x2db6 <vfprintf+0x3dc>
    2d8a:	85 e4       	ldi	r24, 0x45	; 69
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	15 c0       	rjmp	.+42     	; 0x2dba <vfprintf+0x3e0>
    2d90:	b7 01       	movw	r22, r14
    2d92:	8e e2       	ldi	r24, 0x2E	; 46
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	37 d3       	rcall	.+1646   	; 0x3406 <fputc>
    2d98:	82 e0       	ldi	r24, 0x02	; 2
    2d9a:	66 24       	eor	r6, r6
    2d9c:	63 94       	inc	r6
    2d9e:	68 0e       	add	r6, r24
    2da0:	f4 01       	movw	r30, r8
    2da2:	e8 0f       	add	r30, r24
    2da4:	f1 1d       	adc	r31, r1
    2da6:	80 81       	ld	r24, Z
    2da8:	b7 01       	movw	r22, r14
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	2c d3       	rcall	.+1624   	; 0x3406 <fputc>
    2dae:	11 50       	subi	r17, 0x01	; 1
    2db0:	51 f3       	breq	.-44     	; 0x2d86 <vfprintf+0x3ac>
    2db2:	86 2d       	mov	r24, r6
    2db4:	f2 cf       	rjmp	.-28     	; 0x2d9a <vfprintf+0x3c0>
    2db6:	85 e6       	ldi	r24, 0x65	; 101
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	b7 01       	movw	r22, r14
    2dbc:	24 d3       	rcall	.+1608   	; 0x3406 <fputc>
    2dbe:	d7 fc       	sbrc	r13, 7
    2dc0:	05 c0       	rjmp	.+10     	; 0x2dcc <vfprintf+0x3f2>
    2dc2:	c1 14       	cp	r12, r1
    2dc4:	d1 04       	cpc	r13, r1
    2dc6:	39 f4       	brne	.+14     	; 0x2dd6 <vfprintf+0x3fc>
    2dc8:	04 ff       	sbrs	r16, 4
    2dca:	05 c0       	rjmp	.+10     	; 0x2dd6 <vfprintf+0x3fc>
    2dcc:	d1 94       	neg	r13
    2dce:	c1 94       	neg	r12
    2dd0:	d1 08       	sbc	r13, r1
    2dd2:	8d e2       	ldi	r24, 0x2D	; 45
    2dd4:	01 c0       	rjmp	.+2      	; 0x2dd8 <vfprintf+0x3fe>
    2dd6:	8b e2       	ldi	r24, 0x2B	; 43
    2dd8:	b7 01       	movw	r22, r14
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	14 d3       	rcall	.+1576   	; 0x3406 <fputc>
    2dde:	80 e3       	ldi	r24, 0x30	; 48
    2de0:	6a e0       	ldi	r22, 0x0A	; 10
    2de2:	c6 16       	cp	r12, r22
    2de4:	d1 04       	cpc	r13, r1
    2de6:	2c f0       	brlt	.+10     	; 0x2df2 <vfprintf+0x418>
    2de8:	8f 5f       	subi	r24, 0xFF	; 255
    2dea:	fa e0       	ldi	r31, 0x0A	; 10
    2dec:	cf 1a       	sub	r12, r31
    2dee:	d1 08       	sbc	r13, r1
    2df0:	f7 cf       	rjmp	.-18     	; 0x2de0 <vfprintf+0x406>
    2df2:	b7 01       	movw	r22, r14
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	07 d3       	rcall	.+1550   	; 0x3406 <fputc>
    2df8:	b7 01       	movw	r22, r14
    2dfa:	c6 01       	movw	r24, r12
    2dfc:	c0 96       	adiw	r24, 0x30	; 48
    2dfe:	03 d3       	rcall	.+1542   	; 0x3406 <fputc>
    2e00:	36 c1       	rjmp	.+620    	; 0x306e <vfprintf+0x694>
    2e02:	83 36       	cpi	r24, 0x63	; 99
    2e04:	31 f0       	breq	.+12     	; 0x2e12 <vfprintf+0x438>
    2e06:	83 37       	cpi	r24, 0x73	; 115
    2e08:	79 f0       	breq	.+30     	; 0x2e28 <vfprintf+0x44e>
    2e0a:	83 35       	cpi	r24, 0x53	; 83
    2e0c:	09 f0       	breq	.+2      	; 0x2e10 <vfprintf+0x436>
    2e0e:	54 c0       	rjmp	.+168    	; 0x2eb8 <vfprintf+0x4de>
    2e10:	20 c0       	rjmp	.+64     	; 0x2e52 <vfprintf+0x478>
    2e12:	56 01       	movw	r10, r12
    2e14:	72 e0       	ldi	r23, 0x02	; 2
    2e16:	a7 0e       	add	r10, r23
    2e18:	b1 1c       	adc	r11, r1
    2e1a:	f6 01       	movw	r30, r12
    2e1c:	80 81       	ld	r24, Z
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	01 e0       	ldi	r16, 0x01	; 1
    2e22:	10 e0       	ldi	r17, 0x00	; 0
    2e24:	64 01       	movw	r12, r8
    2e26:	13 c0       	rjmp	.+38     	; 0x2e4e <vfprintf+0x474>
    2e28:	56 01       	movw	r10, r12
    2e2a:	f2 e0       	ldi	r31, 0x02	; 2
    2e2c:	af 0e       	add	r10, r31
    2e2e:	b1 1c       	adc	r11, r1
    2e30:	f6 01       	movw	r30, r12
    2e32:	c0 80       	ld	r12, Z
    2e34:	d1 80       	ldd	r13, Z+1	; 0x01
    2e36:	26 ff       	sbrs	r18, 6
    2e38:	03 c0       	rjmp	.+6      	; 0x2e40 <vfprintf+0x466>
    2e3a:	61 2f       	mov	r22, r17
    2e3c:	70 e0       	ldi	r23, 0x00	; 0
    2e3e:	02 c0       	rjmp	.+4      	; 0x2e44 <vfprintf+0x46a>
    2e40:	6f ef       	ldi	r22, 0xFF	; 255
    2e42:	7f ef       	ldi	r23, 0xFF	; 255
    2e44:	c6 01       	movw	r24, r12
    2e46:	2b 8b       	std	Y+19, r18	; 0x13
    2e48:	bc d2       	rcall	.+1400   	; 0x33c2 <strnlen>
    2e4a:	8c 01       	movw	r16, r24
    2e4c:	2b 89       	ldd	r18, Y+19	; 0x13
    2e4e:	2f 77       	andi	r18, 0x7F	; 127
    2e50:	14 c0       	rjmp	.+40     	; 0x2e7a <vfprintf+0x4a0>
    2e52:	56 01       	movw	r10, r12
    2e54:	f2 e0       	ldi	r31, 0x02	; 2
    2e56:	af 0e       	add	r10, r31
    2e58:	b1 1c       	adc	r11, r1
    2e5a:	f6 01       	movw	r30, r12
    2e5c:	c0 80       	ld	r12, Z
    2e5e:	d1 80       	ldd	r13, Z+1	; 0x01
    2e60:	26 ff       	sbrs	r18, 6
    2e62:	03 c0       	rjmp	.+6      	; 0x2e6a <vfprintf+0x490>
    2e64:	61 2f       	mov	r22, r17
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	02 c0       	rjmp	.+4      	; 0x2e6e <vfprintf+0x494>
    2e6a:	6f ef       	ldi	r22, 0xFF	; 255
    2e6c:	7f ef       	ldi	r23, 0xFF	; 255
    2e6e:	c6 01       	movw	r24, r12
    2e70:	2b 8b       	std	Y+19, r18	; 0x13
    2e72:	9c d2       	rcall	.+1336   	; 0x33ac <strnlen_P>
    2e74:	8c 01       	movw	r16, r24
    2e76:	2b 89       	ldd	r18, Y+19	; 0x13
    2e78:	20 68       	ori	r18, 0x80	; 128
    2e7a:	72 2e       	mov	r7, r18
    2e7c:	23 fd       	sbrc	r18, 3
    2e7e:	18 c0       	rjmp	.+48     	; 0x2eb0 <vfprintf+0x4d6>
    2e80:	85 2d       	mov	r24, r5
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	08 17       	cp	r16, r24
    2e86:	19 07       	cpc	r17, r25
    2e88:	98 f4       	brcc	.+38     	; 0x2eb0 <vfprintf+0x4d6>
    2e8a:	b7 01       	movw	r22, r14
    2e8c:	80 e2       	ldi	r24, 0x20	; 32
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	ba d2       	rcall	.+1396   	; 0x3406 <fputc>
    2e92:	5a 94       	dec	r5
    2e94:	f5 cf       	rjmp	.-22     	; 0x2e80 <vfprintf+0x4a6>
    2e96:	f6 01       	movw	r30, r12
    2e98:	77 fc       	sbrc	r7, 7
    2e9a:	85 91       	lpm	r24, Z+
    2e9c:	77 fe       	sbrs	r7, 7
    2e9e:	81 91       	ld	r24, Z+
    2ea0:	6f 01       	movw	r12, r30
    2ea2:	b7 01       	movw	r22, r14
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	af d2       	rcall	.+1374   	; 0x3406 <fputc>
    2ea8:	51 10       	cpse	r5, r1
    2eaa:	5a 94       	dec	r5
    2eac:	01 50       	subi	r16, 0x01	; 1
    2eae:	11 09       	sbc	r17, r1
    2eb0:	01 15       	cp	r16, r1
    2eb2:	11 05       	cpc	r17, r1
    2eb4:	81 f7       	brne	.-32     	; 0x2e96 <vfprintf+0x4bc>
    2eb6:	db c0       	rjmp	.+438    	; 0x306e <vfprintf+0x694>
    2eb8:	84 36       	cpi	r24, 0x64	; 100
    2eba:	11 f0       	breq	.+4      	; 0x2ec0 <vfprintf+0x4e6>
    2ebc:	89 36       	cpi	r24, 0x69	; 105
    2ebe:	49 f5       	brne	.+82     	; 0x2f12 <vfprintf+0x538>
    2ec0:	56 01       	movw	r10, r12
    2ec2:	27 ff       	sbrs	r18, 7
    2ec4:	09 c0       	rjmp	.+18     	; 0x2ed8 <vfprintf+0x4fe>
    2ec6:	f4 e0       	ldi	r31, 0x04	; 4
    2ec8:	af 0e       	add	r10, r31
    2eca:	b1 1c       	adc	r11, r1
    2ecc:	f6 01       	movw	r30, r12
    2ece:	60 81       	ld	r22, Z
    2ed0:	71 81       	ldd	r23, Z+1	; 0x01
    2ed2:	82 81       	ldd	r24, Z+2	; 0x02
    2ed4:	93 81       	ldd	r25, Z+3	; 0x03
    2ed6:	0a c0       	rjmp	.+20     	; 0x2eec <vfprintf+0x512>
    2ed8:	f2 e0       	ldi	r31, 0x02	; 2
    2eda:	af 0e       	add	r10, r31
    2edc:	b1 1c       	adc	r11, r1
    2ede:	f6 01       	movw	r30, r12
    2ee0:	60 81       	ld	r22, Z
    2ee2:	71 81       	ldd	r23, Z+1	; 0x01
    2ee4:	88 27       	eor	r24, r24
    2ee6:	77 fd       	sbrc	r23, 7
    2ee8:	80 95       	com	r24
    2eea:	98 2f       	mov	r25, r24
    2eec:	02 2f       	mov	r16, r18
    2eee:	0f 76       	andi	r16, 0x6F	; 111
    2ef0:	97 ff       	sbrs	r25, 7
    2ef2:	08 c0       	rjmp	.+16     	; 0x2f04 <vfprintf+0x52a>
    2ef4:	90 95       	com	r25
    2ef6:	80 95       	com	r24
    2ef8:	70 95       	com	r23
    2efa:	61 95       	neg	r22
    2efc:	7f 4f       	sbci	r23, 0xFF	; 255
    2efe:	8f 4f       	sbci	r24, 0xFF	; 255
    2f00:	9f 4f       	sbci	r25, 0xFF	; 255
    2f02:	00 68       	ori	r16, 0x80	; 128
    2f04:	2a e0       	ldi	r18, 0x0A	; 10
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	a4 01       	movw	r20, r8
    2f0a:	d7 d2       	rcall	.+1454   	; 0x34ba <__ultoa_invert>
    2f0c:	c8 2e       	mov	r12, r24
    2f0e:	c8 18       	sub	r12, r8
    2f10:	3d c0       	rjmp	.+122    	; 0x2f8c <vfprintf+0x5b2>
    2f12:	02 2f       	mov	r16, r18
    2f14:	85 37       	cpi	r24, 0x75	; 117
    2f16:	21 f4       	brne	.+8      	; 0x2f20 <vfprintf+0x546>
    2f18:	0f 7e       	andi	r16, 0xEF	; 239
    2f1a:	2a e0       	ldi	r18, 0x0A	; 10
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	1d c0       	rjmp	.+58     	; 0x2f5a <vfprintf+0x580>
    2f20:	09 7f       	andi	r16, 0xF9	; 249
    2f22:	8f 36       	cpi	r24, 0x6F	; 111
    2f24:	91 f0       	breq	.+36     	; 0x2f4a <vfprintf+0x570>
    2f26:	18 f4       	brcc	.+6      	; 0x2f2e <vfprintf+0x554>
    2f28:	88 35       	cpi	r24, 0x58	; 88
    2f2a:	59 f0       	breq	.+22     	; 0x2f42 <vfprintf+0x568>
    2f2c:	a9 c0       	rjmp	.+338    	; 0x3080 <vfprintf+0x6a6>
    2f2e:	80 37       	cpi	r24, 0x70	; 112
    2f30:	19 f0       	breq	.+6      	; 0x2f38 <vfprintf+0x55e>
    2f32:	88 37       	cpi	r24, 0x78	; 120
    2f34:	11 f0       	breq	.+4      	; 0x2f3a <vfprintf+0x560>
    2f36:	a4 c0       	rjmp	.+328    	; 0x3080 <vfprintf+0x6a6>
    2f38:	00 61       	ori	r16, 0x10	; 16
    2f3a:	04 ff       	sbrs	r16, 4
    2f3c:	09 c0       	rjmp	.+18     	; 0x2f50 <vfprintf+0x576>
    2f3e:	04 60       	ori	r16, 0x04	; 4
    2f40:	07 c0       	rjmp	.+14     	; 0x2f50 <vfprintf+0x576>
    2f42:	24 ff       	sbrs	r18, 4
    2f44:	08 c0       	rjmp	.+16     	; 0x2f56 <vfprintf+0x57c>
    2f46:	06 60       	ori	r16, 0x06	; 6
    2f48:	06 c0       	rjmp	.+12     	; 0x2f56 <vfprintf+0x57c>
    2f4a:	28 e0       	ldi	r18, 0x08	; 8
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	05 c0       	rjmp	.+10     	; 0x2f5a <vfprintf+0x580>
    2f50:	20 e1       	ldi	r18, 0x10	; 16
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	02 c0       	rjmp	.+4      	; 0x2f5a <vfprintf+0x580>
    2f56:	20 e1       	ldi	r18, 0x10	; 16
    2f58:	32 e0       	ldi	r19, 0x02	; 2
    2f5a:	56 01       	movw	r10, r12
    2f5c:	07 ff       	sbrs	r16, 7
    2f5e:	09 c0       	rjmp	.+18     	; 0x2f72 <vfprintf+0x598>
    2f60:	f4 e0       	ldi	r31, 0x04	; 4
    2f62:	af 0e       	add	r10, r31
    2f64:	b1 1c       	adc	r11, r1
    2f66:	f6 01       	movw	r30, r12
    2f68:	60 81       	ld	r22, Z
    2f6a:	71 81       	ldd	r23, Z+1	; 0x01
    2f6c:	82 81       	ldd	r24, Z+2	; 0x02
    2f6e:	93 81       	ldd	r25, Z+3	; 0x03
    2f70:	08 c0       	rjmp	.+16     	; 0x2f82 <vfprintf+0x5a8>
    2f72:	f2 e0       	ldi	r31, 0x02	; 2
    2f74:	af 0e       	add	r10, r31
    2f76:	b1 1c       	adc	r11, r1
    2f78:	f6 01       	movw	r30, r12
    2f7a:	60 81       	ld	r22, Z
    2f7c:	71 81       	ldd	r23, Z+1	; 0x01
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	a4 01       	movw	r20, r8
    2f84:	9a d2       	rcall	.+1332   	; 0x34ba <__ultoa_invert>
    2f86:	c8 2e       	mov	r12, r24
    2f88:	c8 18       	sub	r12, r8
    2f8a:	0f 77       	andi	r16, 0x7F	; 127
    2f8c:	06 ff       	sbrs	r16, 6
    2f8e:	0b c0       	rjmp	.+22     	; 0x2fa6 <vfprintf+0x5cc>
    2f90:	20 2f       	mov	r18, r16
    2f92:	2e 7f       	andi	r18, 0xFE	; 254
    2f94:	c1 16       	cp	r12, r17
    2f96:	50 f4       	brcc	.+20     	; 0x2fac <vfprintf+0x5d2>
    2f98:	04 ff       	sbrs	r16, 4
    2f9a:	0a c0       	rjmp	.+20     	; 0x2fb0 <vfprintf+0x5d6>
    2f9c:	02 fd       	sbrc	r16, 2
    2f9e:	08 c0       	rjmp	.+16     	; 0x2fb0 <vfprintf+0x5d6>
    2fa0:	20 2f       	mov	r18, r16
    2fa2:	2e 7e       	andi	r18, 0xEE	; 238
    2fa4:	05 c0       	rjmp	.+10     	; 0x2fb0 <vfprintf+0x5d6>
    2fa6:	dc 2c       	mov	r13, r12
    2fa8:	20 2f       	mov	r18, r16
    2faa:	03 c0       	rjmp	.+6      	; 0x2fb2 <vfprintf+0x5d8>
    2fac:	dc 2c       	mov	r13, r12
    2fae:	01 c0       	rjmp	.+2      	; 0x2fb2 <vfprintf+0x5d8>
    2fb0:	d1 2e       	mov	r13, r17
    2fb2:	24 ff       	sbrs	r18, 4
    2fb4:	0d c0       	rjmp	.+26     	; 0x2fd0 <vfprintf+0x5f6>
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	ec 0d       	add	r30, r12
    2fba:	f1 1d       	adc	r31, r1
    2fbc:	80 81       	ld	r24, Z
    2fbe:	80 33       	cpi	r24, 0x30	; 48
    2fc0:	11 f4       	brne	.+4      	; 0x2fc6 <vfprintf+0x5ec>
    2fc2:	29 7e       	andi	r18, 0xE9	; 233
    2fc4:	09 c0       	rjmp	.+18     	; 0x2fd8 <vfprintf+0x5fe>
    2fc6:	22 ff       	sbrs	r18, 2
    2fc8:	06 c0       	rjmp	.+12     	; 0x2fd6 <vfprintf+0x5fc>
    2fca:	d3 94       	inc	r13
    2fcc:	d3 94       	inc	r13
    2fce:	04 c0       	rjmp	.+8      	; 0x2fd8 <vfprintf+0x5fe>
    2fd0:	82 2f       	mov	r24, r18
    2fd2:	86 78       	andi	r24, 0x86	; 134
    2fd4:	09 f0       	breq	.+2      	; 0x2fd8 <vfprintf+0x5fe>
    2fd6:	d3 94       	inc	r13
    2fd8:	23 fd       	sbrc	r18, 3
    2fda:	12 c0       	rjmp	.+36     	; 0x3000 <vfprintf+0x626>
    2fdc:	20 ff       	sbrs	r18, 0
    2fde:	06 c0       	rjmp	.+12     	; 0x2fec <vfprintf+0x612>
    2fe0:	1c 2d       	mov	r17, r12
    2fe2:	d5 14       	cp	r13, r5
    2fe4:	18 f4       	brcc	.+6      	; 0x2fec <vfprintf+0x612>
    2fe6:	15 0d       	add	r17, r5
    2fe8:	1d 19       	sub	r17, r13
    2fea:	d5 2c       	mov	r13, r5
    2fec:	d5 14       	cp	r13, r5
    2fee:	60 f4       	brcc	.+24     	; 0x3008 <vfprintf+0x62e>
    2ff0:	b7 01       	movw	r22, r14
    2ff2:	80 e2       	ldi	r24, 0x20	; 32
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	2b 8b       	std	Y+19, r18	; 0x13
    2ff8:	06 d2       	rcall	.+1036   	; 0x3406 <fputc>
    2ffa:	d3 94       	inc	r13
    2ffc:	2b 89       	ldd	r18, Y+19	; 0x13
    2ffe:	f6 cf       	rjmp	.-20     	; 0x2fec <vfprintf+0x612>
    3000:	d5 14       	cp	r13, r5
    3002:	10 f4       	brcc	.+4      	; 0x3008 <vfprintf+0x62e>
    3004:	5d 18       	sub	r5, r13
    3006:	01 c0       	rjmp	.+2      	; 0x300a <vfprintf+0x630>
    3008:	51 2c       	mov	r5, r1
    300a:	24 ff       	sbrs	r18, 4
    300c:	11 c0       	rjmp	.+34     	; 0x3030 <vfprintf+0x656>
    300e:	b7 01       	movw	r22, r14
    3010:	80 e3       	ldi	r24, 0x30	; 48
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	2b 8b       	std	Y+19, r18	; 0x13
    3016:	f7 d1       	rcall	.+1006   	; 0x3406 <fputc>
    3018:	2b 89       	ldd	r18, Y+19	; 0x13
    301a:	22 ff       	sbrs	r18, 2
    301c:	16 c0       	rjmp	.+44     	; 0x304a <vfprintf+0x670>
    301e:	21 ff       	sbrs	r18, 1
    3020:	03 c0       	rjmp	.+6      	; 0x3028 <vfprintf+0x64e>
    3022:	88 e5       	ldi	r24, 0x58	; 88
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	02 c0       	rjmp	.+4      	; 0x302c <vfprintf+0x652>
    3028:	88 e7       	ldi	r24, 0x78	; 120
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	b7 01       	movw	r22, r14
    302e:	0c c0       	rjmp	.+24     	; 0x3048 <vfprintf+0x66e>
    3030:	82 2f       	mov	r24, r18
    3032:	86 78       	andi	r24, 0x86	; 134
    3034:	51 f0       	breq	.+20     	; 0x304a <vfprintf+0x670>
    3036:	21 fd       	sbrc	r18, 1
    3038:	02 c0       	rjmp	.+4      	; 0x303e <vfprintf+0x664>
    303a:	80 e2       	ldi	r24, 0x20	; 32
    303c:	01 c0       	rjmp	.+2      	; 0x3040 <vfprintf+0x666>
    303e:	8b e2       	ldi	r24, 0x2B	; 43
    3040:	27 fd       	sbrc	r18, 7
    3042:	8d e2       	ldi	r24, 0x2D	; 45
    3044:	b7 01       	movw	r22, r14
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	de d1       	rcall	.+956    	; 0x3406 <fputc>
    304a:	c1 16       	cp	r12, r17
    304c:	30 f4       	brcc	.+12     	; 0x305a <vfprintf+0x680>
    304e:	b7 01       	movw	r22, r14
    3050:	80 e3       	ldi	r24, 0x30	; 48
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	d8 d1       	rcall	.+944    	; 0x3406 <fputc>
    3056:	11 50       	subi	r17, 0x01	; 1
    3058:	f8 cf       	rjmp	.-16     	; 0x304a <vfprintf+0x670>
    305a:	ca 94       	dec	r12
    305c:	f4 01       	movw	r30, r8
    305e:	ec 0d       	add	r30, r12
    3060:	f1 1d       	adc	r31, r1
    3062:	80 81       	ld	r24, Z
    3064:	b7 01       	movw	r22, r14
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	ce d1       	rcall	.+924    	; 0x3406 <fputc>
    306a:	c1 10       	cpse	r12, r1
    306c:	f6 cf       	rjmp	.-20     	; 0x305a <vfprintf+0x680>
    306e:	55 20       	and	r5, r5
    3070:	09 f4       	brne	.+2      	; 0x3074 <vfprintf+0x69a>
    3072:	dd cc       	rjmp	.-1606   	; 0x2a2e <vfprintf+0x54>
    3074:	b7 01       	movw	r22, r14
    3076:	80 e2       	ldi	r24, 0x20	; 32
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	c5 d1       	rcall	.+906    	; 0x3406 <fputc>
    307c:	5a 94       	dec	r5
    307e:	f7 cf       	rjmp	.-18     	; 0x306e <vfprintf+0x694>
    3080:	f7 01       	movw	r30, r14
    3082:	86 81       	ldd	r24, Z+6	; 0x06
    3084:	97 81       	ldd	r25, Z+7	; 0x07
    3086:	02 c0       	rjmp	.+4      	; 0x308c <vfprintf+0x6b2>
    3088:	8f ef       	ldi	r24, 0xFF	; 255
    308a:	9f ef       	ldi	r25, 0xFF	; 255
    308c:	63 96       	adiw	r28, 0x13	; 19
    308e:	e2 e1       	ldi	r30, 0x12	; 18
    3090:	65 c0       	rjmp	.+202    	; 0x315c <__epilogue_restores__>

00003092 <__udivmodhi4>:
    3092:	aa 1b       	sub	r26, r26
    3094:	bb 1b       	sub	r27, r27
    3096:	51 e1       	ldi	r21, 0x11	; 17
    3098:	07 c0       	rjmp	.+14     	; 0x30a8 <__udivmodhi4_ep>

0000309a <__udivmodhi4_loop>:
    309a:	aa 1f       	adc	r26, r26
    309c:	bb 1f       	adc	r27, r27
    309e:	a6 17       	cp	r26, r22
    30a0:	b7 07       	cpc	r27, r23
    30a2:	10 f0       	brcs	.+4      	; 0x30a8 <__udivmodhi4_ep>
    30a4:	a6 1b       	sub	r26, r22
    30a6:	b7 0b       	sbc	r27, r23

000030a8 <__udivmodhi4_ep>:
    30a8:	88 1f       	adc	r24, r24
    30aa:	99 1f       	adc	r25, r25
    30ac:	5a 95       	dec	r21
    30ae:	a9 f7       	brne	.-22     	; 0x309a <__udivmodhi4_loop>
    30b0:	80 95       	com	r24
    30b2:	90 95       	com	r25
    30b4:	bc 01       	movw	r22, r24
    30b6:	cd 01       	movw	r24, r26
    30b8:	08 95       	ret

000030ba <__divmodhi4>:
    30ba:	97 fb       	bst	r25, 7
    30bc:	07 2e       	mov	r0, r23
    30be:	16 f4       	brtc	.+4      	; 0x30c4 <__divmodhi4+0xa>
    30c0:	00 94       	com	r0
    30c2:	06 d0       	rcall	.+12     	; 0x30d0 <__divmodhi4_neg1>
    30c4:	77 fd       	sbrc	r23, 7
    30c6:	08 d0       	rcall	.+16     	; 0x30d8 <__divmodhi4_neg2>
    30c8:	e4 df       	rcall	.-56     	; 0x3092 <__udivmodhi4>
    30ca:	07 fc       	sbrc	r0, 7
    30cc:	05 d0       	rcall	.+10     	; 0x30d8 <__divmodhi4_neg2>
    30ce:	3e f4       	brtc	.+14     	; 0x30de <__divmodhi4_exit>

000030d0 <__divmodhi4_neg1>:
    30d0:	90 95       	com	r25
    30d2:	81 95       	neg	r24
    30d4:	9f 4f       	sbci	r25, 0xFF	; 255
    30d6:	08 95       	ret

000030d8 <__divmodhi4_neg2>:
    30d8:	70 95       	com	r23
    30da:	61 95       	neg	r22
    30dc:	7f 4f       	sbci	r23, 0xFF	; 255

000030de <__divmodhi4_exit>:
    30de:	08 95       	ret

000030e0 <__udivmodsi4>:
    30e0:	a1 e2       	ldi	r26, 0x21	; 33
    30e2:	1a 2e       	mov	r1, r26
    30e4:	aa 1b       	sub	r26, r26
    30e6:	bb 1b       	sub	r27, r27
    30e8:	fd 01       	movw	r30, r26
    30ea:	0d c0       	rjmp	.+26     	; 0x3106 <__udivmodsi4_ep>

000030ec <__udivmodsi4_loop>:
    30ec:	aa 1f       	adc	r26, r26
    30ee:	bb 1f       	adc	r27, r27
    30f0:	ee 1f       	adc	r30, r30
    30f2:	ff 1f       	adc	r31, r31
    30f4:	a2 17       	cp	r26, r18
    30f6:	b3 07       	cpc	r27, r19
    30f8:	e4 07       	cpc	r30, r20
    30fa:	f5 07       	cpc	r31, r21
    30fc:	20 f0       	brcs	.+8      	; 0x3106 <__udivmodsi4_ep>
    30fe:	a2 1b       	sub	r26, r18
    3100:	b3 0b       	sbc	r27, r19
    3102:	e4 0b       	sbc	r30, r20
    3104:	f5 0b       	sbc	r31, r21

00003106 <__udivmodsi4_ep>:
    3106:	66 1f       	adc	r22, r22
    3108:	77 1f       	adc	r23, r23
    310a:	88 1f       	adc	r24, r24
    310c:	99 1f       	adc	r25, r25
    310e:	1a 94       	dec	r1
    3110:	69 f7       	brne	.-38     	; 0x30ec <__udivmodsi4_loop>
    3112:	60 95       	com	r22
    3114:	70 95       	com	r23
    3116:	80 95       	com	r24
    3118:	90 95       	com	r25
    311a:	9b 01       	movw	r18, r22
    311c:	ac 01       	movw	r20, r24
    311e:	bd 01       	movw	r22, r26
    3120:	cf 01       	movw	r24, r30
    3122:	08 95       	ret

00003124 <__prologue_saves__>:
    3124:	2f 92       	push	r2
    3126:	3f 92       	push	r3
    3128:	4f 92       	push	r4
    312a:	5f 92       	push	r5
    312c:	6f 92       	push	r6
    312e:	7f 92       	push	r7
    3130:	8f 92       	push	r8
    3132:	9f 92       	push	r9
    3134:	af 92       	push	r10
    3136:	bf 92       	push	r11
    3138:	cf 92       	push	r12
    313a:	df 92       	push	r13
    313c:	ef 92       	push	r14
    313e:	ff 92       	push	r15
    3140:	0f 93       	push	r16
    3142:	1f 93       	push	r17
    3144:	cf 93       	push	r28
    3146:	df 93       	push	r29
    3148:	cd b7       	in	r28, 0x3d	; 61
    314a:	de b7       	in	r29, 0x3e	; 62
    314c:	ca 1b       	sub	r28, r26
    314e:	db 0b       	sbc	r29, r27
    3150:	0f b6       	in	r0, 0x3f	; 63
    3152:	f8 94       	cli
    3154:	de bf       	out	0x3e, r29	; 62
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	cd bf       	out	0x3d, r28	; 61
    315a:	09 94       	ijmp

0000315c <__epilogue_restores__>:
    315c:	2a 88       	ldd	r2, Y+18	; 0x12
    315e:	39 88       	ldd	r3, Y+17	; 0x11
    3160:	48 88       	ldd	r4, Y+16	; 0x10
    3162:	5f 84       	ldd	r5, Y+15	; 0x0f
    3164:	6e 84       	ldd	r6, Y+14	; 0x0e
    3166:	7d 84       	ldd	r7, Y+13	; 0x0d
    3168:	8c 84       	ldd	r8, Y+12	; 0x0c
    316a:	9b 84       	ldd	r9, Y+11	; 0x0b
    316c:	aa 84       	ldd	r10, Y+10	; 0x0a
    316e:	b9 84       	ldd	r11, Y+9	; 0x09
    3170:	c8 84       	ldd	r12, Y+8	; 0x08
    3172:	df 80       	ldd	r13, Y+7	; 0x07
    3174:	ee 80       	ldd	r14, Y+6	; 0x06
    3176:	fd 80       	ldd	r15, Y+5	; 0x05
    3178:	0c 81       	ldd	r16, Y+4	; 0x04
    317a:	1b 81       	ldd	r17, Y+3	; 0x03
    317c:	aa 81       	ldd	r26, Y+2	; 0x02
    317e:	b9 81       	ldd	r27, Y+1	; 0x01
    3180:	ce 0f       	add	r28, r30
    3182:	d1 1d       	adc	r29, r1
    3184:	0f b6       	in	r0, 0x3f	; 63
    3186:	f8 94       	cli
    3188:	de bf       	out	0x3e, r29	; 62
    318a:	0f be       	out	0x3f, r0	; 63
    318c:	cd bf       	out	0x3d, r28	; 61
    318e:	ed 01       	movw	r28, r26
    3190:	08 95       	ret

00003192 <atoi>:
    3192:	fc 01       	movw	r30, r24
    3194:	88 27       	eor	r24, r24
    3196:	99 27       	eor	r25, r25
    3198:	e8 94       	clt
    319a:	21 91       	ld	r18, Z+
    319c:	20 32       	cpi	r18, 0x20	; 32
    319e:	e9 f3       	breq	.-6      	; 0x319a <atoi+0x8>
    31a0:	29 30       	cpi	r18, 0x09	; 9
    31a2:	10 f0       	brcs	.+4      	; 0x31a8 <atoi+0x16>
    31a4:	2e 30       	cpi	r18, 0x0E	; 14
    31a6:	c8 f3       	brcs	.-14     	; 0x319a <atoi+0x8>
    31a8:	2b 32       	cpi	r18, 0x2B	; 43
    31aa:	39 f0       	breq	.+14     	; 0x31ba <atoi+0x28>
    31ac:	2d 32       	cpi	r18, 0x2D	; 45
    31ae:	31 f4       	brne	.+12     	; 0x31bc <atoi+0x2a>
    31b0:	68 94       	set
    31b2:	03 c0       	rjmp	.+6      	; 0x31ba <atoi+0x28>
    31b4:	11 d1       	rcall	.+546    	; 0x33d8 <__mulhi_const_10>
    31b6:	82 0f       	add	r24, r18
    31b8:	91 1d       	adc	r25, r1
    31ba:	21 91       	ld	r18, Z+
    31bc:	20 53       	subi	r18, 0x30	; 48
    31be:	2a 30       	cpi	r18, 0x0A	; 10
    31c0:	c8 f3       	brcs	.-14     	; 0x31b4 <atoi+0x22>
    31c2:	1e f4       	brtc	.+6      	; 0x31ca <atoi+0x38>
    31c4:	90 95       	com	r25
    31c6:	81 95       	neg	r24
    31c8:	9f 4f       	sbci	r25, 0xFF	; 255
    31ca:	08 95       	ret

000031cc <__ftoa_engine>:
    31cc:	28 30       	cpi	r18, 0x08	; 8
    31ce:	08 f0       	brcs	.+2      	; 0x31d2 <__ftoa_engine+0x6>
    31d0:	27 e0       	ldi	r18, 0x07	; 7
    31d2:	33 27       	eor	r19, r19
    31d4:	da 01       	movw	r26, r20
    31d6:	99 0f       	add	r25, r25
    31d8:	31 1d       	adc	r19, r1
    31da:	87 fd       	sbrc	r24, 7
    31dc:	91 60       	ori	r25, 0x01	; 1
    31de:	00 96       	adiw	r24, 0x00	; 0
    31e0:	61 05       	cpc	r22, r1
    31e2:	71 05       	cpc	r23, r1
    31e4:	39 f4       	brne	.+14     	; 0x31f4 <__ftoa_engine+0x28>
    31e6:	32 60       	ori	r19, 0x02	; 2
    31e8:	2e 5f       	subi	r18, 0xFE	; 254
    31ea:	3d 93       	st	X+, r19
    31ec:	30 e3       	ldi	r19, 0x30	; 48
    31ee:	2a 95       	dec	r18
    31f0:	e1 f7       	brne	.-8      	; 0x31ea <__ftoa_engine+0x1e>
    31f2:	08 95       	ret
    31f4:	9f 3f       	cpi	r25, 0xFF	; 255
    31f6:	30 f0       	brcs	.+12     	; 0x3204 <__ftoa_engine+0x38>
    31f8:	80 38       	cpi	r24, 0x80	; 128
    31fa:	71 05       	cpc	r23, r1
    31fc:	61 05       	cpc	r22, r1
    31fe:	09 f0       	breq	.+2      	; 0x3202 <__ftoa_engine+0x36>
    3200:	3c 5f       	subi	r19, 0xFC	; 252
    3202:	3c 5f       	subi	r19, 0xFC	; 252
    3204:	3d 93       	st	X+, r19
    3206:	91 30       	cpi	r25, 0x01	; 1
    3208:	08 f0       	brcs	.+2      	; 0x320c <__ftoa_engine+0x40>
    320a:	80 68       	ori	r24, 0x80	; 128
    320c:	91 1d       	adc	r25, r1
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	1f 93       	push	r17
    3214:	0f 93       	push	r16
    3216:	ff 92       	push	r15
    3218:	ef 92       	push	r14
    321a:	19 2f       	mov	r17, r25
    321c:	98 7f       	andi	r25, 0xF8	; 248
    321e:	96 95       	lsr	r25
    3220:	e9 2f       	mov	r30, r25
    3222:	96 95       	lsr	r25
    3224:	96 95       	lsr	r25
    3226:	e9 0f       	add	r30, r25
    3228:	ff 27       	eor	r31, r31
    322a:	ef 55       	subi	r30, 0x5F	; 95
    322c:	fc 4f       	sbci	r31, 0xFC	; 252
    322e:	99 27       	eor	r25, r25
    3230:	33 27       	eor	r19, r19
    3232:	ee 24       	eor	r14, r14
    3234:	ff 24       	eor	r15, r15
    3236:	a7 01       	movw	r20, r14
    3238:	e7 01       	movw	r28, r14
    323a:	05 90       	lpm	r0, Z+
    323c:	08 94       	sec
    323e:	07 94       	ror	r0
    3240:	28 f4       	brcc	.+10     	; 0x324c <__ftoa_engine+0x80>
    3242:	36 0f       	add	r19, r22
    3244:	e7 1e       	adc	r14, r23
    3246:	f8 1e       	adc	r15, r24
    3248:	49 1f       	adc	r20, r25
    324a:	51 1d       	adc	r21, r1
    324c:	66 0f       	add	r22, r22
    324e:	77 1f       	adc	r23, r23
    3250:	88 1f       	adc	r24, r24
    3252:	99 1f       	adc	r25, r25
    3254:	06 94       	lsr	r0
    3256:	a1 f7       	brne	.-24     	; 0x3240 <__ftoa_engine+0x74>
    3258:	05 90       	lpm	r0, Z+
    325a:	07 94       	ror	r0
    325c:	28 f4       	brcc	.+10     	; 0x3268 <__ftoa_engine+0x9c>
    325e:	e7 0e       	add	r14, r23
    3260:	f8 1e       	adc	r15, r24
    3262:	49 1f       	adc	r20, r25
    3264:	56 1f       	adc	r21, r22
    3266:	c1 1d       	adc	r28, r1
    3268:	77 0f       	add	r23, r23
    326a:	88 1f       	adc	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	66 1f       	adc	r22, r22
    3270:	06 94       	lsr	r0
    3272:	a1 f7       	brne	.-24     	; 0x325c <__ftoa_engine+0x90>
    3274:	05 90       	lpm	r0, Z+
    3276:	07 94       	ror	r0
    3278:	28 f4       	brcc	.+10     	; 0x3284 <__ftoa_engine+0xb8>
    327a:	f8 0e       	add	r15, r24
    327c:	49 1f       	adc	r20, r25
    327e:	56 1f       	adc	r21, r22
    3280:	c7 1f       	adc	r28, r23
    3282:	d1 1d       	adc	r29, r1
    3284:	88 0f       	add	r24, r24
    3286:	99 1f       	adc	r25, r25
    3288:	66 1f       	adc	r22, r22
    328a:	77 1f       	adc	r23, r23
    328c:	06 94       	lsr	r0
    328e:	a1 f7       	brne	.-24     	; 0x3278 <__ftoa_engine+0xac>
    3290:	05 90       	lpm	r0, Z+
    3292:	07 94       	ror	r0
    3294:	20 f4       	brcc	.+8      	; 0x329e <__ftoa_engine+0xd2>
    3296:	49 0f       	add	r20, r25
    3298:	56 1f       	adc	r21, r22
    329a:	c7 1f       	adc	r28, r23
    329c:	d8 1f       	adc	r29, r24
    329e:	99 0f       	add	r25, r25
    32a0:	66 1f       	adc	r22, r22
    32a2:	77 1f       	adc	r23, r23
    32a4:	88 1f       	adc	r24, r24
    32a6:	06 94       	lsr	r0
    32a8:	a9 f7       	brne	.-22     	; 0x3294 <__ftoa_engine+0xc8>
    32aa:	84 91       	lpm	r24, Z
    32ac:	10 95       	com	r17
    32ae:	17 70       	andi	r17, 0x07	; 7
    32b0:	41 f0       	breq	.+16     	; 0x32c2 <__ftoa_engine+0xf6>
    32b2:	d6 95       	lsr	r29
    32b4:	c7 95       	ror	r28
    32b6:	57 95       	ror	r21
    32b8:	47 95       	ror	r20
    32ba:	f7 94       	ror	r15
    32bc:	e7 94       	ror	r14
    32be:	1a 95       	dec	r17
    32c0:	c1 f7       	brne	.-16     	; 0x32b2 <__ftoa_engine+0xe6>
    32c2:	e7 e4       	ldi	r30, 0x47	; 71
    32c4:	f3 e0       	ldi	r31, 0x03	; 3
    32c6:	68 94       	set
    32c8:	15 90       	lpm	r1, Z+
    32ca:	15 91       	lpm	r17, Z+
    32cc:	35 91       	lpm	r19, Z+
    32ce:	65 91       	lpm	r22, Z+
    32d0:	95 91       	lpm	r25, Z+
    32d2:	05 90       	lpm	r0, Z+
    32d4:	7f e2       	ldi	r23, 0x2F	; 47
    32d6:	73 95       	inc	r23
    32d8:	e1 18       	sub	r14, r1
    32da:	f1 0a       	sbc	r15, r17
    32dc:	43 0b       	sbc	r20, r19
    32de:	56 0b       	sbc	r21, r22
    32e0:	c9 0b       	sbc	r28, r25
    32e2:	d0 09       	sbc	r29, r0
    32e4:	c0 f7       	brcc	.-16     	; 0x32d6 <__ftoa_engine+0x10a>
    32e6:	e1 0c       	add	r14, r1
    32e8:	f1 1e       	adc	r15, r17
    32ea:	43 1f       	adc	r20, r19
    32ec:	56 1f       	adc	r21, r22
    32ee:	c9 1f       	adc	r28, r25
    32f0:	d0 1d       	adc	r29, r0
    32f2:	7e f4       	brtc	.+30     	; 0x3312 <__ftoa_engine+0x146>
    32f4:	70 33       	cpi	r23, 0x30	; 48
    32f6:	11 f4       	brne	.+4      	; 0x32fc <__ftoa_engine+0x130>
    32f8:	8a 95       	dec	r24
    32fa:	e6 cf       	rjmp	.-52     	; 0x32c8 <__ftoa_engine+0xfc>
    32fc:	e8 94       	clt
    32fe:	01 50       	subi	r16, 0x01	; 1
    3300:	30 f0       	brcs	.+12     	; 0x330e <__ftoa_engine+0x142>
    3302:	08 0f       	add	r16, r24
    3304:	0a f4       	brpl	.+2      	; 0x3308 <__ftoa_engine+0x13c>
    3306:	00 27       	eor	r16, r16
    3308:	02 17       	cp	r16, r18
    330a:	08 f4       	brcc	.+2      	; 0x330e <__ftoa_engine+0x142>
    330c:	20 2f       	mov	r18, r16
    330e:	23 95       	inc	r18
    3310:	02 2f       	mov	r16, r18
    3312:	7a 33       	cpi	r23, 0x3A	; 58
    3314:	28 f0       	brcs	.+10     	; 0x3320 <__ftoa_engine+0x154>
    3316:	79 e3       	ldi	r23, 0x39	; 57
    3318:	7d 93       	st	X+, r23
    331a:	2a 95       	dec	r18
    331c:	e9 f7       	brne	.-6      	; 0x3318 <__ftoa_engine+0x14c>
    331e:	10 c0       	rjmp	.+32     	; 0x3340 <__ftoa_engine+0x174>
    3320:	7d 93       	st	X+, r23
    3322:	2a 95       	dec	r18
    3324:	89 f6       	brne	.-94     	; 0x32c8 <__ftoa_engine+0xfc>
    3326:	06 94       	lsr	r0
    3328:	97 95       	ror	r25
    332a:	67 95       	ror	r22
    332c:	37 95       	ror	r19
    332e:	17 95       	ror	r17
    3330:	17 94       	ror	r1
    3332:	e1 18       	sub	r14, r1
    3334:	f1 0a       	sbc	r15, r17
    3336:	43 0b       	sbc	r20, r19
    3338:	56 0b       	sbc	r21, r22
    333a:	c9 0b       	sbc	r28, r25
    333c:	d0 09       	sbc	r29, r0
    333e:	98 f0       	brcs	.+38     	; 0x3366 <__ftoa_engine+0x19a>
    3340:	23 95       	inc	r18
    3342:	7e 91       	ld	r23, -X
    3344:	73 95       	inc	r23
    3346:	7a 33       	cpi	r23, 0x3A	; 58
    3348:	08 f0       	brcs	.+2      	; 0x334c <__ftoa_engine+0x180>
    334a:	70 e3       	ldi	r23, 0x30	; 48
    334c:	7c 93       	st	X, r23
    334e:	20 13       	cpse	r18, r16
    3350:	b8 f7       	brcc	.-18     	; 0x3340 <__ftoa_engine+0x174>
    3352:	7e 91       	ld	r23, -X
    3354:	70 61       	ori	r23, 0x10	; 16
    3356:	7d 93       	st	X+, r23
    3358:	30 f0       	brcs	.+12     	; 0x3366 <__ftoa_engine+0x19a>
    335a:	83 95       	inc	r24
    335c:	71 e3       	ldi	r23, 0x31	; 49
    335e:	7d 93       	st	X+, r23
    3360:	70 e3       	ldi	r23, 0x30	; 48
    3362:	2a 95       	dec	r18
    3364:	e1 f7       	brne	.-8      	; 0x335e <__ftoa_engine+0x192>
    3366:	11 24       	eor	r1, r1
    3368:	ef 90       	pop	r14
    336a:	ff 90       	pop	r15
    336c:	0f 91       	pop	r16
    336e:	1f 91       	pop	r17
    3370:	cf 91       	pop	r28
    3372:	df 91       	pop	r29
    3374:	99 27       	eor	r25, r25
    3376:	87 fd       	sbrc	r24, 7
    3378:	90 95       	com	r25
    337a:	08 95       	ret

0000337c <strncasecmp_P>:
    337c:	fb 01       	movw	r30, r22
    337e:	dc 01       	movw	r26, r24
    3380:	41 50       	subi	r20, 0x01	; 1
    3382:	50 40       	sbci	r21, 0x00	; 0
    3384:	88 f0       	brcs	.+34     	; 0x33a8 <strncasecmp_P+0x2c>
    3386:	8d 91       	ld	r24, X+
    3388:	81 34       	cpi	r24, 0x41	; 65
    338a:	1c f0       	brlt	.+6      	; 0x3392 <strncasecmp_P+0x16>
    338c:	8b 35       	cpi	r24, 0x5B	; 91
    338e:	0c f4       	brge	.+2      	; 0x3392 <strncasecmp_P+0x16>
    3390:	80 5e       	subi	r24, 0xE0	; 224
    3392:	65 91       	lpm	r22, Z+
    3394:	61 34       	cpi	r22, 0x41	; 65
    3396:	1c f0       	brlt	.+6      	; 0x339e <strncasecmp_P+0x22>
    3398:	6b 35       	cpi	r22, 0x5B	; 91
    339a:	0c f4       	brge	.+2      	; 0x339e <strncasecmp_P+0x22>
    339c:	60 5e       	subi	r22, 0xE0	; 224
    339e:	86 1b       	sub	r24, r22
    33a0:	61 11       	cpse	r22, r1
    33a2:	71 f3       	breq	.-36     	; 0x3380 <strncasecmp_P+0x4>
    33a4:	99 0b       	sbc	r25, r25
    33a6:	08 95       	ret
    33a8:	88 1b       	sub	r24, r24
    33aa:	fc cf       	rjmp	.-8      	; 0x33a4 <strncasecmp_P+0x28>

000033ac <strnlen_P>:
    33ac:	fc 01       	movw	r30, r24
    33ae:	05 90       	lpm	r0, Z+
    33b0:	61 50       	subi	r22, 0x01	; 1
    33b2:	70 40       	sbci	r23, 0x00	; 0
    33b4:	01 10       	cpse	r0, r1
    33b6:	d8 f7       	brcc	.-10     	; 0x33ae <strnlen_P+0x2>
    33b8:	80 95       	com	r24
    33ba:	90 95       	com	r25
    33bc:	8e 0f       	add	r24, r30
    33be:	9f 1f       	adc	r25, r31
    33c0:	08 95       	ret

000033c2 <strnlen>:
    33c2:	fc 01       	movw	r30, r24
    33c4:	61 50       	subi	r22, 0x01	; 1
    33c6:	70 40       	sbci	r23, 0x00	; 0
    33c8:	01 90       	ld	r0, Z+
    33ca:	01 10       	cpse	r0, r1
    33cc:	d8 f7       	brcc	.-10     	; 0x33c4 <strnlen+0x2>
    33ce:	80 95       	com	r24
    33d0:	90 95       	com	r25
    33d2:	8e 0f       	add	r24, r30
    33d4:	9f 1f       	adc	r25, r31
    33d6:	08 95       	ret

000033d8 <__mulhi_const_10>:
    33d8:	7a e0       	ldi	r23, 0x0A	; 10
    33da:	97 9f       	mul	r25, r23
    33dc:	90 2d       	mov	r25, r0
    33de:	87 9f       	mul	r24, r23
    33e0:	80 2d       	mov	r24, r0
    33e2:	91 0d       	add	r25, r1
    33e4:	11 24       	eor	r1, r1
    33e6:	08 95       	ret

000033e8 <fprintf>:
    33e8:	a0 e0       	ldi	r26, 0x00	; 0
    33ea:	b0 e0       	ldi	r27, 0x00	; 0
    33ec:	e9 ef       	ldi	r30, 0xF9	; 249
    33ee:	f9 e1       	ldi	r31, 0x19	; 25
    33f0:	a9 ce       	rjmp	.-686    	; 0x3144 <__prologue_saves__+0x20>
    33f2:	ae 01       	movw	r20, r28
    33f4:	47 5f       	subi	r20, 0xF7	; 247
    33f6:	5f 4f       	sbci	r21, 0xFF	; 255
    33f8:	6f 81       	ldd	r22, Y+7	; 0x07
    33fa:	78 85       	ldd	r23, Y+8	; 0x08
    33fc:	8d 81       	ldd	r24, Y+5	; 0x05
    33fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3400:	ec da       	rcall	.-2600   	; 0x29da <vfprintf>
    3402:	e2 e0       	ldi	r30, 0x02	; 2
    3404:	bb ce       	rjmp	.-650    	; 0x317c <__epilogue_restores__+0x20>

00003406 <fputc>:
    3406:	0f 93       	push	r16
    3408:	1f 93       	push	r17
    340a:	cf 93       	push	r28
    340c:	df 93       	push	r29
    340e:	18 2f       	mov	r17, r24
    3410:	09 2f       	mov	r16, r25
    3412:	eb 01       	movw	r28, r22
    3414:	8b 81       	ldd	r24, Y+3	; 0x03
    3416:	81 fd       	sbrc	r24, 1
    3418:	03 c0       	rjmp	.+6      	; 0x3420 <fputc+0x1a>
    341a:	8f ef       	ldi	r24, 0xFF	; 255
    341c:	9f ef       	ldi	r25, 0xFF	; 255
    341e:	20 c0       	rjmp	.+64     	; 0x3460 <fputc+0x5a>
    3420:	82 ff       	sbrs	r24, 2
    3422:	10 c0       	rjmp	.+32     	; 0x3444 <fputc+0x3e>
    3424:	4e 81       	ldd	r20, Y+6	; 0x06
    3426:	5f 81       	ldd	r21, Y+7	; 0x07
    3428:	2c 81       	ldd	r18, Y+4	; 0x04
    342a:	3d 81       	ldd	r19, Y+5	; 0x05
    342c:	42 17       	cp	r20, r18
    342e:	53 07       	cpc	r21, r19
    3430:	7c f4       	brge	.+30     	; 0x3450 <fputc+0x4a>
    3432:	e8 81       	ld	r30, Y
    3434:	f9 81       	ldd	r31, Y+1	; 0x01
    3436:	9f 01       	movw	r18, r30
    3438:	2f 5f       	subi	r18, 0xFF	; 255
    343a:	3f 4f       	sbci	r19, 0xFF	; 255
    343c:	39 83       	std	Y+1, r19	; 0x01
    343e:	28 83       	st	Y, r18
    3440:	10 83       	st	Z, r17
    3442:	06 c0       	rjmp	.+12     	; 0x3450 <fputc+0x4a>
    3444:	e8 85       	ldd	r30, Y+8	; 0x08
    3446:	f9 85       	ldd	r31, Y+9	; 0x09
    3448:	81 2f       	mov	r24, r17
    344a:	09 95       	icall
    344c:	89 2b       	or	r24, r25
    344e:	29 f7       	brne	.-54     	; 0x341a <fputc+0x14>
    3450:	2e 81       	ldd	r18, Y+6	; 0x06
    3452:	3f 81       	ldd	r19, Y+7	; 0x07
    3454:	2f 5f       	subi	r18, 0xFF	; 255
    3456:	3f 4f       	sbci	r19, 0xFF	; 255
    3458:	3f 83       	std	Y+7, r19	; 0x07
    345a:	2e 83       	std	Y+6, r18	; 0x06
    345c:	81 2f       	mov	r24, r17
    345e:	90 2f       	mov	r25, r16
    3460:	df 91       	pop	r29
    3462:	cf 91       	pop	r28
    3464:	1f 91       	pop	r17
    3466:	0f 91       	pop	r16
    3468:	08 95       	ret

0000346a <fputs>:
    346a:	ef 92       	push	r14
    346c:	ff 92       	push	r15
    346e:	0f 93       	push	r16
    3470:	1f 93       	push	r17
    3472:	cf 93       	push	r28
    3474:	df 93       	push	r29
    3476:	8b 01       	movw	r16, r22
    3478:	db 01       	movw	r26, r22
    347a:	13 96       	adiw	r26, 0x03	; 3
    347c:	2c 91       	ld	r18, X
    347e:	21 ff       	sbrs	r18, 1
    3480:	16 c0       	rjmp	.+44     	; 0x34ae <fputs+0x44>
    3482:	ec 01       	movw	r28, r24
    3484:	e1 2c       	mov	r14, r1
    3486:	f1 2c       	mov	r15, r1
    3488:	89 91       	ld	r24, Y+
    348a:	88 23       	and	r24, r24
    348c:	71 f0       	breq	.+28     	; 0x34aa <fputs+0x40>
    348e:	d8 01       	movw	r26, r16
    3490:	18 96       	adiw	r26, 0x08	; 8
    3492:	ed 91       	ld	r30, X+
    3494:	fc 91       	ld	r31, X
    3496:	19 97       	sbiw	r26, 0x09	; 9
    3498:	b8 01       	movw	r22, r16
    349a:	09 95       	icall
    349c:	89 2b       	or	r24, r25
    349e:	a1 f3       	breq	.-24     	; 0x3488 <fputs+0x1e>
    34a0:	ee 24       	eor	r14, r14
    34a2:	ea 94       	dec	r14
    34a4:	ff 24       	eor	r15, r15
    34a6:	fa 94       	dec	r15
    34a8:	ef cf       	rjmp	.-34     	; 0x3488 <fputs+0x1e>
    34aa:	c7 01       	movw	r24, r14
    34ac:	02 c0       	rjmp	.+4      	; 0x34b2 <fputs+0x48>
    34ae:	8f ef       	ldi	r24, 0xFF	; 255
    34b0:	9f ef       	ldi	r25, 0xFF	; 255
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
    34b6:	e6 e0       	ldi	r30, 0x06	; 6
    34b8:	5d ce       	rjmp	.-838    	; 0x3174 <__epilogue_restores__+0x18>

000034ba <__ultoa_invert>:
    34ba:	fa 01       	movw	r30, r20
    34bc:	aa 27       	eor	r26, r26
    34be:	28 30       	cpi	r18, 0x08	; 8
    34c0:	51 f1       	breq	.+84     	; 0x3516 <__ultoa_invert+0x5c>
    34c2:	20 31       	cpi	r18, 0x10	; 16
    34c4:	81 f1       	breq	.+96     	; 0x3526 <__ultoa_invert+0x6c>
    34c6:	e8 94       	clt
    34c8:	6f 93       	push	r22
    34ca:	6e 7f       	andi	r22, 0xFE	; 254
    34cc:	6e 5f       	subi	r22, 0xFE	; 254
    34ce:	7f 4f       	sbci	r23, 0xFF	; 255
    34d0:	8f 4f       	sbci	r24, 0xFF	; 255
    34d2:	9f 4f       	sbci	r25, 0xFF	; 255
    34d4:	af 4f       	sbci	r26, 0xFF	; 255
    34d6:	b1 e0       	ldi	r27, 0x01	; 1
    34d8:	3e d0       	rcall	.+124    	; 0x3556 <__ultoa_invert+0x9c>
    34da:	b4 e0       	ldi	r27, 0x04	; 4
    34dc:	3c d0       	rcall	.+120    	; 0x3556 <__ultoa_invert+0x9c>
    34de:	67 0f       	add	r22, r23
    34e0:	78 1f       	adc	r23, r24
    34e2:	89 1f       	adc	r24, r25
    34e4:	9a 1f       	adc	r25, r26
    34e6:	a1 1d       	adc	r26, r1
    34e8:	68 0f       	add	r22, r24
    34ea:	79 1f       	adc	r23, r25
    34ec:	8a 1f       	adc	r24, r26
    34ee:	91 1d       	adc	r25, r1
    34f0:	a1 1d       	adc	r26, r1
    34f2:	6a 0f       	add	r22, r26
    34f4:	71 1d       	adc	r23, r1
    34f6:	81 1d       	adc	r24, r1
    34f8:	91 1d       	adc	r25, r1
    34fa:	a1 1d       	adc	r26, r1
    34fc:	20 d0       	rcall	.+64     	; 0x353e <__ultoa_invert+0x84>
    34fe:	09 f4       	brne	.+2      	; 0x3502 <__ultoa_invert+0x48>
    3500:	68 94       	set
    3502:	3f 91       	pop	r19
    3504:	2a e0       	ldi	r18, 0x0A	; 10
    3506:	26 9f       	mul	r18, r22
    3508:	11 24       	eor	r1, r1
    350a:	30 19       	sub	r19, r0
    350c:	30 5d       	subi	r19, 0xD0	; 208
    350e:	31 93       	st	Z+, r19
    3510:	de f6       	brtc	.-74     	; 0x34c8 <__ultoa_invert+0xe>
    3512:	cf 01       	movw	r24, r30
    3514:	08 95       	ret
    3516:	46 2f       	mov	r20, r22
    3518:	47 70       	andi	r20, 0x07	; 7
    351a:	40 5d       	subi	r20, 0xD0	; 208
    351c:	41 93       	st	Z+, r20
    351e:	b3 e0       	ldi	r27, 0x03	; 3
    3520:	0f d0       	rcall	.+30     	; 0x3540 <__ultoa_invert+0x86>
    3522:	c9 f7       	brne	.-14     	; 0x3516 <__ultoa_invert+0x5c>
    3524:	f6 cf       	rjmp	.-20     	; 0x3512 <__ultoa_invert+0x58>
    3526:	46 2f       	mov	r20, r22
    3528:	4f 70       	andi	r20, 0x0F	; 15
    352a:	40 5d       	subi	r20, 0xD0	; 208
    352c:	4a 33       	cpi	r20, 0x3A	; 58
    352e:	18 f0       	brcs	.+6      	; 0x3536 <__ultoa_invert+0x7c>
    3530:	49 5d       	subi	r20, 0xD9	; 217
    3532:	31 fd       	sbrc	r19, 1
    3534:	40 52       	subi	r20, 0x20	; 32
    3536:	41 93       	st	Z+, r20
    3538:	02 d0       	rcall	.+4      	; 0x353e <__ultoa_invert+0x84>
    353a:	a9 f7       	brne	.-22     	; 0x3526 <__ultoa_invert+0x6c>
    353c:	ea cf       	rjmp	.-44     	; 0x3512 <__ultoa_invert+0x58>
    353e:	b4 e0       	ldi	r27, 0x04	; 4
    3540:	a6 95       	lsr	r26
    3542:	97 95       	ror	r25
    3544:	87 95       	ror	r24
    3546:	77 95       	ror	r23
    3548:	67 95       	ror	r22
    354a:	ba 95       	dec	r27
    354c:	c9 f7       	brne	.-14     	; 0x3540 <__ultoa_invert+0x86>
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	61 05       	cpc	r22, r1
    3552:	71 05       	cpc	r23, r1
    3554:	08 95       	ret
    3556:	9b 01       	movw	r18, r22
    3558:	ac 01       	movw	r20, r24
    355a:	0a 2e       	mov	r0, r26
    355c:	06 94       	lsr	r0
    355e:	57 95       	ror	r21
    3560:	47 95       	ror	r20
    3562:	37 95       	ror	r19
    3564:	27 95       	ror	r18
    3566:	ba 95       	dec	r27
    3568:	c9 f7       	brne	.-14     	; 0x355c <__ultoa_invert+0xa2>
    356a:	62 0f       	add	r22, r18
    356c:	73 1f       	adc	r23, r19
    356e:	84 1f       	adc	r24, r20
    3570:	95 1f       	adc	r25, r21
    3572:	a0 1d       	adc	r26, r0
    3574:	08 95       	ret

00003576 <__eerd_byte_m32u4>:
    3576:	f9 99       	sbic	0x1f, 1	; 31
    3578:	fe cf       	rjmp	.-4      	; 0x3576 <__eerd_byte_m32u4>
    357a:	92 bd       	out	0x22, r25	; 34
    357c:	81 bd       	out	0x21, r24	; 33
    357e:	f8 9a       	sbi	0x1f, 0	; 31
    3580:	99 27       	eor	r25, r25
    3582:	80 b5       	in	r24, 0x20	; 32
    3584:	08 95       	ret

00003586 <__eerd_dword_m32u4>:
    3586:	a6 e1       	ldi	r26, 0x16	; 22
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	44 e0       	ldi	r20, 0x04	; 4
    358c:	50 e0       	ldi	r21, 0x00	; 0
    358e:	25 c0       	rjmp	.+74     	; 0x35da <__eerd_blraw_m32u4>

00003590 <__eerd_word_m32u4>:
    3590:	a8 e1       	ldi	r26, 0x18	; 24
    3592:	b0 e0       	ldi	r27, 0x00	; 0
    3594:	42 e0       	ldi	r20, 0x02	; 2
    3596:	50 e0       	ldi	r21, 0x00	; 0
    3598:	20 c0       	rjmp	.+64     	; 0x35da <__eerd_blraw_m32u4>

0000359a <__eeupd_byte_m32u4>:
    359a:	26 2f       	mov	r18, r22

0000359c <__eeupd_r18_m32u4>:
    359c:	f9 99       	sbic	0x1f, 1	; 31
    359e:	fe cf       	rjmp	.-4      	; 0x359c <__eeupd_r18_m32u4>
    35a0:	92 bd       	out	0x22, r25	; 34
    35a2:	81 bd       	out	0x21, r24	; 33
    35a4:	f8 9a       	sbi	0x1f, 0	; 31
    35a6:	01 97       	sbiw	r24, 0x01	; 1
    35a8:	00 b4       	in	r0, 0x20	; 32
    35aa:	02 16       	cp	r0, r18
    35ac:	39 f0       	breq	.+14     	; 0x35bc <__eeupd_r18_m32u4+0x20>
    35ae:	1f ba       	out	0x1f, r1	; 31
    35b0:	20 bd       	out	0x20, r18	; 32
    35b2:	0f b6       	in	r0, 0x3f	; 63
    35b4:	f8 94       	cli
    35b6:	fa 9a       	sbi	0x1f, 2	; 31
    35b8:	f9 9a       	sbi	0x1f, 1	; 31
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	08 95       	ret

000035be <__eeupd_dword_m32u4>:
    35be:	03 96       	adiw	r24, 0x03	; 3
    35c0:	27 2f       	mov	r18, r23
    35c2:	ec df       	rcall	.-40     	; 0x359c <__eeupd_r18_m32u4>
    35c4:	ea df       	rcall	.-44     	; 0x359a <__eeupd_byte_m32u4>
    35c6:	25 2f       	mov	r18, r21
    35c8:	e9 df       	rcall	.-46     	; 0x359c <__eeupd_r18_m32u4>
    35ca:	24 2f       	mov	r18, r20
    35cc:	e7 cf       	rjmp	.-50     	; 0x359c <__eeupd_r18_m32u4>

000035ce <__eeupd_word_m32u4>:
    35ce:	01 96       	adiw	r24, 0x01	; 1
    35d0:	27 2f       	mov	r18, r23
    35d2:	e4 df       	rcall	.-56     	; 0x359c <__eeupd_r18_m32u4>
    35d4:	e2 cf       	rjmp	.-60     	; 0x359a <__eeupd_byte_m32u4>

000035d6 <__eerd_block_m32u4>:
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22

000035da <__eerd_blraw_m32u4>:
    35da:	fc 01       	movw	r30, r24
    35dc:	f9 99       	sbic	0x1f, 1	; 31
    35de:	fe cf       	rjmp	.-4      	; 0x35dc <__eerd_blraw_m32u4+0x2>
    35e0:	06 c0       	rjmp	.+12     	; 0x35ee <__eerd_blraw_m32u4+0x14>
    35e2:	f2 bd       	out	0x22, r31	; 34
    35e4:	e1 bd       	out	0x21, r30	; 33
    35e6:	f8 9a       	sbi	0x1f, 0	; 31
    35e8:	31 96       	adiw	r30, 0x01	; 1
    35ea:	00 b4       	in	r0, 0x20	; 32
    35ec:	0d 92       	st	X+, r0
    35ee:	41 50       	subi	r20, 0x01	; 1
    35f0:	50 40       	sbci	r21, 0x00	; 0
    35f2:	b8 f7       	brcc	.-18     	; 0x35e2 <__eerd_blraw_m32u4+0x8>
    35f4:	08 95       	ret

000035f6 <_exit>:
    35f6:	f8 94       	cli

000035f8 <__stop_program>:
    35f8:	ff cf       	rjmp	.-2      	; 0x35f8 <__stop_program>
